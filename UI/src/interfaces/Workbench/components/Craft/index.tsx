import './styles.sass'
import React from 'react'
import { useAppSelector } from '../../../../hooks/redux'
import { ItemImagesSquad } from '../../../Inventory/assets/items'
import Slot from '../../../Inventory/components/Slot'
import { DragInfo, HoverInfo } from '../../../Inventory'
import { callClient } from '../../../../utils/api'
import { Grids } from '../../../../shared/inventory/inventoryType'
import { WorkbenchEvents } from '../../../../shared/Crafts/events'

type PropsType = {
	hover: {
		info: HoverInfo
		set: (info: HoverInfo) => void
	}
	drag: {
		info: DragInfo
		set: (info: DragInfo) => void
	}
}

const Craft: React.FC<PropsType> = ({ hover, drag }) => {
	const { currentCraft } = useAppSelector(state => state.workbench)

	const getComponents = () =>
		(currentCraft?.components ?? []).map((component, idx) => {
			return (
				<Slot
					key={idx}
					className='component'
					// @ts-expect-error qwe
					bgImageUrl={component === null ? null : InventoryItemsImages[`${component.image}.png`]}
					amount={component === null ? undefined : component.amount}
					hover={hover}
					itemId={component ? component.id : null}
					info={component ? component.info : undefined}
				/>
			)
		})

	const getProgressTime = () => {
		if (currentCraft == null) {return null}
		const time = currentCraft.progress.time.max - currentCraft.progress.time.current
		const minutes = Math.floor(time / 60)
		const seconds = time % 60
		return [minutes, seconds].map(el => `${el < 10 ? '0' : ''}${el}`).join(':')
	}

	let progressMultiple =
		currentCraft != null ? currentCraft.progress.time.current / currentCraft.progress.time.max : 0
	if (!progressMultiple) {progressMultiple = 0}

	const slot =
		currentCraft != null && currentCraft.components.length && currentCraft.components[0] !== null
			? currentCraft.components[0]
			: null

	return (
		<div
			className={`_Craft ${currentCraft != null && currentCraft.progress.isStarted && '-progress'}`}
		>
			{currentCraft != null && !currentCraft.progress.isStarted ? (
				<Slot
					className='empty'
					// @ts-expect-error qwe
					bgImageUrl={slot === null ? null : InventoryItemsImages[`${slot.image}.png`]}
					amount={slot === null ? undefined : slot.amount}
					hover={hover}
					itemId={slot ? slot.id : null}
					info={slot ? slot.info : undefined}
				/>
			) : (
				<>
					<div className='components'>{getComponents()}</div>
					<div className='progress'>
						<div className='icon'>
							<svg
								width='24'
								height='24'
								viewBox='0 0 25 24'
								fill='none'
								xmlns='http://www.w3.org/2000/svg'
							>
								<g opacity='0.4'>
									<path
										d='M16.8968 2C16.7668 2 16.6578 2.09952 16.6468 2.22852L16.5725 3.11914C15.8048 3.30226 15.1267 3.70317 14.6018 4.25781L13.7952 3.87695C13.6772 3.82095 13.536 3.86552 13.471 3.97852L12.8675 5.02344C12.8025 5.13544 12.8347 5.27952 12.9417 5.35352L13.6839 5.86719C13.5765 6.22862 13.5003 6.60374 13.5003 7C13.5003 7.39692 13.5762 7.7728 13.6839 8.13477L12.9436 8.64844C12.8366 8.72244 12.8044 8.86552 12.8694 8.97852L13.4729 10.0234C13.5379 10.1354 13.6772 10.178 13.7952 10.123L14.6018 9.74219C15.1267 10.2968 15.8048 10.6977 16.5725 10.8809L16.6468 11.7715C16.6578 11.9005 16.7668 12 16.8968 12H18.1038C18.2338 12 18.3428 11.9005 18.3538 11.7715L18.428 10.8809C19.1958 10.6977 19.8739 10.2968 20.3987 9.74219L21.2054 10.123C21.3234 10.179 21.4646 10.1345 21.5296 10.0215L22.1331 8.97656C22.1981 8.86456 22.1659 8.72048 22.0589 8.64648L21.3167 8.13281C21.424 7.77138 21.5003 7.39626 21.5003 7C21.5003 6.60308 21.4244 6.2272 21.3167 5.86523L22.0569 5.35156C22.1639 5.27756 22.1961 5.13448 22.1311 5.02148L21.5276 3.97656C21.4626 3.86456 21.3234 3.82195 21.2054 3.87695L20.3987 4.25781C19.8739 3.70317 19.1958 3.30226 18.428 3.11914L18.3538 2.22852C18.3428 2.09952 18.2338 2 18.1038 2H16.8968ZM6.89677 4C6.76677 4 6.65777 4.09952 6.64677 4.22852L6.57255 5.11914C5.8048 5.30226 5.12668 5.70317 4.60184 6.25781L3.7952 5.87695C3.6772 5.82095 3.53598 5.86552 3.47098 5.97852L2.86747 7.02344C2.80247 7.13544 2.83469 7.27952 2.94169 7.35352L3.68388 7.86719C3.57654 8.22862 3.50028 8.60374 3.50028 9C3.50028 9.39692 3.57619 9.7728 3.68388 10.1348L2.94364 10.6484C2.83664 10.7224 2.80442 10.8655 2.86942 10.9785L3.47294 12.0234C3.53794 12.1354 3.6772 12.178 3.7952 12.123L4.60184 11.7422C5.1271 12.2973 5.806 12.6979 6.5745 12.8809L6.64872 13.7715C6.65972 13.9005 6.76677 14 6.89677 14H8.1038C8.2338 14 8.3428 13.9005 8.3538 13.7715L8.42802 12.8809C9.19577 12.6977 9.87388 12.2968 10.3987 11.7422L11.2054 12.123C11.3234 12.179 11.4646 12.1345 11.5296 12.0215L12.1331 10.9766C12.1981 10.8646 12.1659 10.7205 12.0589 10.6465L11.3167 10.1328C11.424 9.77138 11.5003 9.39626 11.5003 9C11.5003 8.60308 11.4244 8.2272 11.3167 7.86523L12.0569 7.35156C12.1639 7.27756 12.1961 7.13448 12.1311 7.02148L11.5276 5.97656C11.4626 5.86456 11.3234 5.82195 11.2054 5.87695L10.3987 6.25781C9.87388 5.70317 9.19577 5.30226 8.42802 5.11914L8.3538 4.22852C8.3428 4.09952 8.2338 4 8.1038 4H6.89677ZM17.5003 5.5C18.3283 5.5 19.0003 6.172 19.0003 7C19.0003 7.828 18.3283 8.5 17.5003 8.5C16.6723 8.5 16.0003 7.828 16.0003 7C16.0003 6.172 16.6723 5.5 17.5003 5.5ZM7.50028 7.5C8.32828 7.5 9.00028 8.172 9.00028 9C9.00028 9.828 8.32828 10.5 7.50028 10.5C6.67228 10.5 6.00028 9.828 6.00028 9C6.00028 8.172 6.67228 7.5 7.50028 7.5ZM13.8968 12C13.7668 12 13.6578 12.0995 13.6468 12.2285L13.5725 13.1191C12.8048 13.3023 12.1267 13.7032 11.6018 14.2578L10.7952 13.877C10.6772 13.821 10.536 13.8655 10.471 13.9785L9.86747 15.0234C9.80247 15.1354 9.83469 15.2795 9.94169 15.3535L10.6839 15.8672C10.5765 16.2286 10.5003 16.6037 10.5003 17C10.5003 17.3969 10.5762 17.7728 10.6839 18.1348L9.94364 18.6484C9.83664 18.7224 9.80442 18.8655 9.86942 18.9785L10.4729 20.0234C10.5379 20.1354 10.6772 20.178 10.7952 20.123L11.6018 19.7422C12.1267 20.2968 12.8048 20.6977 13.5725 20.8809L13.6468 21.7715C13.6578 21.9005 13.7668 22 13.8968 22H15.1038C15.2338 22 15.3428 21.9005 15.3538 21.7715L15.428 20.8809C16.1958 20.6977 16.8739 20.2968 17.3987 19.7422L18.2054 20.123C18.3234 20.179 18.4646 20.1345 18.5296 20.0215L19.1331 18.9766C19.1981 18.8646 19.1659 18.7205 19.0589 18.6465L18.3167 18.1328C18.424 17.7714 18.5003 17.3963 18.5003 17C18.5003 16.6031 18.4244 16.2272 18.3167 15.8652L19.0569 15.3516C19.1639 15.2776 19.1961 15.1345 19.1311 15.0215L18.5276 13.9766C18.4626 13.8646 18.3234 13.822 18.2054 13.877L17.3987 14.2578C16.8739 13.7032 16.1958 13.3023 15.428 13.1191L15.3538 12.2285C15.3428 12.0995 15.2338 12 15.1038 12H13.8968ZM14.5003 15.5C15.3283 15.5 16.0003 16.172 16.0003 17C16.0003 17.828 15.3283 18.5 14.5003 18.5C13.6723 18.5 13.0003 17.828 13.0003 17C13.0003 16.172 13.6723 15.5 14.5003 15.5Z'
										fill='white'
									/>
								</g>
								<mask
									id='mask0_95_2874'
									style={{ maskType: 'alpha' }}
									maskUnits='userSpaceOnUse'
									x='0'
									y='0'
									width='25'
									height='24'
								>
									<path
										d='M16.8968 2C16.7668 2 16.6578 2.09952 16.6468 2.22852L16.5725 3.11914C15.8048 3.30226 15.1267 3.70317 14.6018 4.25781L13.7952 3.87695C13.6772 3.82095 13.536 3.86552 13.471 3.97852L12.8675 5.02344C12.8025 5.13544 12.8347 5.27952 12.9417 5.35352L13.6839 5.86719C13.5765 6.22862 13.5003 6.60374 13.5003 7C13.5003 7.39692 13.5762 7.7728 13.6839 8.13477L12.9436 8.64844C12.8366 8.72244 12.8044 8.86552 12.8694 8.97852L13.4729 10.0234C13.5379 10.1354 13.6772 10.178 13.7952 10.123L14.6018 9.74219C15.1267 10.2968 15.8048 10.6977 16.5725 10.8809L16.6468 11.7715C16.6578 11.9005 16.7668 12 16.8968 12H18.1038C18.2338 12 18.3428 11.9005 18.3538 11.7715L18.428 10.8809C19.1958 10.6977 19.8739 10.2968 20.3987 9.74219L21.2054 10.123C21.3234 10.179 21.4646 10.1345 21.5296 10.0215L22.1331 8.97656C22.1981 8.86456 22.1659 8.72048 22.0589 8.64648L21.3167 8.13281C21.424 7.77138 21.5003 7.39626 21.5003 7C21.5003 6.60308 21.4244 6.2272 21.3167 5.86523L22.0569 5.35156C22.1639 5.27756 22.1961 5.13448 22.1311 5.02148L21.5276 3.97656C21.4626 3.86456 21.3234 3.82195 21.2054 3.87695L20.3987 4.25781C19.8739 3.70317 19.1958 3.30226 18.428 3.11914L18.3538 2.22852C18.3428 2.09952 18.2338 2 18.1038 2H16.8968ZM6.89677 4C6.76677 4 6.65777 4.09952 6.64677 4.22852L6.57255 5.11914C5.8048 5.30226 5.12668 5.70317 4.60184 6.25781L3.7952 5.87695C3.6772 5.82095 3.53598 5.86552 3.47098 5.97852L2.86747 7.02344C2.80247 7.13544 2.83469 7.27952 2.94169 7.35352L3.68388 7.86719C3.57654 8.22862 3.50028 8.60374 3.50028 9C3.50028 9.39692 3.57619 9.7728 3.68388 10.1348L2.94364 10.6484C2.83664 10.7224 2.80442 10.8655 2.86942 10.9785L3.47294 12.0234C3.53794 12.1354 3.6772 12.178 3.7952 12.123L4.60184 11.7422C5.1271 12.2973 5.806 12.6979 6.5745 12.8809L6.64872 13.7715C6.65972 13.9005 6.76677 14 6.89677 14H8.1038C8.2338 14 8.3428 13.9005 8.3538 13.7715L8.42802 12.8809C9.19577 12.6977 9.87388 12.2968 10.3987 11.7422L11.2054 12.123C11.3234 12.179 11.4646 12.1345 11.5296 12.0215L12.1331 10.9766C12.1981 10.8646 12.1659 10.7205 12.0589 10.6465L11.3167 10.1328C11.424 9.77138 11.5003 9.39626 11.5003 9C11.5003 8.60308 11.4244 8.2272 11.3167 7.86523L12.0569 7.35156C12.1639 7.27756 12.1961 7.13448 12.1311 7.02148L11.5276 5.97656C11.4626 5.86456 11.3234 5.82195 11.2054 5.87695L10.3987 6.25781C9.87388 5.70317 9.19577 5.30226 8.42802 5.11914L8.3538 4.22852C8.3428 4.09952 8.2338 4 8.1038 4H6.89677ZM17.5003 5.5C18.3283 5.5 19.0003 6.172 19.0003 7C19.0003 7.828 18.3283 8.5 17.5003 8.5C16.6723 8.5 16.0003 7.828 16.0003 7C16.0003 6.172 16.6723 5.5 17.5003 5.5ZM7.50028 7.5C8.32828 7.5 9.00028 8.172 9.00028 9C9.00028 9.828 8.32828 10.5 7.50028 10.5C6.67228 10.5 6.00028 9.828 6.00028 9C6.00028 8.172 6.67228 7.5 7.50028 7.5ZM13.8968 12C13.7668 12 13.6578 12.0995 13.6468 12.2285L13.5725 13.1191C12.8048 13.3023 12.1267 13.7032 11.6018 14.2578L10.7952 13.877C10.6772 13.821 10.536 13.8655 10.471 13.9785L9.86747 15.0234C9.80247 15.1354 9.83469 15.2795 9.94169 15.3535L10.6839 15.8672C10.5765 16.2286 10.5003 16.6037 10.5003 17C10.5003 17.3969 10.5762 17.7728 10.6839 18.1348L9.94364 18.6484C9.83664 18.7224 9.80442 18.8655 9.86942 18.9785L10.4729 20.0234C10.5379 20.1354 10.6772 20.178 10.7952 20.123L11.6018 19.7422C12.1267 20.2968 12.8048 20.6977 13.5725 20.8809L13.6468 21.7715C13.6578 21.9005 13.7668 22 13.8968 22H15.1038C15.2338 22 15.3428 21.9005 15.3538 21.7715L15.428 20.8809C16.1958 20.6977 16.8739 20.2968 17.3987 19.7422L18.2054 20.123C18.3234 20.179 18.4646 20.1345 18.5296 20.0215L19.1331 18.9766C19.1981 18.8646 19.1659 18.7205 19.0589 18.6465L18.3167 18.1328C18.424 17.7714 18.5003 17.3963 18.5003 17C18.5003 16.6031 18.4244 16.2272 18.3167 15.8652L19.0569 15.3516C19.1639 15.2776 19.1961 15.1345 19.1311 15.0215L18.5276 13.9766C18.4626 13.8646 18.3234 13.822 18.2054 13.877L17.3987 14.2578C16.8739 13.7032 16.1958 13.3023 15.428 13.1191L15.3538 12.2285C15.3428 12.0995 15.2338 12 15.1038 12H13.8968ZM14.5003 15.5C15.3283 15.5 16.0003 16.172 16.0003 17C16.0003 17.828 15.3283 18.5 14.5003 18.5C13.6723 18.5 13.0003 17.828 13.0003 17C13.0003 16.172 13.6723 15.5 14.5003 15.5Z'
										fill='white'
									/>
								</mask>
								<g mask='url(#mask0_95_2874)'>
									<rect
										x='0'
										y={24 - 24 * progressMultiple}
										width='24'
										height={24 * progressMultiple}
										fill='white'
									/>
								</g>
							</svg>
						</div>
						<div className='time'>{getProgressTime()}</div>
						<div className='cancel' onClick={() => callClient(WorkbenchEvents.Cancel)} />
					</div>
					<Slot
						className='result'
						item={
							currentCraft != null && currentCraft.progress.isCompleted ? currentCraft.result : null
						}
						// @ts-expect-error qwe
						bgImageUrl={
							currentCraft == null || currentCraft.result === null
								? null
								: ItemImagesSquad[`${currentCraft.result.image}.png`]
						}
						hover={hover}
						drag={drag}
						itemId={
							currentCraft == null || currentCraft.result === null ? null : currentCraft.result.id
						}
						info={
							currentCraft == null || currentCraft.result === null
								? undefined
								: currentCraft.result.info
						}
						gridId={Grids.Craft}
					/>
				</>
			)}
		</div>
	)
}

export default Craft
