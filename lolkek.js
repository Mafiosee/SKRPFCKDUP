/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 2112:
/***/ ((module) => {

module.exports = skyrimPlatform

/***/ }),

/***/ 6729:
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 1075:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormTypeEx = void 0;
class FormTypeEx {
    static isItem(type) {
        return (type === 42 ||
            type === 26 ||
            type === 27 ||
            type === 30 ||
            type === 31 ||
            type === 46 ||
            type === 23 ||
            type === 52 ||
            type === 41 ||
            type === 32);
    }
}
exports.FormTypeEx = FormTypeEx;


/***/ }),

/***/ 7564:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ObjectReferenceEx = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const formTypeEx_1 = __webpack_require__(1075);
class ObjectReferenceEx {
    static getWorldOrCell(self) {
        const world = self.getWorldSpace();
        if (world) {
            return world.getFormID();
        }
        const cell = self.getParentCell();
        if (cell) {
            return cell.getFormID();
        }
        return 0;
    }
    static getPos(self) {
        return [self.getPositionX(), self.getPositionY(), self.getPositionZ()];
    }
    static getDistance(a, b) {
        const deltaX = a[0] - b[0];
        const deltaY = a[1] - b[1];
        const deltaZ = a[2] - b[2];
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);
    }
    static getDistanceNoZ(a, b) {
        const deltaX = a[0] - b[0];
        const deltaY = a[1] - b[1];
        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    }
    static dealWithRef(self, base) {
        var _a, _b;
        const t = base.getType();
        const isItem = formTypeEx_1.FormTypeEx.isItem(t);
        const caveGSecretDoor01 = 0x6f703;
        if (t === 40 ||
            t === 24 ||
            t === 28 ||
            isItem ||
            t === 43 ||
            (t === 29 && ((_a = self.getBaseObject()) === null || _a === void 0 ? void 0 : _a.getFormID()) !== caveGSecretDoor01)) {
            self.blockActivation(true);
        }
        else {
            self.blockActivation(false);
        }
        if (self.isLocked()) {
            self.lock(false, false);
        }
        if (isItem) {
            self.setMotionType(4, false);
        }
        if (t === 39 && ((_b = skyrimPlatform_1.Flora.from(base)) === null || _b === void 0 ? void 0 : _b.getIngredient())) {
            self.setMotionType(4, false);
        }
    }
}
exports.ObjectReferenceEx = ObjectReferenceEx;


/***/ }),

/***/ 3607:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initServices = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const sp = __webpack_require__(2112);
__webpack_require__(9884);
const VoiceChat_1 = __webpack_require__(1299);
const activationService_1 = __webpack_require__(8548);
const animDebugService_1 = __webpack_require__(7172);
const blockPapyrusEventsService_1 = __webpack_require__(7265);
const consoleCommandsService_1 = __webpack_require__(8666);
const deathService_1 = __webpack_require__(4314);
const disableDifficultySelectionService_1 = __webpack_require__(5724);
const disableFastTravelService_1 = __webpack_require__(618);
const disableSkillAdvanceService_1 = __webpack_require__(2875);
const enforceLimitationsService_1 = __webpack_require__(4013);
const gamemodeEventSourceService_1 = __webpack_require__(313);
const gamemodeUpdateService_1 = __webpack_require__(9759);
const hitService_1 = __webpack_require__(6689);
const lastInvService_1 = __webpack_require__(2744);
const loadGameService_1 = __webpack_require__(1127);
const loadOrderVerificationService_1 = __webpack_require__(1249);
const networkingService_1 = __webpack_require__(3054);
const playerBowShotService_1 = __webpack_require__(7366);
const ragdollService_1 = __webpack_require__(5062);
const sendInputsService_1 = __webpack_require__(7483);
const skyrimRpClient_1 = __webpack_require__(6959);
const spSnippetService_1 = __webpack_require__(3936);
const spVersionCheckService_1 = __webpack_require__(3737);
const timeService_1 = __webpack_require__(39);
const timersService_1 = __webpack_require__(8031);
const worldCleanerService_1 = __webpack_require__(4434);
const spApiInteraction_1 = __webpack_require__(3331);
const remoteServer_1 = __webpack_require__(8986);
const launcherService_1 = __webpack_require__(2041);
const browserService_1 = __webpack_require__(5472);
const blockedAnimationsService_1 = __webpack_require__(5499);
const worldView_1 = __webpack_require__(5400);
const magicSyncService_1 = __webpack_require__(7332);
const healthArmorBarService_1 = __webpack_require__(9153);
const blockMenuService_1 = __webpack_require__(8622);
const Utils_1 = __webpack_require__(2453);
(0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
    skyrimPlatform_1.Game.setGameSettingInt('iDeathDropWeaponChance', 0);
    skyrimPlatform_1.Utility.setINIBool('bAlwaysActive:General', true);
    skyrimPlatform_1.Utility.setINIInt('iDifficulty:GamePlay', 5);
    skyrimPlatform_1.Utility.setINIFloat('fAutoVanityModeDelay:Camera', 72000.0);
    skyrimPlatform_1.Game.setGameSettingFloat('fFallLegDamageMult', 0);
}, 'Index'));
(0, skyrimPlatform_1.on)('cameraStateChanged', (e) => {
    if (e.newStateId !== 0) {
        return;
    }
    skyrimPlatform_1.Game.forceThirdPerson();
    skyrimPlatform_1.Game.updateThirdPerson();
    e.newStateId = e.oldStateId;
});
const initServices = () => {
    VoiceChat_1.VoiceChat.initVoice();
    try {
        const controller = spApiInteraction_1.SpApiInteraction.getControllerInstance();
        const listeners = [
            new browserService_1.BrowserService(sp, controller),
            new launcherService_1.LauncherService(sp, controller),
            new blockPapyrusEventsService_1.BlockPapyrusEventsService(sp, controller),
            new blockedAnimationsService_1.BlockedAnimationsService(sp, controller),
            new loadGameService_1.LoadGameService(sp, controller),
            new enforceLimitationsService_1.EnforceLimitationsService(sp, controller),
            new sendInputsService_1.SendInputsService(sp, controller),
            new skyrimRpClient_1.Client(sp, controller),
            new timeService_1.TimeService(sp, controller),
            new spVersionCheckService_1.SpVersionCheckService(sp, controller),
            new consoleCommandsService_1.ConsoleCommandsService(sp, controller),
            new lastInvService_1.LastInvService(sp, controller),
            new activationService_1.ActivationService(sp, controller),
            new hitService_1.HitService(sp, controller),
            new ragdollService_1.RagdollService(sp, controller),
            new deathService_1.DeathService(sp, controller),
            new networkingService_1.NetworkingService(sp, controller),
            new remoteServer_1.RemoteServer(sp, controller),
            new spSnippetService_1.SpSnippetService(sp, controller),
            new disableSkillAdvanceService_1.DisableSkillAdvanceService(sp, controller),
            new disableFastTravelService_1.DisableFastTravelService(sp, controller),
            new disableDifficultySelectionService_1.DisableDifficultySelectionService(sp, controller),
            new worldCleanerService_1.WorldCleanerService(sp, controller),
            new loadOrderVerificationService_1.LoadOrderVerificationService(sp, controller),
            new animDebugService_1.AnimDebugService(sp, controller),
            new timersService_1.TimersService(sp, controller),
            new playerBowShotService_1.PlayerBowShotService(sp, controller),
            new gamemodeEventSourceService_1.GamemodeEventSourceService(sp, controller),
            new gamemodeUpdateService_1.GamemodeUpdateService(sp, controller),
            new worldView_1.WorldView(sp, controller),
            new magicSyncService_1.MagicSyncService(sp, controller),
            new healthArmorBarService_1.HealthArmorBarService(sp, controller),
            new blockMenuService_1.BlockMenuService(sp, controller),
        ];
        spApiInteraction_1.SpApiInteraction.setup(listeners);
    }
    catch (e) {
        sp.printConsole(`Failed to setup listeners: ${e}`);
        throw e;
    }
};
exports.initServices = initServices;
(0, skyrimPlatform_1.once)('tick', () => {
    (0, exports.initServices)();
});


/***/ }),

/***/ 8286:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NeverError = exports.RespawnNeededError = void 0;
class RespawnNeededError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, RespawnNeededError.prototype);
    }
}
exports.RespawnNeededError = RespawnNeededError;
class NeverError extends Error {
    constructor(message) {
        super(`NeverError: ${JSON.stringify(message)}`);
        Object.setPrototypeOf(this, NeverError.prototype);
    }
}
exports.NeverError = NeverError;


/***/ }),

/***/ 6433:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IdManager = void 0;
class IdManager {
    constructor() {
        this.idByValue = new Array();
        this.valueById = new Array();
        this.minimumUnusedId = 0;
    }
    allocateIdFor(value) {
        if (this.idByValue.length <= value) {
            this.idByValue.length = value + 1;
        }
        this.idByValue[value] = this.minimumUnusedId;
        if (this.valueById.length <= this.minimumUnusedId) {
            this.valueById.length = this.minimumUnusedId + 1;
        }
        this.valueById[this.minimumUnusedId] = value;
        const res = this.minimumUnusedId;
        this.minimumUnusedId++;
        while (this.valueById.length > this.minimumUnusedId && typeof this.valueById[this.minimumUnusedId] === 'number') {
            this.minimumUnusedId++;
        }
        return res;
    }
    freeIdFor(value) {
        const id = this.idByValue[value];
        if (id < this.minimumUnusedId) {
            this.minimumUnusedId = id;
        }
        this.idByValue[value] = undefined;
        this.valueById[id] = undefined;
        return;
    }
    getId(value) {
        const r = this.idByValue[value];
        return typeof r === 'number' ? r : -1;
    }
    getValueById(id) {
        return this.valueById[id];
    }
}
exports.IdManager = IdManager;


/***/ }),

/***/ 4755:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nameof = void 0;
function nameof(key) {
    return key;
}
exports.nameof = nameof;


/***/ }),

/***/ 3740:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MsgType = void 0;
var MsgType;
(function (MsgType) {
    MsgType[MsgType["CustomPacket"] = 1] = "CustomPacket";
    MsgType[MsgType["UpdateMovement"] = 2] = "UpdateMovement";
    MsgType[MsgType["UpdateAnimation"] = 3] = "UpdateAnimation";
    MsgType[MsgType["UpdateAppearance"] = 4] = "UpdateAppearance";
    MsgType[MsgType["UpdateEquipment"] = 5] = "UpdateEquipment";
    MsgType[MsgType["Activate"] = 6] = "Activate";
    MsgType[MsgType["UpdateProperty"] = 7] = "UpdateProperty";
    MsgType[MsgType["PutItem"] = 8] = "PutItem";
    MsgType[MsgType["TakeItem"] = 9] = "TakeItem";
    MsgType[MsgType["FinishSpSnippet"] = 10] = "FinishSpSnippet";
    MsgType[MsgType["ConsoleCommand"] = 12] = "ConsoleCommand";
    MsgType[MsgType["CraftItem"] = 13] = "CraftItem";
    MsgType[MsgType["Host"] = 14] = "Host";
    MsgType[MsgType["CustomEvent"] = 15] = "CustomEvent";
    MsgType[MsgType["ChangeValues"] = 16] = "ChangeValues";
    MsgType[MsgType["OnHit"] = 17] = "OnHit";
    MsgType[MsgType["DeathStateContainer"] = 18] = "DeathStateContainer";
    MsgType[MsgType["Teleport"] = 20] = "Teleport";
    MsgType[MsgType["OpenContainer"] = 21] = "OpenContainer";
    MsgType[MsgType["PlayerBowShot"] = 22] = "PlayerBowShot";
    MsgType[MsgType["SpellCast"] = 23] = "SpellCast";
    MsgType[MsgType["UpdateAnimVariables"] = 24] = "UpdateAnimVariables";
    MsgType[MsgType["ReconMoveMessage"] = 26] = "ReconMoveMessage";
    MsgType[MsgType["ReconDetachMessage"] = 27] = "ReconDetachMessage";
})(MsgType = exports.MsgType || (exports.MsgType = {}));


/***/ }),

/***/ 3947:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationsHandler = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
class AnimationsHandler {
    static init() {
        this.initHook();
    }
    static initHook() {
        skyrimPlatform_1.hooks.sendAnimationEvent.add({
            enter: ctx => {
                if (ctx.animEventName === undefined || this.animationsIsBlock) {
                    ctx.animEventName = '';
                    return;
                }
            },
            leave: ctx => {
                if (ctx.animEventName === undefined) {
                    return;
                }
            },
        }, 0x14, 0x14);
    }
    static play(animationHash, isBlockedAnim = false) {
        (0, skyrimPlatform_1.once)('update', () => {
            if (Player_1.localPlayer.actor.isSwimming()) {
                return;
            }
            skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, 'Unequip');
            skyrimPlatform_1.Utility.wait(0.4).then(() => {
                skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, 'IdleSleepNod');
                skyrimPlatform_1.Utility.wait(0.2).then(() => {
                    skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, 'IdleForceDefaultState');
                    skyrimPlatform_1.Utility.wait(0.2).then(() => {
                        skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, animationHash);
                        this.activeAnimations = animationHash;
                        this.animationsIsBlock = isBlockedAnim;
                    });
                });
            });
        });
    }
    static stop() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, skyrimPlatform_1.once)('update', () => {
                if (Player_1.localPlayer.actor.isSwimming()) {
                    return;
                }
                this.animationsIsBlock = false;
                skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, 'IdleSleepNod');
                skyrimPlatform_1.Utility.wait(0.2).then(() => {
                    skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, 'IdleForceDefaultState');
                    this.activeAnimations = null;
                });
            });
        });
    }
}
exports.AnimationsHandler = AnimationsHandler;
AnimationsHandler.activeAnimations = null;
AnimationsHandler.animationsIsBlock = false;


/***/ }),

/***/ 7418:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArmorShop = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const events_1 = __webpack_require__(911);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Player_1 = __webpack_require__(5456);
const Utils_1 = __webpack_require__(2453);
const Items_1 = __webpack_require__(7187);
const itemType_1 = __webpack_require__(4405);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const CameraManager_1 = __webpack_require__(4633);
const CameraConfig_1 = __webpack_require__(3804);
class ArmorShop {
    static init() {
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.ArmorStoreEvents.Close).addHandler(this.closeInterface.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.ArmorStoreEvents.SetActiveProduct).addHandler(this.equipProduct.bind(this));
    }
    static playerOpenedShop(armorShopDto) {
        this.cameraManager = CameraManager_1.CameraManager.create(CameraConfig_1.ArmorShopCameraConfig, CameraConfig_1.ArmorShopCameraConfigScenes);
        this.initCamera();
        this.unequipAll();
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetCurrentProtection}`, { value: armorShopDto.currentProtection });
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetBalance}`, { value: armorShopDto.money });
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetStoreName}`, armorShopDto.name);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetProducts}`, armorShopDto.products);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Show}`, null, true);
    }
    static equipProduct(data) {
        (0, skyrimPlatform_1.once)('update', () => {
            this.unequipAll();
            if (!data.productId) {
                return;
            }
            const itemConfig = Items_1.default.get(data.productId);
            if (itemConfig.type !== itemType_1.ItemType.Armor) {
                return;
            }
            const armorItem = skyrimPlatform_1.Armor.from(skyrimPlatform_1.Game.getFormEx(parseInt(itemConfig.itemId, 16)));
            if (!armorItem) {
                return;
            }
            Player_1.localPlayer.actor.equipItem(armorItem, false, false);
        });
    }
    static changeScene(sceneId) {
        var _a;
        (_a = this.cameraManager) === null || _a === void 0 ? void 0 : _a.changeScene(sceneId);
    }
    static closeInterface() {
        this.destroyCamera();
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Hide}`, null, false);
        (0, Utils_1.sendEventToServer)(events_1.ArmorStoreEvents.Close);
    }
    static initCamera() {
        (0, skyrimPlatform_1.once)('update', () => {
            var _a;
            (_a = this.cameraManager) === null || _a === void 0 ? void 0 : _a.init();
            (0, Utils_1.freezePlayer)(true);
        });
    }
    static destroyCamera() {
        (0, skyrimPlatform_1.once)('update', () => {
            var _a;
            (_a = this.cameraManager) === null || _a === void 0 ? void 0 : _a.destroy();
            (0, Utils_1.freezePlayer)(false);
            skyrimPlatform_1.Game.forceFirstPerson();
        });
    }
    static unequipAll() {
        (0, skyrimPlatform_1.once)('update', () => {
            Player_1.localPlayer.actor.unequipAll();
        });
    }
}
exports.ArmorShop = ArmorShop;
ArmorShop.InterfaceName = InterfacesName_1.BrowserInterfacesName.ArmorStore;
ArmorShop.InterfaceFunction = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.ArmorStore];


/***/ }),

/***/ 3804:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArmorShopCameraConfigScenes = exports.ArmorShopCameraConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const Vector3_1 = __webpack_require__(2233);
exports.ArmorShopCameraConfig = {
    yawSpeed: 1.0,
    pitchSpeed: 1.0,
    moveSpeed: 3.0,
};
exports.ArmorShopCameraConfigScenes = {
    [itemType_1.ItemType.Armor]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Weapon]: {
        position: new Vector3_1.Vector3(0, -100, 0),
        direction: new Vector3_1.Vector3(0, -10, -1),
    },
    [itemType_1.ItemType.Backpack]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Potions]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Manuscripts]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Food]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Drinks]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Ingredients]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Resources]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Other]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Accessories]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
    [itemType_1.ItemType.Clothes]: {
        position: new Vector3_1.Vector3(0, -20, -20),
        direction: new Vector3_1.Vector3(0, -10, -2),
    },
};


/***/ }),

/***/ 3246:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FamiliarsHandler = void 0;
class FamiliarsHandler {
    static init() {
        this.familiars = [];
    }
    static addFamiliars(familiar) {
        if (!familiar) {
            return;
        }
        this.familiars = familiar;
    }
    static addFamiliar(familiarId) {
        this.familiars.push(familiarId);
    }
    static playerKnowTarget(targetId) {
        return this.familiars.some((familiarId) => familiarId === targetId);
    }
}
exports.FamiliarsHandler = FamiliarsHandler;


/***/ }),

/***/ 1508:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FishingWork = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const GameRestrictions_1 = __webpack_require__(3352);
const animationsConfig_1 = __webpack_require__(476);
const AnimationEnum_1 = __webpack_require__(1435);
const spApiInteraction_1 = __webpack_require__(3331);
const browserService_1 = __webpack_require__(5472);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const AnimationsHandler_1 = __webpack_require__(3947);
class FishingWork {
    static startFishing() {
        (0, skyrimPlatform_1.once)('update', () => {
            GameRestrictions_1.GameRestrictions.canCombatStage = false;
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Inventory}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Inventory].Hide}`, null);
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Show}`, null);
            AnimationsHandler_1.AnimationsHandler.play(animationsConfig_1.ANIMATIONS_CONFIG[AnimationEnum_1.AnimationEnum.Fishingidle]);
        });
    }
    static stopFishing() {
        (0, skyrimPlatform_1.once)('update', () => {
            GameRestrictions_1.GameRestrictions.canCombatStage = true;
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Hide}`, null);
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Inventory}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Inventory].Show}`, null);
            AnimationsHandler_1.AnimationsHandler.play(animationsConfig_1.ANIMATIONS_CONFIG[AnimationEnum_1.AnimationEnum.IdleForceDefaultState]);
        });
    }
}
exports.FishingWork = FishingWork;
FishingWork.InterfaceName = InterfacesName_1.BrowserInterfacesName.FishingGame;
FishingWork.InterfaceFunction = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.FishingGame];


/***/ }),

/***/ 1648:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GameSessionTime = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Utils_1 = __webpack_require__(2453);
const serverEvents_1 = __webpack_require__(593);
const spApiInteraction_1 = __webpack_require__(3331);
const timersService_1 = __webpack_require__(8031);
class GameSessionTime {
    static startTimer() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(this.tick.bind(this), 'GameSessionTime'));
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(timersService_1.TimersService)
            .setInterval(() => {
            this.sessionSeconds += 1;
        }, 1000);
    }
    static tick() {
        if (this.sessionSeconds === 60) {
            this.sessionSeconds = 0;
            this.sessionMinutes += 1;
        }
        if (this.sessionMinutes === 60) {
            this.sessionMinutes = 0;
            this.sessionSeconds = 0;
            this.sessionHours += 1;
            (0, Utils_1.sendEventToServer)(serverEvents_1.SessionTime.HourHasPassed);
        }
    }
}
exports.GameSessionTime = GameSessionTime;
GameSessionTime.sessionSeconds = 0;
GameSessionTime.sessionMinutes = 0;
GameSessionTime.sessionHours = 0;


/***/ }),

/***/ 7340:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HealthControlHandler = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const Binder_1 = __webpack_require__(9132);
const Hud_1 = __webpack_require__(9720);
const config_1 = __webpack_require__(6702);
const actorvalues_1 = __webpack_require__(9714);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const AnimationsHandler_1 = __webpack_require__(3947);
const animationsConfig_1 = __webpack_require__(476);
const AnimationEnum_1 = __webpack_require__(1435);
const MAXIMUM_HEALTH_OF_PLAYER = 100;
class HealthControlHandler {
    static setClientPlayerHealth(health) {
        (0, skyrimPlatform_1.once)('update', () => {
            if (health <= 0) {
                return;
            }
            (0, actorvalues_1.setActorValuePercentage)(Player_1.localPlayer.actor, 'health', health / 100);
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetUserHealth}`, {
                maxHP: MAXIMUM_HEALTH_OF_PLAYER,
                currentHP: health,
            });
        });
    }
    static checkClientPlayerHealth(serverHealth) {
        (0, skyrimPlatform_1.once)('update', () => {
            Player_1.localPlayer.actor.setActorValue('healrate', 0);
            Player_1.localPlayer.actor.setActorValue('combathealthregenmult', 0);
            skyrimPlatform_1.Debug.setGodMode(true);
            const clientHealth = Player_1.localPlayer.actor.getActorValue('health');
            if (clientHealth !== serverHealth && serverHealth > 0) {
                (0, actorvalues_1.setActorValuePercentage)(Player_1.localPlayer.actor, 'health', serverHealth / 100);
                spApiInteraction_1.SpApiInteraction.getControllerInstance()
                    .lookupListener(browserService_1.BrowserService)
                    .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetUserHealth}`, {
                    maxHP: MAXIMUM_HEALTH_OF_PLAYER,
                    currentHP: serverHealth,
                });
            }
        });
    }
    static startDeathStageForPlayer() {
        (0, skyrimPlatform_1.once)('update', () => {
            Binder_1.Binder.isDisable = true;
            Hud_1.Hud.close();
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.DeathScreen}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.DeathScreen].SetSeconds}`, {
                value: config_1.TIME_STAGE_OF_DEATH,
            });
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.DeathScreen}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.DeathScreen].SetShowWaitBtn}`, true);
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.DeathScreen}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.DeathScreen].Show}`, null, true);
            AnimationsHandler_1.AnimationsHandler.play(animationsConfig_1.ANIMATIONS_CONFIG[AnimationEnum_1.AnimationEnum.Wounded_02]);
            Player_1.localPlayer.actor.setDontMove(true);
        });
    }
    static endDeathStageForPlayer() {
        (0, skyrimPlatform_1.once)('update', () => {
            AnimationsHandler_1.AnimationsHandler.stop();
            Binder_1.Binder.isDisable = false;
            Hud_1.Hud.open();
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.DeathScreen}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.DeathScreen].Hide}`, null, false);
            Player_1.localPlayer.actor.setDontMove(false);
        });
    }
}
exports.HealthControlHandler = HealthControlHandler;


/***/ }),

/***/ 7005:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PickupItem = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const playerCharacterDataHolder_1 = __webpack_require__(3590);
const worldViewMisc_1 = __webpack_require__(9885);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const formView_1 = __webpack_require__(3770);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const Binder_1 = __webpack_require__(9132);
const binder_1 = __webpack_require__(1220);
const Utils_1 = __webpack_require__(2453);
const events_1 = __webpack_require__(8007);
class PickupItem {
    static init() {
        Binder_1.Binder.bindRelease(binder_1.BinderHash.Colshape, this.playerTryPickupItem.bind(this));
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            const targetRefrId = playerCharacterDataHolder_1.PlayerCharacterDataHolder.getCrosshairRefId();
            if (!targetRefrId) {
                if (this.menuIsOpen) {
                    this.closeInterface();
                }
                this.targetItemId = null;
                return;
            }
            const targetObject = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(targetRefrId));
            if (!targetObject) {
                if (this.menuIsOpen) {
                    this.closeInterface();
                }
                this.targetItemId = null;
                return;
            }
            const refId = (0, worldViewMisc_1.localIdToRemoteId)(targetObject.getFormID());
            if (this.itemsOnGround.some(v => v.itemId === refId.toString())) {
                const itemOnGround = this.itemsOnGround.find(v => v.itemId === refId.toString());
                if (itemOnGround) {
                    this.targetItemId = refId.toString();
                    const resolution = (0, formView_1.getScreenResolution)();
                    const screenPos = (0, skyrimPlatform_1.worldPointToScreenPoint)([
                        targetObject.getPositionX(),
                        targetObject.getPositionY(),
                        targetObject.getPositionZ(),
                    ])[0];
                    const textXPos = Math.round(screenPos[0] * resolution.width);
                    const textYPos = Math.round((1 - screenPos[1]) * resolution.height);
                    this.openInterface(itemOnGround.itemHash, itemOnGround.amount, { x: textXPos, y: textYPos });
                    if (!this.menuIsOpen) {
                        this.openInterface(itemOnGround.itemHash, itemOnGround.amount, { x: textXPos, y: textYPos });
                    }
                    else {
                        this.updatePosition({ x: textXPos, y: textYPos });
                    }
                }
                else {
                    if (this.menuIsOpen) {
                        this.closeInterface();
                    }
                    this.targetItemId = null;
                }
            }
            else {
                if (this.menuIsOpen) {
                    this.closeInterface();
                }
                this.targetItemId = null;
            }
        }, 'PickUpItems'));
    }
    static addItemsOnGround(itemsOnGround) {
        this.itemsOnGround = itemsOnGround;
    }
    static deleteItemOnGround(itemId) {
        if (!this.itemsOnGround.find(v => v.itemId === itemId)) {
            return;
        }
        this.itemsOnGround.splice(this.itemsOnGround.findIndex(v => v.itemId === itemId), 1);
    }
    static addItemOnGround(itemOnGround) {
        this.itemsOnGround.push(itemOnGround);
    }
    static playerTryPickupItem() {
        if (!this.targetItemId) {
            return;
        }
        (0, Utils_1.sendEventToServer)(events_1.PickupItemEvents.PickItem, this.targetItemId);
    }
    static openInterface(itemHash, amount, position) {
        (0, skyrimPlatform_1.printConsole)(`Open Interface: ${position.x} ${position.y}`);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunctions.SetItemHash}`, itemHash);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunctions.SetItemAmount}`, amount);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunctions.SetPosition}`, position);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunctions.Show}`, null);
        this.menuIsOpen = true;
    }
    static updatePosition(position) {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunctions.SetPosition}`, position);
    }
    static closeInterface() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunctions.Hide}`, null);
        this.menuIsOpen = false;
    }
}
exports.PickupItem = PickupItem;
PickupItem.itemsOnGround = [];
PickupItem.InterfaceName = InterfacesName_1.BrowserInterfacesName.PickupItem;
PickupItem.InterfaceFunctions = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.PickupItem];
PickupItem.menuIsOpen = false;
PickupItem.targetItemId = null;


/***/ }),

/***/ 9210:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Restrictions = void 0;
class Restrictions {
    static setRestriction(_restrictions) {
        this._restrictions = _restrictions;
    }
    static isBlocked(restrictions) {
        return !!this._restrictions[restrictions];
    }
}
exports.Restrictions = Restrictions;


/***/ }),

/***/ 3687:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StaminaHudState = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const Player_1 = __webpack_require__(5456);
const PersonModules_1 = __webpack_require__(8877);
const Utils_1 = __webpack_require__(2453);
const PersonStamina_1 = __webpack_require__(3072);
const GameRestrictions_1 = __webpack_require__(3352);
const spApiInteraction_1 = __webpack_require__(3331);
const launcherService_1 = __webpack_require__(2041);
const browserService_1 = __webpack_require__(5472);
const COOLDOWN_TIME_FOR_JUMP = 1.5 * 1000;
const needCheck = "true" === 'true';
class StaminaHudState {
    static initHook() {
        skyrimPlatform_1.hooks.sendAnimationEvent.add({
            enter: ctx => {
                if (ctx.animEventName === 'JumpStandingStart' || ctx.animEventName === 'JumpDirectionalStart') {
                    if (Date.now() - this.lastJumpCheckTime < COOLDOWN_TIME_FOR_JUMP || !this.canJump || !GameRestrictions_1.GameRestrictions.canJump) {
                        ctx.animEventName = '';
                        return;
                    }
                }
            },
            leave: ctx => { },
        }, 0x14, 0x14);
    }
    static setStamin(value) {
        (0, skyrimPlatform_1.once)('update', () => {
            Player_1.localPlayer.actor.setActorValue('stamina', value);
            const playerStamina = Player_1.localPlayer.actor.getActorValue('stamina');
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetUserStamina}`, {
                maxStamina: PersonModules_1.MAXIMUM_PLAYER_STAMIN,
                currentStamina: playerStamina,
            });
        });
    }
    static update() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.simpleCheckSpeedHack();
            this.isJumping = !!Player_1.localPlayer.actor.getAnimationVariableBool('bInJumpState');
            this.isSprinting = !!Player_1.localPlayer.actor.isSprinting();
            this.checkRemoveStamin();
            Player_1.localPlayer.actor.setAnimationVariableBool('bSprintOK', Player_1.localPlayer.actor.getActorValue('stamina') >= PersonModules_1.REQUIRED_STAMINA_FOR_SPRINT_PER_SECOND);
            if (Player_1.localPlayer.actor.getActorValue('stamina') < PersonModules_1.REQUIRED_STAMINA_FOR_JUMP) {
                this.canJump = false;
            }
            else {
                this.canJump = true;
            }
        }, 'StaminaHudState'));
    }
    static reduceStamina(value) {
        (0, Utils_1.sendEventToServer)(PersonStamina_1.PersonStaminaEvent.ReduceStamina, value);
    }
    static checkRemoveStamin() {
        const currentTime = Date.now();
        if (this.isAttack) {
            this.reduceStamina(PersonModules_1.REQUIRED_STAMIN_FOR_ATTACK);
        }
        if (this.lastIsJumping !== this.isJumping && this.isJumping) {
            this.lastIsJumping = this.isJumping;
            this.lastJumpCheckTime = currentTime;
            this.reduceStamina(PersonModules_1.REQUIRED_STAMINA_FOR_JUMP);
        }
        else {
            this.lastIsJumping = this.isJumping;
        }
        if (this.isSprinting && currentTime - this.lastSprintCheckTime >= 1000) {
            this.lastSprintCheckTime = currentTime;
            this.reduceStamina(PersonModules_1.REQUIRED_STAMINA_FOR_SPRINT_PER_SECOND);
        }
    }
    static simpleCheckSpeedHack() {
        const speedMult = Player_1.localPlayer.actor.getActorValue('speedmult');
        if (speedMult > PersonModules_1.DEFAULT_SPEED_MULT && needCheck) {
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(launcherService_1.LauncherService).quitFromGame('Speed hack');
        }
    }
}
exports.StaminaHudState = StaminaHudState;
StaminaHudState.isAttack = false;
StaminaHudState.lastIsJumping = false;
StaminaHudState.isJumping = false;
StaminaHudState.canJump = true;
StaminaHudState.lastJumpCheckTime = Date.now();
StaminaHudState.lastSprintCheckTime = Date.now();


/***/ }),

/***/ 4763:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StartLoadingScreen = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Utils_1 = __webpack_require__(2453);
const spApiInteraction_1 = __webpack_require__(3331);
const browserService_1 = __webpack_require__(5472);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const timersService_1 = __webpack_require__(8031);
class StartLoadingScreen {
    static init() {
        this.isLoaded = false;
        (0, skyrimPlatform_1.on)('loadGame', () => {
            if (StartLoadingScreen.isLoaded) {
                return;
            }
            StartLoadingScreen.start(20);
        });
    }
    static start(duration) {
        skyrimPlatform_1.Game.fadeOutGame(true, true, 1, duration);
        (0, Utils_1.freezePlayer)(true);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Disclaimer}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Disclaimer].Show}`, null, false);
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(timersService_1.TimersService).setTimeout(() => {
            StartLoadingScreen.stop();
        }, duration * 1000);
    }
    static stop() {
        StartLoadingScreen.isLoaded = true;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Disclaimer}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Disclaimer].Hide}`, null, true);
    }
}
exports.StartLoadingScreen = StartLoadingScreen;


/***/ }),

/***/ 1299:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VoiceChat = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const binder_1 = __webpack_require__(1220);
const Binder_1 = __webpack_require__(9132);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const Utils_1 = __webpack_require__(2453);
const serverEvents_1 = __webpack_require__(593);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const PersonRestrictions_1 = __webpack_require__(9713);
const Restrictions_1 = __webpack_require__(9210);
class VoiceChat {
    static initVoice() {
        return __awaiter(this, void 0, void 0, function* () {
            this.voiceClientIsActive = true;
            this.isVoiceActive = false;
            Binder_1.Binder.bind(binder_1.BinderHash.Voice, () => this.setVoiceActive(true));
            Binder_1.Binder.bindRelease(binder_1.BinderHash.Voice, () => this.setVoiceActive(false));
            this.autoUpdate();
        });
    }
    static connect(playerId) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, skyrimPlatform_1.voiceAssignPlayerId)(playerId);
        });
    }
    static autoUpdate() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            (0, skyrimPlatform_1.voiceAutoUpdate)();
        }, 'VoiceChat'));
    }
    static setRecordDevice(id) {
    }
    static startReverbEffect() {
    }
    static getRecordDevices() {
        return this.recordDevices;
    }
    static updateActorPosition(playerId, position) {
        if (playerId == null) {
            return;
        }
        (0, skyrimPlatform_1.voiceUpdateActorPosition)(playerId, position.x, position.y, position.z);
    }
    static setVoiceActive(toggle) {
        if (Restrictions_1.Restrictions.isBlocked(PersonRestrictions_1.PersonRestrictionsType.MuteVoice)) {
            return;
        }
        this.isVoiceActive = toggle;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetMicStatus}`, !!this.isVoiceActive);
        (0, Utils_1.sendEventToServer)(serverEvents_1.VoiceChatEvents.ToggleVoice, this.isVoiceActive);
        if (this.isVoiceActive) {
            (0, skyrimPlatform_1.voiceStartRecord)();
        }
        else {
            (0, skyrimPlatform_1.voiceEndRecord)();
        }
    }
}
exports.VoiceChat = VoiceChat;
VoiceChat.recordDevices = [];
VoiceChat.voiceClientIsActive = false;
VoiceChat.isVoiceActive = false;


/***/ }),

/***/ 7683:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WeaponShop = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const events_1 = __webpack_require__(911);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Player_1 = __webpack_require__(5456);
const Utils_1 = __webpack_require__(2453);
const Items_1 = __webpack_require__(7187);
const itemType_1 = __webpack_require__(4405);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
class WeaponShop {
    static init() {
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.ArmorStoreEvents.Close).addHandler(this.closeInterface.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.ArmorStoreEvents.SetActiveProduct).addHandler(this.equipProduct.bind(this));
    }
    static playerOpenedShop(weaponShopDto) {
        var _a;
        this.initCamera();
        this.unequipAll();
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetBalance}`, (_a = weaponShopDto.money) !== null && _a !== void 0 ? _a : 0);
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetStoreName}`, weaponShopDto.name);
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetProducts}`, weaponShopDto.products);
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Show}`, null, true);
    }
    static equipProduct(data) {
        (0, skyrimPlatform_1.once)('update', () => {
            this.unequipAll();
            if (!data.productId) {
                return;
            }
            const itemConfig = Items_1.default.get(data.productId);
            if (itemConfig.type !== itemType_1.ItemType.Weapon) {
                return;
            }
            const weaponItem = skyrimPlatform_1.Weapon.from(skyrimPlatform_1.Game.getFormEx(parseInt(itemConfig.itemId, 16)));
            if (!weaponItem) {
                return;
            }
            Player_1.localPlayer.actor.equipItem(weaponItem, false, false);
        });
    }
    static closeInterface() {
        this.destroyCamera();
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Hide}`, null, false);
        (0, Utils_1.sendEventToServer)(events_1.ArmorStoreEvents.Close);
    }
    static initCamera() {
        (0, skyrimPlatform_1.once)('update', () => {
            skyrimPlatform_1.Game.showRaceMenu();
            (0, Utils_1.freezePlayer)(true);
        });
    }
    static destroyCamera() {
        (0, skyrimPlatform_1.once)('update', () => {
            skyrimPlatform_1.Ui.invokeString('HUD Menu', '_global.skse.CloseMenu', "RaceSex Menu");
            (0, Utils_1.freezePlayer)(false);
            skyrimPlatform_1.Game.forceFirstPerson();
        });
    }
    static unequipAll() {
        (0, skyrimPlatform_1.once)('update', () => {
            Player_1.localPlayer.actor.unequipAll();
        });
    }
}
exports.WeaponShop = WeaponShop;
WeaponShop.InterfaceName = InterfacesName_1.BrowserInterfacesName.ArmorStore;
WeaponShop.InterfaceFunction = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.ArmorStore];


/***/ }),

/***/ 7442:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationsMenu = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Hud_1 = __webpack_require__(9720);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Player_1 = __webpack_require__(5456);
const events_1 = __webpack_require__(9321);
const Binder_1 = __webpack_require__(9132);
const binder_1 = __webpack_require__(1220);
const Utils_1 = __webpack_require__(2453);
const events_2 = __webpack_require__(8797);
const StaminaHudState_1 = __webpack_require__(3687);
const animationsConfig_1 = __webpack_require__(476);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const AnimationsHandler_1 = __webpack_require__(3947);
const MAX_FAVORITES_SLOTS = 6;
const animationsStartFightingStance = 'WeapEquip';
const animationsStopFightingStance = 'Unequip';
class AnimationsMenu {
    static init() {
        Binder_1.Binder.bindRelease(binder_1.BinderHash.AnimationMenu, this.openAnimationMenu.bind(this));
        Binder_1.Binder.bindRelease(binder_1.BinderHash.AnimationRadial, this.openRadialMenu.bind(this));
        Binder_1.Binder.bind(binder_1.BinderHash.StopAnimation, this.stopAnimation.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.AnimationsMenuEvents.Set).addHandler(this.selectAnimationSave.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.AnimationsMenuEvents.Exit).addHandler(this.closeAnimationMenu.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.AnimationsMenuEvents.Play).addHandler((data) => {
            const animationHash = animationsConfig_1.ANIMATIONS_CONFIG[data.animationId];
            this.playAnimationFromRadial({ animationId: animationHash });
        });
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_2.RadialMenuEvents.Select).addHandler(this.selectAnimation.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_2.RadialMenuEvents.Close).addHandler(this.closeRadialMenu.bind(this));
        this.initHook();
        this.canPlayAnimationCondition();
    }
    static setFavoritesAnimation(favoritesAnimation) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.favoritesAnimation = favoritesAnimation;
            const favoritesAnimationsDTO = [];
            for (let index = 0; index < MAX_FAVORITES_SLOTS; index++) {
                if (this.favoritesAnimation[index] != null) {
                    favoritesAnimationsDTO[index] = {
                        id: this.favoritesAnimation[index].id,
                        isEmpty: false,
                        categoryId: 0,
                        title: (_a = this.favoritesAnimation[index]) === null || _a === void 0 ? void 0 : _a.name,
                    };
                }
                else if (this.favoritesAnimation[index] == null) {
                    favoritesAnimationsDTO[index] = {
                        id: index,
                        isEmpty: true,
                    };
                }
            }
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('animations/setRadial', favoritesAnimationsDTO);
        });
    }
    static openAnimationMenu() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.menuIsOpen) {
                return;
            }
            if (skyrimPlatform_1.browser.isFocused()) {
                return;
            }
            this.menuIsOpen = true;
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('animations/show', null, true);
        });
    }
    static closeAnimationMenu() {
        return __awaiter(this, void 0, void 0, function* () {
            this.menuIsOpen = false;
            Hud_1.Hud.setChatIsShow(true);
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('animations/hide', null, false);
        });
    }
    static openRadialMenu() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.favoritesAnimation.filter(v => v != null).length <= 0) {
                return;
            }
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.RadialMenu}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.RadialMenu].Show}`, {
                pieces: this.favoritesAnimation.filter(v => v != null),
                category: 'Анимации',
            }, true);
            this.isRadialOpen = true;
        });
    }
    static closeRadialMenu() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.RadialMenu}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.RadialMenu].Hide}`, null, false);
        this.isRadialOpen = false;
    }
    static stopAnimation() {
        if (!this.canPlayAnimation) {
            return;
        }
        if (!this.canStopAnimation) {
            return;
        }
        AnimationsHandler_1.AnimationsHandler.stop();
        this.canStopAnimation = false;
    }
    static playAnimationFromRadial(data) {
        if (!this.canPlayAnimation) {
            return;
        }
        AnimationsHandler_1.AnimationsHandler.play(data.animationId);
        this.canStopAnimation = true;
    }
    static playAnimation(animationId) {
        if (!this.canPlayAnimation) {
            return;
        }
        AnimationsHandler_1.AnimationsHandler.play(animationId);
    }
    static selectAnimationSave(data) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, Utils_1.sendEventToServer)(events_1.AnimationsMenuEvents.Set, {
                slot: data.pieceId,
                animationId: data.animationId,
            });
        });
    }
    static play(data) {
        if (!this.isRadialOpen) {
            return;
        }
        this.closeRadialMenu();
        (0, Utils_1.sendEventToServer)(events_1.AnimationsMenuEvents.PlayFromRadial, data.pieceId);
    }
    static selectAnimation(data) {
        if (!this.isRadialOpen) {
            return;
        }
        this.closeRadialMenu();
        (0, Utils_1.sendEventToServer)(events_1.AnimationsMenuEvents.PlayFromRadial, data.pieceId);
    }
    static canPlayAnimationCondition() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.canPlayAnimation =
                !StaminaHudState_1.StaminaHudState.isJumping &&
                    !Player_1.localPlayer.actor.isRunning() &&
                    !Player_1.localPlayer.actor.isSprinting() &&
                    !Player_1.localPlayer.actor.isSneaking() &&
                    !Player_1.localPlayer.actor.isSwimming() &&
                    !this.inBattleStage;
        }, 'AnimationsMenu'));
    }
    static initHook() {
        skyrimPlatform_1.hooks.sendAnimationEvent.add({
            enter: ctx => {
                var _a;
                if (ctx.animEventName === undefined) {
                    return;
                }
                if (((_a = ctx.animEventName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === (animationsStartFightingStance === null || animationsStartFightingStance === void 0 ? void 0 : animationsStartFightingStance.toLowerCase())) {
                    this.inBattleStage = true;
                }
            },
            leave: ctx => {
                var _a;
                if (ctx.animEventName === undefined) {
                    return;
                }
                if (((_a = ctx.animEventName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === (animationsStopFightingStance === null || animationsStopFightingStance === void 0 ? void 0 : animationsStopFightingStance.toLowerCase())) {
                    this.inBattleStage = false;
                }
            },
        }, 0x14, 0x14);
    }
}
exports.AnimationsMenu = AnimationsMenu;
AnimationsMenu.menuIsOpen = false;
AnimationsMenu.isRadialOpen = false;
AnimationsMenu.canPlayAnimation = true;
AnimationsMenu.canStopAnimation = false;
AnimationsMenu.inBattleStage = false;
AnimationsMenu.favoritesAnimation = [];


/***/ }),

/***/ 9132:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Binder = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const settings_1 = __webpack_require__(5427);
const events_1 = __webpack_require__(265);
const Utils_1 = __webpack_require__(2453);
class Binder {
    static init() {
        (0, skyrimPlatform_1.on)('buttonEvent', (e) => {
            if (e.isPressed) {
                this.pressedKeys.set(e.code, { key: e.code, device: e.device });
            }
            else {
                this.pressedKeys.delete(e.code);
            }
            this.onButtonEvent(e.code, e.device, e.isDown, false);
        });
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.pressedKeys.forEach(value => {
                if (!skyrimPlatform_1.Input.isKeyPressed(value.key)) {
                    skyrimPlatform_1.Input.releaseKey(value.key);
                    this.pressedKeys.delete(value.key);
                    this.onButtonEvent(value.key, value.device, false, true);
                }
            });
        }, 'Binder'));
    }
    static onButtonEvent(key, device, isDown, isUp) {
        var _a;
        if (this.isDisable) {
            return;
        }
        const binderHash = Object.keys(settings_1.Settings.settings).find(settingId => {
            var _a;
            const bindingKeys = settings_1.Settings.settings[settingId];
            if (bindingKeys == null || !((_a = bindingKeys.codes) === null || _a === void 0 ? void 0 : _a.length)) {
                return false;
            }
            if (device !== bindingKeys.deviceType) {
                return false;
            }
            return bindingKeys.codes.includes(key);
        });
        const bindingKeys = settings_1.Settings.getValue(binderHash);
        if (bindingKeys == null || !((_a = bindingKeys.codes) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        if (isDown) {
            this.runHandlers(this._bindHandlers.get(binderHash));
            if (this._serverBinds.includes(binderHash)) {
                this.sendServerBind(binderHash);
            }
        }
        if (isUp) {
            this.runHandlers(this._bindReleaseHandlers.get(binderHash));
        }
    }
    static bind(bindHash, handler) {
        var _a;
        const handlers = (_a = this._bindHandlers.get(bindHash)) !== null && _a !== void 0 ? _a : [];
        handlers.push(handler);
        this._bindHandlers.set(bindHash, handlers);
    }
    static bindRelease(bindHash, handler) {
        var _a;
        const handlers = (_a = this._bindReleaseHandlers.get(bindHash)) !== null && _a !== void 0 ? _a : [];
        handlers.push(handler);
        this._bindReleaseHandlers.set(bindHash, handlers);
    }
    static toggleBind(bindHash, enabled) {
        settings_1.Settings.toggleSetting(bindHash, enabled);
    }
    static setServerBind(bindHashes) {
        this._serverBinds = bindHashes;
    }
    static sendServerBind(binderHash) {
        (0, Utils_1.sendEventToServer)(events_1.BinderEvents.PlayerActivateBind, binderHash);
    }
    static runHandlers(handlers) {
        if (!handlers) {
            return;
        }
        for (const handler of handlers) {
            handler();
        }
    }
}
exports.Binder = Binder;
Binder.isDisable = false;
Binder._bindHandlers = new Map();
Binder._bindReleaseHandlers = new Map();
Binder._serverBinds = [];
Binder.pressedKeys = new Map();


/***/ }),

/***/ 6955:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.updateServerBinds = void 0;
const Binder_1 = __webpack_require__(9132);
function updateServerBinds(bindHashes) {
    Binder_1.Binder.setServerBind(bindHashes);
}
exports.updateServerBinds = updateServerBinds;


/***/ }),

/***/ 6612:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserEvent = void 0;
class BrowserEvent {
    constructor(eventName) {
        this._eventName = eventName;
        this.handlers = [];
    }
    get eventName() {
        return this._eventName;
    }
    addHandler(handler) {
        if (this.handlers.find((item) => item === handler)) {
            return;
        }
        this.handlers.push(handler);
    }
    removeHandler(handler) {
        const index = this.handlers.indexOf(handler);
        if (index === -1) {
            return;
        }
        this.handlers.slice(index, 1);
    }
    executeHandlers(data, eventName) {
        this.handlers.forEach((handler) => {
            handler(data, eventName);
        });
    }
}
exports.BrowserEvent = BrowserEvent;


/***/ }),

/***/ 3551:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserEventsHandler = void 0;
const BrowserEvent_1 = __webpack_require__(6612);
const events = new Map();
class BrowserEventsHandler {
    static unregisterEvent(eventName) {
        if (events.has(eventName)) {
            events.delete(eventName);
        }
    }
    static get(eventName) {
        if (!events.has(eventName)) {
            const event = new BrowserEvent_1.BrowserEvent(eventName);
            events.set(eventName, event);
        }
        return events.get(eventName);
    }
}
exports.BrowserEventsHandler = BrowserEventsHandler;


/***/ }),

/***/ 43:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserEventsServer = void 0;
const events_1 = __webpack_require__(1470);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const events_2 = __webpack_require__(9740);
const events_3 = __webpack_require__(450);
const events_4 = __webpack_require__(2334);
const events_5 = __webpack_require__(5809);
const events_6 = __webpack_require__(8939);
const events_7 = __webpack_require__(8007);
const events_8 = __webpack_require__(7914);
const events_9 = __webpack_require__(7555);
const Utils_1 = __webpack_require__(2453);
const events_10 = __webpack_require__(8797);
const events_11 = __webpack_require__(3602);
const events_12 = __webpack_require__(176);
const events_13 = __webpack_require__(5719);
const events_14 = __webpack_require__(5685);
const events_15 = __webpack_require__(9988);
const events_16 = __webpack_require__(1729);
const events_17 = __webpack_require__(9529);
const events_18 = __webpack_require__(7212);
const events_19 = __webpack_require__(4457);
const events_20 = __webpack_require__(351);
const events_21 = __webpack_require__(911);
const events_22 = __webpack_require__(7649);
const workContract_1 = __webpack_require__(2228);
const events_23 = __webpack_require__(1086);
const events_24 = __webpack_require__(1930);
const events_25 = __webpack_require__(6334);
const skyrimPlatform_1 = __webpack_require__(2112);
const events_26 = __webpack_require__(1855);
const events_27 = __webpack_require__(558);
const events_28 = __webpack_require__(5263);
const events_29 = __webpack_require__(3405);
const events_30 = __webpack_require__(3858);
class BrowserEventsServer {
    static initEvents() {
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.BlacksmithEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.BlacksmithEvents.ChooseRecipe).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.AlchemyTableEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.AlchemyTableEvents.ChooseRecipe).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.EnchantTableEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.EnchantTableEvents.ChooseRecipe).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.TanningEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.TanningEvents.ChooseRecipe).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.WorkbenchEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.WorkbenchEvents.ChooseRecipe).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CookingEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CookingEvents.ChooseRecipe).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_22.CraftStatusEvents.Cancel).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_22.CraftStatusEvents.Confirm).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_22.CraftStatusEvents.Finish).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_2.NpcDialogEvents.ClickButton).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_3.NpcShopEvents.Buy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_3.NpcShopEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.FishingGameEvents.Win).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.FishingGameEvents.Fail).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_5.SellResourceEvents.Cancel).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_5.SellResourceEvents.Sell).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.ChooseWorkTypeEvents.Start).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.ChooseWorkTypeEvents.Dismiss).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.ChooseWorkTypeEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.SawmillGameEvents.Win).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.SawmillGameEvents.Loose).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.HoneyFactoryEvents.Win).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.HoneyFactoryEvents.Loose).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.HoneyFactoryEvents.Exit).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_6.EscMenuEvents.RequestMap).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_6.EscMenuEvents.RequestExit).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.EquipItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.ItemAction).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.MoveItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.TakeOffEquipItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.FastTakeOffEquipItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.SetShowHelmet).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.StackItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.DropItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.HalfSplitItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.InventoryEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.TradeEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.TradeEvents.Accept).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_7.TradeEvents.Cancel).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_21.ArmorStoreEvents.BuyProduct).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.AdClick).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.AddNews).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.ContractFinish).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.ContractStart).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.RankAdd).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.RankRemove).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.RemoveNews).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.RankUpdate).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.SetWarehouseIsOpen).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.StaffAction).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_8.FractionEvents.StartCapt).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_9.ModalEvents.ClickButton).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_9.ModalEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_10.RadialMenuEvents.Back).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_11.CharacterMenuEvents.BuyVip).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.Buy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.BuyInterior).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.BuyUpgrade).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.Enter).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.Exit).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.KickMember).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.Pay).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.Sell).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_12.HouseSystemEvents.ToggleOpen).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_13.WeddingRequestEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_13.WeddingRequestEvents.Request).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_14.WeddingResponseEvents.Accept).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_14.WeddingResponseEvents.Deny).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_15.DeathScreenEvents.Die).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_15.DeathScreenEvents.Wait).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_16.TradingStoreEvents.Buy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_16.TradingStoreEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_17.ProductBusinessesEvents.ChangePriceMarkup).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_17.ProductBusinessesEvents.LoadMaterials).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_17.ProductBusinessesEvents.PayTax).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_17.ProductBusinessesEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_18.AdBoardEvents.AddAd).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_18.AdBoardEvents.Exit).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.Replenish).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.Withdraw).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.PayRentHouse).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.PayRentBusiness).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.WithdrawFaction).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.BusinessReplenish).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_19.BankEvents.BusinessWithdraw).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_20.TradingTavernEvents.Buy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_20.TradingTavernEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(workContract_1.ContractEvents.Accept).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(workContract_1.ContractEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.MineGameEvents.Win).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_4.MineGameEvents.Loose).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_23.SmelterEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_23.SmelterEvents.Cancel).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_23.SmelterEvents.Move).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_23.SmelterEvents.Start).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_6.EscMenuEvents.CreateTicket).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_6.EscMenuEvents.AddTicketMessage).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_6.EscMenuEvents.SetCurrentTicket).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.ChangeSetting).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.RemovePunishment).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.SendTicketMessage).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.ClickTicketSecondaryButton).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.AddFastAnswer).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.DeleteFastAnswer).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.TakeTicket).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.OpenTicket).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.GetStatByDate).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.GetAdminStatByDate).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.SetIsReadForReport).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_25.AdminPanelHudEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_25.AdminPanelHudEvents.ChangeElementPosition).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_25.AdminPanelHudEvents.ConfirmAction).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_25.AdminPanelHudEvents.OffEditMode).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_25.AdminPanelHudEvents.SaveEditMode).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_24.AdminPanelEvents.OpenSection).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_26.AuctionEvents.CloseRequest).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_26.AuctionEvents.CreateBet).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_26.AuctionEvents.CreateLot).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_26.AuctionEvents.PointRequest).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.Opened).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.RequestGiftPlayer).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.ProductBuy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.ProductGift).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.CaseBuy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.CaseGift).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.Replenish).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.ReplenishGift).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.Exchange).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.ExchangeGift).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.VipBuy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.ServiceBuy).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.SellWarehouseItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.GiftWarehouseItem).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_27.DonateStoreEvents.ClickWarehouseButton).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_28.CasesEvents.TakeDrop).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_28.CasesEvents.SellDrop).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_28.CasesEvents.RequestOpen).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_28.CasesEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_29.SkinsEvents.Close).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_29.SkinsEvents.EquipSet).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_29.SkinsEvents.PutOn).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_29.SkinsEvents.TakeOff).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_30.PromoMenuEvents.ActivatePromo).addHandler(this.sendEventToServer.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get('logger').addHandler((data) => {
            (0, skyrimPlatform_1.printFile)(data);
        });
    }
    static sendEventToServer(data, eventName) {
        (0, Utils_1.sendEventToServer)(eventName, data);
    }
}
exports.BrowserEventsServer = BrowserEventsServer;


/***/ }),

/***/ 9878:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BodyAdapter = void 0;
class BodyAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getBodyData() {
        const { skinColor, weight } = this.defaultCharacter;
        const bodyData = {
            skinColor,
            weight
        };
        return bodyData;
    }
}
exports.BodyAdapter = BodyAdapter;


/***/ }),

/***/ 8687:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClothesAdapter = void 0;
class ClothesAdapter {
    constructor(defaultClothes) {
        this.defaultClothes = defaultClothes;
    }
    getClothesData() {
        const { clothesTop, clothesShoes } = this.defaultClothes;
        const clothesData = {
            clothesTop,
            clothesShoes
        };
        return clothesData;
    }
}
exports.ClothesAdapter = ClothesAdapter;


/***/ }),

/***/ 3950:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EyebrowsAdapter = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const HeadParts_1 = __webpack_require__(1873);
class EyebrowsAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getEyebrowsData() {
        var _a;
        const faceMorph = this.defaultCharacter.options;
        const eyebrowsType = (_a = this.defaultCharacter.headpartIds.find((item) => { var _a; return ((_a = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(item))) === null || _a === void 0 ? void 0 : _a.getType()) === HeadParts_1.HeadParts.Eyebrows; })) !== null && _a !== void 0 ? _a : 0;
        const eyebrowsData = {
            eyebrowsType,
            eyebrowsHeigth: faceMorph[9],
            eyebrowsWeight: faceMorph[10],
            eyebrowsForward: faceMorph[11]
        };
        return eyebrowsData;
    }
}
exports.EyebrowsAdapter = EyebrowsAdapter;


/***/ }),

/***/ 5538:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EyesAdapter = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const HeadParts_1 = __webpack_require__(1873);
class EyesAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getEyesData() {
        var _a;
        const eyesPreset = this.defaultCharacter.presets;
        const eyesMorph = this.defaultCharacter.options;
        const eyesColor = (_a = this.defaultCharacter.headpartIds.find((item) => { var _a; return ((_a = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(item))) === null || _a === void 0 ? void 0 : _a.getType()) === HeadParts_1.HeadParts.EyesColor; })) !== null && _a !== void 0 ? _a : 0;
        const eyesLinerColor = this.defaultCharacter.tints.find((item) => item.type === 3).argb;
        const eyesLowerShadows = this.defaultCharacter.tints.find((item) => item.type === 5).argb;
        const eyesUpperShadows = this.defaultCharacter.tints.find((item) => item.type === 4).argb;
        const eyesData = {
            eyesForm: eyesPreset[2],
            eyesColor,
            eyesDepth: eyesMorph[17],
            eyesDistance: eyesMorph[8],
            eyesHeigth: eyesMorph[7],
            eyesLinerColor,
            eyesLowerShadows,
            eyesUpperShadows
        };
        return eyesData;
    }
}
exports.EyesAdapter = EyesAdapter;


/***/ }),

/***/ 2980:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FaceAdapter = void 0;
class FaceAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getFaceData() {
        const facePreset = this.defaultCharacter.presets;
        const faceMorph = this.defaultCharacter.options;
        const cheeksTint = this.defaultCharacter.tints.find((item) => item.type === 2).argb;
        const cheeksTintLower = this.defaultCharacter.tints.find((item) => item.type === 9).argb;
        const frownLines = this.defaultCharacter.tints.find((item) => item.type === 8).argb;
        const noseTint = this.defaultCharacter.tints.find((item) => item.type === 10).argb;
        const chinTint = this.defaultCharacter.tints.find((item) => item.type === 11).argb;
        const neckTint = this.defaultCharacter.tints.find((item) => item.type === 12).argb;
        const foreHeadTint = this.defaultCharacter.tints.find((item) => item.type === 13).argb;
        const faceData = {
            noseType: facePreset[0],
            noseHeight: faceMorph[0],
            noseLength: faceMorph[1],
            jawWidth: faceMorph[2],
            jawHeight: faceMorph[3],
            cheekboneHeight: faceMorph[4],
            cheekbondeWidth: faceMorph[5],
            cheeksTint,
            cheeksTintLower,
            chinTint,
            foreHeadTint,
            frownLines,
            neckTint,
            noseTint
        };
        return faceData;
    }
}
exports.FaceAdapter = FaceAdapter;


/***/ }),

/***/ 9338:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HairAdapter = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const HeadParts_1 = __webpack_require__(1873);
class HairAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getHairData() {
        var _a, _b;
        const hairs = (_a = this.defaultCharacter.headpartIds.find((item) => { var _a; return ((_a = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(item))) === null || _a === void 0 ? void 0 : _a.getType()) === HeadParts_1.HeadParts.Hair; })) !== null && _a !== void 0 ? _a : 0;
        const facialHair = (_b = this.defaultCharacter.headpartIds.find((item) => { var _a; return ((_a = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(item))) === null || _a === void 0 ? void 0 : _a.getType()) === HeadParts_1.HeadParts.FacialHair; })) !== null && _b !== void 0 ? _b : 0;
        const hairData = {
            hairs,
            facialHair,
            hairColor: this.defaultCharacter.hairColor
        };
        return hairData;
    }
}
exports.HairAdapter = HairAdapter;


/***/ }),

/***/ 4579:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HeadAdapter = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const HeadParts_1 = __webpack_require__(1873);
class HeadAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getHeadData() {
        var _a;
        const dirtTint = this.defaultCharacter.tints.filter((item) => item.type === 14);
        const faceScar = (_a = this.defaultCharacter.headpartIds.find((item) => { var _a; return ((_a = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(item))) === null || _a === void 0 ? void 0 : _a.getType()) === HeadParts_1.HeadParts.Scar; })) !== null && _a !== void 0 ? _a : 0;
        const headData = {
            dirtTint,
            faceScar
        };
        return headData;
    }
}
exports.HeadAdapter = HeadAdapter;


/***/ }),

/***/ 5563:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MouthAdapter = void 0;
class MouthAdapter {
    constructor(defaultCharacter) {
        this.defaultCharacter = defaultCharacter;
    }
    getMouthData() {
        const faceMorph = this.defaultCharacter.options;
        const facePreset = this.defaultCharacter.presets;
        const lipsColor = this.defaultCharacter.tints.find((item) => item.type === 1).argb;
        const mouthData = {
            lipsType: facePreset[3],
            lipsHeigth: faceMorph[12],
            lipsForward: faceMorph[13],
            chinWeigth: faceMorph[14],
            chinLength: faceMorph[15],
            chinForward: faceMorph[16],
            lipsColor
        };
        return mouthData;
    }
}
exports.MouthAdapter = MouthAdapter;


/***/ }),

/***/ 1873:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HeadParts = void 0;
var HeadParts;
(function (HeadParts) {
    HeadParts[HeadParts["Scar"] = 5] = "Scar";
    HeadParts[HeadParts["EyesColor"] = 2] = "EyesColor";
    HeadParts[HeadParts["Eyebrows"] = 6] = "Eyebrows";
    HeadParts[HeadParts["Hair"] = 3] = "Hair";
    HeadParts[HeadParts["FacialHair"] = 4] = "FacialHair";
})(HeadParts = exports.HeadParts || (exports.HeadParts = {}));


/***/ }),

/***/ 4239:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parts = void 0;
var Parts;
(function (Parts) {
    Parts["Body"] = "Body";
    Parts["Head"] = "Head";
    Parts["Face"] = "Face";
    Parts["Hair"] = "Hair";
    Parts["Eyes"] = "Eyes";
    Parts["Eyebrows"] = "Eyebrows";
    Parts["Mouth"] = "Mouth";
    Parts["Preset"] = "Preset";
    Parts["Clothes"] = "Clothes";
})(Parts = exports.Parts || (exports.Parts = {}));


/***/ }),

/***/ 5619:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharacterEditorHandler = void 0;
const CharacterEditorService_1 = __webpack_require__(5637);
let characterEditorService = null;
class CharacterEditorHandler {
    static create() {
        if (characterEditorService !== null) {
            characterEditorService.destroy();
            characterEditorService = null;
        }
        characterEditorService = new CharacterEditorService_1.CharacterEditorService();
        return characterEditorService;
    }
    static get() {
        return characterEditorService !== null ? characterEditorService : null;
    }
    static delete() {
        if (characterEditorService) {
            characterEditorService.destroy();
            characterEditorService = null;
        }
    }
}
exports.CharacterEditorHandler = CharacterEditorHandler;


/***/ }),

/***/ 5637:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharacterEditorService = exports.CharacterLocation = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Gender_1 = __webpack_require__(3730);
const Race_1 = __webpack_require__(3127);
const defaultConfig_1 = __webpack_require__(978);
const appearanceSync_1 = __webpack_require__(282);
const Preset_1 = __webpack_require__(1313);
const Head_1 = __webpack_require__(3422);
const Body_1 = __webpack_require__(8551);
const Face_1 = __webpack_require__(5485);
const HeadAdapter_1 = __webpack_require__(4579);
const FaceAdapter_1 = __webpack_require__(2980);
const BodyAdapter_1 = __webpack_require__(9878);
const sp = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
const Eyes_1 = __webpack_require__(368);
const EyesAdapter_1 = __webpack_require__(5538);
const Eyebrows_1 = __webpack_require__(4060);
const EyebrowsAdapter_1 = __webpack_require__(3950);
const Mouth_1 = __webpack_require__(8467);
const MouthAdapter_1 = __webpack_require__(5563);
const Hair_1 = __webpack_require__(109);
const HairAdapter_1 = __webpack_require__(9338);
const Parts_1 = __webpack_require__(4239);
const TintTypes_1 = __webpack_require__(512);
const utils_1 = __webpack_require__(9429);
const CharacterEditorHandler_1 = __webpack_require__(5619);
const events_1 = __webpack_require__(2416);
const Clothes_1 = __webpack_require__(5438);
const ClothesAdapter_1 = __webpack_require__(8687);
const clothesConfig_1 = __webpack_require__(5529);
const NotificationTypes_1 = __webpack_require__(4815);
const Utils_1 = __webpack_require__(2453);
const Vector3_1 = __webpack_require__(2233);
const spApiInteraction_1 = __webpack_require__(3331);
const ragdollService_1 = __webpack_require__(5062);
const browserService_1 = __webpack_require__(5472);
const NotificationsHandler_1 = __webpack_require__(5807);
const CameraManager_1 = __webpack_require__(4633);
const cameraConfig_1 = __webpack_require__(5005);
const tabs_1 = __webpack_require__(8349);
exports.CharacterLocation = {
    position: new Vector3_1.Vector3(332.3467, 812.222, -255.6504),
    rotation: new Vector3_1.Vector3(1.0864, 0.0, 90.581),
    cellOrWorld: 78790,
};
class CharacterEditorService {
    constructor() {
        this.interfaceEnabled = false;
        this.gender = Gender_1.Gender.Male;
        this.race = Race_1.Race.Nords;
        this.defaultCharacters = defaultConfig_1.defaultConfig;
        this.presetIndex = 0;
        const maleDefault = defaultConfig_1.defaultConfig.find(item => item.race === this.race && item.gender === Gender_1.Gender.Male);
        const femaleDefault = defaultConfig_1.defaultConfig.find(item => item.race === this.race && item.gender === Gender_1.Gender.Female);
        sp.once('update', () => {
            skyrimPlatform_1.TESModPlatform.setNpcRace(Player_1.localPlayer.baseActor, sp.Race.from(sp.Game.getFormEx(this.race)));
            skyrimPlatform_1.TESModPlatform.setNpcSex(Player_1.localPlayer.baseActor, this.gender);
        });
        this.preset = new Preset_1.Preset(maleDefault.customPresets[0], femaleDefault.customPresets[0]);
        this.body = new Body_1.Body(new BodyAdapter_1.BodyAdapter(maleDefault).getBodyData(), new BodyAdapter_1.BodyAdapter(femaleDefault).getBodyData());
        this.head = new Head_1.Head(new HeadAdapter_1.HeadAdapter(maleDefault).getHeadData(), new HeadAdapter_1.HeadAdapter(femaleDefault).getHeadData());
        this.face = new Face_1.Face(new FaceAdapter_1.FaceAdapter(maleDefault).getFaceData(), new FaceAdapter_1.FaceAdapter(femaleDefault).getFaceData());
        this.eyes = new Eyes_1.Eyes(new EyesAdapter_1.EyesAdapter(maleDefault).getEyesData(), new EyesAdapter_1.EyesAdapter(femaleDefault).getEyesData());
        this.eyebrows = new Eyebrows_1.Eyebrows(new EyebrowsAdapter_1.EyebrowsAdapter(maleDefault).getEyebrowsData(), new EyebrowsAdapter_1.EyebrowsAdapter(femaleDefault).getEyebrowsData());
        this.mouth = new Mouth_1.Mouth(new MouthAdapter_1.MouthAdapter(maleDefault).getMouthData(), new MouthAdapter_1.MouthAdapter(femaleDefault).getMouthData());
        this.hair = new Hair_1.Hair(new HairAdapter_1.HairAdapter(maleDefault).getHairData(), new HairAdapter_1.HairAdapter(femaleDefault).getHairData());
        this.clothes = new Clothes_1.Clothes(new ClothesAdapter_1.ClothesAdapter(clothesConfig_1.defaultClothesConfig).getClothesData(), new ClothesAdapter_1.ClothesAdapter(clothesConfig_1.defaultClothesConfig).getClothesData());
        this.cameraManager = CameraManager_1.CameraManager.create(cameraConfig_1.CreateCharacterCameraConfig, cameraConfig_1.CreateCharacterCameraConfigScenes);
    }
    init() {
        sp.once('update', () => {
            const ragdollService = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(ragdollService_1.RagdollService);
            const removeRagdollCallback = () => __awaiter(this, void 0, void 0, function* () {
                var _a;
                skyrimPlatform_1.TESModPlatform.moveRefrToPosition(Player_1.localPlayer.actor, sp.Cell.from(sp.Game.getFormEx(exports.CharacterLocation.cellOrWorld)), sp.WorldSpace.from(sp.Game.getFormEx(exports.CharacterLocation.cellOrWorld)), exports.CharacterLocation.position.x, exports.CharacterLocation.position.y, exports.CharacterLocation.position.z, exports.CharacterLocation.rotation.x, exports.CharacterLocation.rotation.y, exports.CharacterLocation.rotation.z);
                spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('createCharacter/show', null);
                this.applyAll();
                (_a = this.cameraManager) === null || _a === void 0 ? void 0 : _a.init();
                sp.Utility.wait(0.3).then(() => {
                    Player_1.localPlayer.actor.unequipAll();
                    this.interfaceEnabled = true;
                });
            });
            ragdollService.safeRemoveRagdollFromWorld(Player_1.localPlayer.actor, removeRagdollCallback);
        });
    }
    setGender(gender) {
        switch (gender) {
            case 'Male':
                this.gender = Gender_1.Gender.Male;
                break;
            case 'Female':
                this.gender = Gender_1.Gender.Female;
        }
        this.changeDefaultCharacter();
    }
    setRace(race, fromUI = true) {
        const convertedRace = (0, utils_1.stringToRace)(race);
        if (convertedRace) {
            this.race = convertedRace;
        }
        if (fromUI) {
            NotificationsHandler_1.NotificationsHandler.send('Выбор расы не дает никаких преимуществ или слабостей');
        }
        this.changeDefaultCharacter();
    }
    changeDefaultCharacter() {
        const presetByGenderAndRace = this.defaultCharacters.find(item => item.race === this.race && item.gender === this.gender);
        if (!presetByGenderAndRace) {
            (0, skyrimPlatform_1.printConsole)(`[CharacterEditor]: Can't find preset for this settings - gender: ${this.gender}, race; ${this.race}`);
            return;
        }
        this.resetToNewCharacter(presetByGenderAndRace.customPresets[0]);
    }
    resetAll() {
        this.preset.reset();
        this.body.reset();
        this.head.reset();
        this.face.reset();
        this.eyes.reset();
        this.eyebrows.reset();
        this.mouth.reset();
        this.hair.reset();
        this.setRace('Nord');
    }
    resetToNewCharacter(character) {
        sp.once('update', () => {
            skyrimPlatform_1.TESModPlatform.setNpcRace(Player_1.localPlayer.baseActor, sp.Race.from(sp.Game.getFormEx(this.race)));
            skyrimPlatform_1.TESModPlatform.setNpcSex(Player_1.localPlayer.baseActor, this.gender);
            this.preset.update(character);
            const skinToneTintColor = appearanceSync_1.AppearanceSync.getAppearance(Player_1.localPlayer.actor).tints.find(item => item.type === TintTypes_1.TintTypes.SkinTone).argb;
            this.body.update(Object.assign(Object.assign({}, new BodyAdapter_1.BodyAdapter(character).getBodyData()), { skinColor: skinToneTintColor }));
            this.head.update(new HeadAdapter_1.HeadAdapter(character).getHeadData());
            this.face.update(new FaceAdapter_1.FaceAdapter(character).getFaceData());
            this.eyes.update(new EyesAdapter_1.EyesAdapter(character).getEyesData());
            this.eyebrows.update(new EyebrowsAdapter_1.EyebrowsAdapter(character).getEyebrowsData());
            this.mouth.update(new MouthAdapter_1.MouthAdapter(character).getMouthData());
            this.hair.update(new HairAdapter_1.HairAdapter(character).getHairData());
            Player_1.localPlayer.actor.resurrect();
        });
    }
    getPresetByIdx(idx) {
        const preset = this.defaultCharacters.find(item => item.race === this.race && item.gender === this.gender);
        if (!preset || !preset.customPresets || !preset.customPresets[idx]) {
            (0, skyrimPlatform_1.printConsole)(`[CharacterEditor]: Can't find preset for this settings - gender: ${this.gender}, race; ${this.race}`);
            return;
        }
        return preset.customPresets[idx];
    }
    applyAll() {
        this.preset.apply();
        this.body.apply();
        this.head.apply();
        this.face.apply();
        this.eyes.apply();
        this.eyebrows.apply();
        this.mouth.apply();
        this.hair.apply();
        this.clothes.apply();
    }
    update(dto) {
        sp.once('update', () => {
            var _a, _b;
            switch (dto.part) {
                case Parts_1.Parts.Body:
                    this.body.update(dto.data);
                    break;
                case Parts_1.Parts.Head:
                    this.head.update(dto.data);
                    break;
                case Parts_1.Parts.Face:
                    this.face.update(dto.data);
                    break;
                case Parts_1.Parts.Eyes:
                    this.eyes.update(dto.data);
                    break;
                case Parts_1.Parts.Eyebrows:
                    this.eyebrows.update(dto.data);
                    break;
                case Parts_1.Parts.Hair:
                    this.hair.update(dto.data);
                    break;
                case Parts_1.Parts.Mouth:
                    this.mouth.update(dto.data);
                    break;
                case Parts_1.Parts.Preset:
                    if (!this.getPresetByIdx(dto.data.presetIndex)) {
                        break;
                    }
                    this.presetIndex = dto.data.presetIndex;
                    this.resetToNewCharacter(this.getPresetByIdx(dto.data.presetIndex));
                    break;
                case Parts_1.Parts.Clothes:
                    if (((_a = dto.data) === null || _a === void 0 ? void 0 : _a.clothesTop) != null) {
                        this.clothes.data.clothesTop = dto.data.clothesTop;
                    }
                    if (((_b = dto.data) === null || _b === void 0 ? void 0 : _b.clothesShoes) != null) {
                        this.clothes.data.clothesShoes = dto.data.clothesShoes;
                    }
                    this.clothes.update({ clothesTop: this.clothes.data.clothesTop, clothesShoes: this.clothes.data.clothesShoes });
                    break;
                default:
                    break;
            }
        });
    }
    save(data, appearanceSkyrimData) {
        if (this.clothes.data.clothesShoes === 0 || this.clothes.data.clothesTop === 0) {
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('createCharacter/setIsOpenPopupName', false);
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('createCharacter/setTab', tabs_1.Tab.Clothes);
            NotificationsHandler_1.NotificationsHandler.send('Сначала выберите одежду', NotificationTypes_1.NotificationTypes.Error);
            return;
        }
        if (!data.status) {
            return NotificationsHandler_1.NotificationsHandler.send('Имя занято', NotificationTypes_1.NotificationTypes.Error);
        }
        const appearanceDto = {
            name: data.name,
            age: data.age,
            region: data.region,
            gender: this.gender === 0 ? 'Male' : 'Female',
            race: (0, utils_1.raceToString)(this.race),
            body: this.body.data,
            eyebrows: this.eyebrows.data,
            eyes: this.eyes.data,
            face: this.face.data,
            hair: this.hair.data,
            head: this.head.data,
            mouth: this.mouth.data,
            presetIndex: this.presetIndex,
            clothes: this.clothes.data,
        };
        (0, Utils_1.sendEventToServer)(events_1.CharEditorEvents.Save, { appearanceDto, appearanceSkyrimData });
        CharacterEditorHandler_1.CharacterEditorHandler.delete();
    }
    setTabs(tab) {
        var _a;
        (_a = this.cameraManager) === null || _a === void 0 ? void 0 : _a.changeScene(tab);
    }
    destroy() {
        sp.once('update', () => {
            var _a;
            if (this.interfaceEnabled) {
                (_a = this.cameraManager) === null || _a === void 0 ? void 0 : _a.destroy();
                spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('createCharacter/hide', null, false);
            }
            this.interfaceEnabled = false;
        });
    }
}
exports.CharacterEditorService = CharacterEditorService;


/***/ }),

/***/ 3730:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Gender = void 0;
var Gender;
(function (Gender) {
    Gender[Gender["Male"] = 0] = "Male";
    Gender[Gender["Female"] = 1] = "Female";
})(Gender = exports.Gender || (exports.Gender = {}));


/***/ }),

/***/ 1861:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PartEditor = void 0;
const Gender_1 = __webpack_require__(3730);
const Race_1 = __webpack_require__(3127);
class PartEditor {
    constructor(defaultMale, defaultFamele) {
        this.gender = Gender_1.Gender.Male;
        this.race = Race_1.Race.Khajits;
        this.defaultMale = defaultMale;
        this.defaultFamele = defaultFamele;
        this._data = defaultMale;
    }
    get data() {
        return this._data;
    }
    update(data) {
        this._data = Object.assign(Object.assign({}, this._data), data);
        this.apply();
    }
    updateNotApply(data) {
        this._data = Object.assign(Object.assign({}, this._data), data);
    }
    reset() {
        if (this.gender === Gender_1.Gender.Male) {
            this._data = this.defaultMale;
        }
        else {
            this._data = this.defaultFamele;
        }
        this.apply();
    }
    changeGender(gender) {
        if (this.gender === gender) {
            return;
        }
        this.gender = gender;
        this.reset();
    }
    changeDefault(defaultMale, defaultFemale) {
        this.defaultMale = defaultMale;
        this.defaultFamele = defaultFemale;
    }
    changeRace(race, defaultMale, defaultFemele) {
        if (this.race === race) {
            return;
        }
        this.changeDefault(defaultMale, defaultFemele);
        this.race = race;
        this.reset();
    }
}
exports.PartEditor = PartEditor;


/***/ }),

/***/ 8551:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Body = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const PartEditor_1 = __webpack_require__(1861);
const Player_1 = __webpack_require__(5456);
const TintTypes_1 = __webpack_require__(512);
class Body extends PartEditor_1.PartEditor {
    apply() {
        Player_1.localPlayer.baseActor.setWeight(this.data.weight);
        Player_1.localPlayer.actor.updateWeight(0);
        skyrimPlatform_1.TESModPlatform.setNpcSkinColor(Player_1.localPlayer.baseActor, this.data.skinColor);
        const numTints = skyrimPlatform_1.Game.getNumTintMasks();
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            if (type === TintTypes_1.TintTypes.SkinTone) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.skinColor);
            }
        }
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Body = Body;


/***/ }),

/***/ 5438:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Clothes = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const PartEditor_1 = __webpack_require__(1861);
const Player_1 = __webpack_require__(5456);
const Items_1 = __webpack_require__(7187);
const clothesConfig_1 = __webpack_require__(5529);
class Clothes extends PartEditor_1.PartEditor {
    apply() {
        var _a, _b, _c, _d;
        Player_1.localPlayer.actor.unequipAll();
        if (this._data.clothesTop > 0) {
            const topHash = clothesConfig_1.createCharClothesConfig.top[this._data.clothesTop];
            const topItem = Items_1.default.get(topHash);
            const topItemId = parseInt(topItem.itemId, 16);
            const topArmorItem = skyrimPlatform_1.Armor.from(skyrimPlatform_1.Game.getFormEx(topItemId));
            (_a = Player_1.localPlayer.actor) === null || _a === void 0 ? void 0 : _a.addItem(topArmorItem, 1, false);
            (_b = Player_1.localPlayer.actor) === null || _b === void 0 ? void 0 : _b.equipItem(topArmorItem, false, false);
        }
        if (this._data.clothesShoes > 0) {
            const shoesHash = clothesConfig_1.createCharClothesConfig.shoes[this._data.clothesShoes];
            const shoesItem = Items_1.default.get(shoesHash);
            const shoesItemId = parseInt(shoesItem.itemId, 16);
            const shoesArmorItem = skyrimPlatform_1.Armor.from(skyrimPlatform_1.Game.getFormEx(shoesItemId));
            (_c = Player_1.localPlayer.actor) === null || _c === void 0 ? void 0 : _c.addItem(shoesArmorItem, 1, false);
            (_d = Player_1.localPlayer.actor) === null || _d === void 0 ? void 0 : _d.equipItem(shoesArmorItem, false, false);
        }
    }
}
exports.Clothes = Clothes;


/***/ }),

/***/ 4060:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Eyebrows = void 0;
const PartEditor_1 = __webpack_require__(1861);
const appearanceSync_1 = __webpack_require__(282);
const Player_1 = __webpack_require__(5456);
const HeadParts_1 = __webpack_require__(1873);
class Eyebrows extends PartEditor_1.PartEditor {
    apply() {
        if (this.data.eyebrowsType === 0) {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.Eyebrows);
        }
        else {
            appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(this.data.eyebrowsType);
        }
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.eyebrowsHeigth, 9);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.eyebrowsWeight, 10);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.eyebrowsForward, 11);
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Eyebrows = Eyebrows;


/***/ }),

/***/ 368:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Eyes = void 0;
const PartEditor_1 = __webpack_require__(1861);
const appearanceSync_1 = __webpack_require__(282);
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
const HeadParts_1 = __webpack_require__(1873);
const TintTypes_1 = __webpack_require__(512);
class Eyes extends PartEditor_1.PartEditor {
    apply() {
        Player_1.localPlayer.baseActor.setFacePreset(this.data.eyesForm, 2);
        if (this.data.eyesColor === 0) {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.EyesColor);
        }
        else {
            appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(this.data.eyesColor);
        }
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.eyesHeigth, 7);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.eyesDistance, 8);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.eyesDepth, 17);
        Player_1.localPlayer.baseActor.setFaceMorph(0, 18);
        const numTints = skyrimPlatform_1.Game.getNumTintMasks();
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            if (type === TintTypes_1.TintTypes.Eyeliner) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.eyesLinerColor);
            }
            else if (type === TintTypes_1.TintTypes.UpperEyesocket) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.eyesUpperShadows);
            }
            else if (type === TintTypes_1.TintTypes.LowerEyesocket) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.eyesLowerShadows);
            }
        }
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Eyes = Eyes;


/***/ }),

/***/ 5485:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Face = void 0;
const PartEditor_1 = __webpack_require__(1861);
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
const TintTypes_1 = __webpack_require__(512);
class Face extends PartEditor_1.PartEditor {
    apply() {
        Player_1.localPlayer.baseActor.setFacePreset(this.data.noseType, 0);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.noseHeight, 0);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.noseLength, 1);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.jawHeight, 2);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.jawWidth, 3);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.cheekbondeWidth, 4);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.cheekboneHeight, 5);
        const numTints = skyrimPlatform_1.Game.getNumTintMasks();
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            switch (type) {
                case TintTypes_1.TintTypes.Cheeks:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.cheeksTint);
                    break;
                case TintTypes_1.TintTypes.LowerCheeks:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.cheeksTintLower);
                    break;
                case TintTypes_1.TintTypes.Frownlines:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.frownLines);
                    break;
                case TintTypes_1.TintTypes.Nose:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.noseTint);
                    break;
                case TintTypes_1.TintTypes.Chin:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.chinTint);
                    break;
                case TintTypes_1.TintTypes.Neck:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.neckTint);
                    break;
                case TintTypes_1.TintTypes.Forehead:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.foreHeadTint);
                    break;
                default:
                    break;
            }
        }
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Face = Face;


/***/ }),

/***/ 109:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Hair = void 0;
const PartEditor_1 = __webpack_require__(1861);
const appearanceSync_1 = __webpack_require__(282);
const Player_1 = __webpack_require__(5456);
const skyrimPlatform_1 = __webpack_require__(2112);
class Hair extends PartEditor_1.PartEditor {
    apply() {
        appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(this.data.hairs);
        appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(this.data.facialHair);
        skyrimPlatform_1.TESModPlatform.setNpcHairColor(Player_1.localPlayer.baseActor, this.data.hairColor);
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Hair = Hair;


/***/ }),

/***/ 3422:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Head = void 0;
const PartEditor_1 = __webpack_require__(1861);
const appearanceSync_1 = __webpack_require__(282);
const Player_1 = __webpack_require__(5456);
const HeadParts_1 = __webpack_require__(1873);
const skyrimPlatform_1 = __webpack_require__(2112);
const TintTypes_1 = __webpack_require__(512);
class Head extends PartEditor_1.PartEditor {
    apply() {
        if (typeof this.data.dirtTint === 'string') {
            this.data.dirtTint = JSON.parse(this.data.dirtTint);
        }
        this.data.dirtTint.forEach((tint) => {
            appearanceSync_1.AppearanceSync.resetTintsForPlayerByType(tint.type);
            const numTints = skyrimPlatform_1.Game.getNumTintMasks();
            for (let i = 0; i < numTints; i++) {
                const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
                const path = skyrimPlatform_1.Game.getNthTintMaskTexturePath(i);
                if (type === TintTypes_1.TintTypes.Dirt && path === tint.texturePath) {
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, tint.argb);
                }
            }
        });
        if (this.data.faceScar === -1) {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.Scar);
        }
        else {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.Scar);
            appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(this.data.faceScar);
        }
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Head = Head;


/***/ }),

/***/ 8467:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Mouth = void 0;
const PartEditor_1 = __webpack_require__(1861);
const Player_1 = __webpack_require__(5456);
const skyrimPlatform_1 = __webpack_require__(2112);
const TintTypes_1 = __webpack_require__(512);
class Mouth extends PartEditor_1.PartEditor {
    apply() {
        Player_1.localPlayer.baseActor.setFacePreset(this.data.lipsType, 3);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.lipsHeigth, 12);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.lipsForward, 13);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.chinWeigth, 14);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.chinLength, 15);
        Player_1.localPlayer.baseActor.setFaceMorph(this.data.chinForward, 16);
        const numTints = skyrimPlatform_1.Game.getNumTintMasks();
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            if (type === TintTypes_1.TintTypes.Lips) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, this.data.lipsColor);
            }
        }
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Mouth = Mouth;


/***/ }),

/***/ 1313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Preset = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const PartEditor_1 = __webpack_require__(1861);
const Player_1 = __webpack_require__(5456);
const appearanceSync_1 = __webpack_require__(282);
class Preset extends PartEditor_1.PartEditor {
    apply() {
        const headparts = this.data.headpartIds.map((id) => skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(id))).filter((headpart) => !!headpart);
        Player_1.localPlayer.baseActor.setWeight(this.data.weight);
        Player_1.localPlayer.actor.updateWeight(0);
        skyrimPlatform_1.TESModPlatform.setNpcSkinColor(Player_1.localPlayer.baseActor, this.data.skinColor);
        skyrimPlatform_1.TESModPlatform.setNpcHairColor(Player_1.localPlayer.baseActor, this.data.hairColor);
        skyrimPlatform_1.TESModPlatform.resizeHeadpartsArray(Player_1.localPlayer.baseActor, headparts.length);
        headparts.forEach((v, i) => Player_1.localPlayer.baseActor.setNthHeadPart(v, i));
        Player_1.localPlayer.baseActor.setFaceTextureSet(skyrimPlatform_1.TextureSet.from(skyrimPlatform_1.Game.getFormEx(this.data.headTextureSetId)));
        this.data.options.forEach((v, i) => Player_1.localPlayer.baseActor.setFaceMorph(v, i));
        this.data.presets.forEach((v, i) => Player_1.localPlayer.baseActor.setFacePreset(v, i));
        appearanceSync_1.AppearanceSync.applyTints(null, this.data.tints);
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
}
exports.Preset = Preset;


/***/ }),

/***/ 3127:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Race = void 0;
var Race;
(function (Race) {
    Race[Race["Nords"] = 79686] = "Nords";
    Race[Race["Imperials"] = 79684] = "Imperials";
    Race[Race["Orcs"] = 79687] = "Orcs";
    Race[Race["Argonians"] = 79680] = "Argonians";
    Race[Race["DarkElves"] = 79682] = "DarkElves";
    Race[Race["HighElves"] = 79683] = "HighElves";
    Race[Race["Bretons"] = 79681] = "Bretons";
    Race[Race["WoodElves"] = 79689] = "WoodElves";
    Race[Race["Khajits"] = 79685] = "Khajits";
    Race[Race["Redgards"] = 79688] = "Redgards";
})(Race = exports.Race || (exports.Race = {}));


/***/ }),

/***/ 5005:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateCharacterCameraConfigScenes = exports.CreateCharacterCameraConfig = void 0;
const tabs_1 = __webpack_require__(8349);
const Vector3_1 = __webpack_require__(2233);
exports.CreateCharacterCameraConfig = {
    yawSpeed: 1.0,
    pitchSpeed: 1.0,
    moveSpeed: 3.0,
};
exports.CreateCharacterCameraConfigScenes = {
    [tabs_1.Tab.Race]: {
        position: new Vector3_1.Vector3(0, -150, -30),
        direction: new Vector3_1.Vector3(0, -10, -30),
    },
    [tabs_1.Tab.Body]: {
        position: new Vector3_1.Vector3(0, -100, 0),
        direction: new Vector3_1.Vector3(0, -10, -10),
    },
    [tabs_1.Tab.Brows]: {
        position: new Vector3_1.Vector3(0, 0, 10),
        direction: new Vector3_1.Vector3(0, -20, 0),
    },
    [tabs_1.Tab.Clothes]: {
        position: new Vector3_1.Vector3(0, -150, -30),
        direction: new Vector3_1.Vector3(0, -10, -30),
    },
    [tabs_1.Tab.Eyes]: {
        position: new Vector3_1.Vector3(0, 0, 10),
        direction: new Vector3_1.Vector3(0, -20, 0),
    },
    [tabs_1.Tab.Face]: {
        position: new Vector3_1.Vector3(0, 0, 10),
        direction: new Vector3_1.Vector3(0, -20, 0),
    },
    [tabs_1.Tab.Hairs]: {
        position: new Vector3_1.Vector3(0, 0, 10),
        direction: new Vector3_1.Vector3(0, -20, -30),
    },
    [tabs_1.Tab.Head]: {
        position: new Vector3_1.Vector3(0, 0, 10),
        direction: new Vector3_1.Vector3(0, -20, 0),
    },
    [tabs_1.Tab.Mouth]: {
        position: new Vector3_1.Vector3(0, 0, 10),
        direction: new Vector3_1.Vector3(0, -20, 0),
    },
};


/***/ }),

/***/ 1113:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onCharacterEditorDestroy = exports.onCharacterEditorInit = exports.initCharacterEditorBrowserEvents = exports.CharacterEditorOnCharacterSave = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const CharacterEditorHandler_1 = __webpack_require__(5619);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const appearanceSync_1 = __webpack_require__(282);
const Player_1 = __webpack_require__(5456);
const events_1 = __webpack_require__(2416);
const Utils_1 = __webpack_require__(2453);
function setRace(data) {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (!characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        characterEditorService.setRace(data.race);
    });
}
function setGender(data) {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (!characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        characterEditorService.setGender(data.gender);
    });
}
function updateTab(dto) {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (!characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        characterEditorService.update(dto);
    });
}
function onCharacterReset() {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (!characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        characterEditorService.resetAll();
    });
}
function onTabClick(data) {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (!characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        characterEditorService.setTabs(data.tabId);
    });
}
function CharacterEditorOnCharacterSave(data) {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (!characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        const appearanceSkyrim = appearanceSync_1.AppearanceSync.getAppearance(Player_1.localPlayer.actor);
        appearanceSkyrim.name = data.name;
        characterEditorService.save(data, appearanceSkyrim);
    });
}
exports.CharacterEditorOnCharacterSave = CharacterEditorOnCharacterSave;
function backToChooseCharacter() {
    (0, Utils_1.sendEventToServer)(events_1.CharEditorEvents.BackToSelectCharacter);
}
function initCharacterEditorBrowserEvents() {
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.UpdateRace).addHandler(setRace);
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.UpdateGender).addHandler(setGender);
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.UpdatePart).addHandler(updateTab);
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.Reset).addHandler(onCharacterReset);
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.SetName).addHandler((data) => {
        (0, Utils_1.sendEventToServer)(events_1.CharEditorEvents.CheckName, data);
    });
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.OnClickTab).addHandler(onTabClick);
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CreateCharacterEvents.Back).addHandler(backToChooseCharacter);
}
exports.initCharacterEditorBrowserEvents = initCharacterEditorBrowserEvents;
function onCharacterEditorInit() {
    const characterEditorService = CharacterEditorHandler_1.CharacterEditorHandler.get();
    if (characterEditorService) {
        return;
    }
    (0, skyrimPlatform_1.once)('update', () => {
        CharacterEditorHandler_1.CharacterEditorHandler.create().init();
    });
}
exports.onCharacterEditorInit = onCharacterEditorInit;
function onCharacterEditorDestroy() {
    CharacterEditorHandler_1.CharacterEditorHandler.delete();
}
exports.onCharacterEditorDestroy = onCharacterEditorDestroy;


/***/ }),

/***/ 978:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultConfig = void 0;
const defaultPresets_1 = __webpack_require__(8274);
const Gender_1 = __webpack_require__(3730);
const Race_1 = __webpack_require__(3127);
exports.defaultConfig = [
    {
        presetName: 'kaj_male',
        gender: Gender_1.Gender.Male,
        race: Race_1.Race.Khajits,
        weight: 50,
        hairColor: 2830643,
        headpartIds: [333334, 333069, 977024, 976988, 976981, 333067],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 3, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -907285525,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13948116,
        customPresets: defaultPresets_1.kajMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'kaj_female',
        gender: Gender_1.Gender.Female,
        race: Race_1.Race.Khajits,
        weight: 0,
        hairColor: 1711132,
        headpartIds: [333330, 332200, 997638, 976988, 187841],
        headTextureSetId: 752054,
        options: [
            -0.20000000298023224, 0.30000001192092896, 0, 0, 0, 0.30000001192092896, 0.20000000298023224, -0.5, 0, -0.6000000238418579, 0, 0,
            -0.10000000149011612, -1, 0, 0, 0, 0, 0,
        ],
        presets: [3, -1, 9, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -907285525,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13948116,
        customPresets: defaultPresets_1.kajFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'argonian_male',
        gender: Gender_1.Gender.Male,
        race: Race_1.Race.Argonians,
        weight: 50,
        hairColor: 4610077,
        headpartIds: [333332, 333068, 733141, 885497, 333066, 885496],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2139127808,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8355647,
        customPresets: defaultPresets_1.argonianMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'argonian_female',
        gender: Gender_1.Gender.Female,
        race: Race_1.Race.Argonians,
        weight: 0,
        hairColor: 6830613,
        headpartIds: [333331, 599309, 733140, 885495, 599308, 885494],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1686081536,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8353329,
        customPresets: defaultPresets_1.argonianFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'breton_male',
        race: Race_1.Race.Bretons,
        gender: Gender_1.Gender.Male,
        weight: 50,
        hairColor: 1711132,
        headpartIds: [333363, 333361, 546143, 332805, 95497, 148047, 815469],
        headTextureSetId: 853791,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [2, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadForswornTattoo_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadForswornTattoo_02.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadForswornTattoo_03.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadForswornTattoo_04.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBothiahTattoo_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13021352,
        customPresets: defaultPresets_1.bretonMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'breton_female',
        race: Race_1.Race.Bretons,
        gender: Gender_1.Gender.Female,
        weight: 0,
        hairColor: 3090724,
        headpartIds: [333345, 333071, 967090, 961138, 961130, 333128, 937377],
        headTextureSetId: 333383,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.10000000149011612, 0, -0.18000000715255737, -0.30000001192092896, 0],
        presets: [2, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadForswornTattoo_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadForswornTattoo_02.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadForswornTattoo_03.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadForswornTattoo_04.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBothiahTattoo_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
        customPresets: defaultPresets_1.bretonFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'highelves_male',
        race: Race_1.Race.HighElves,
        gender: Gender_1.Gender.Male,
        weight: 0,
        hairColor: 3749672,
        headpartIds: [333357, 333361, 546143, 331902, 331840, 1003529, 333351, 331903],
        headTextureSetId: 232032,
        options: [0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0.1000, 0, 0, 0],
        presets: [7, -1, 6, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6714027,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10063189,
        customPresets: defaultPresets_1.highElvesMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'highelves_female',
        race: Race_1.Race.HighElves,
        gender: Gender_1.Gender.Female,
        weight: 9.999999046325684,
        hairColor: 5328185,
        headpartIds: [333342, 333071, 967090, 576111, 576135, 333119, 937384],
        headTextureSetId: 232031,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [7, -1, 6, 7],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4736387,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElfWarPaint_01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElfWarPaint_02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElfWarPaint_03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElfWarPaint_04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12040829,
        customPresets: defaultPresets_1.highElvesFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'forestelves_male',
        race: Race_1.Race.WoodElves,
        gender: Gender_1.Gender.Male,
        weight: 0,
        hairColor: 3090724,
        headpartIds: [333355, 333361, 546143, 964597, 964593, 1003529, 333350, 815471],
        headTextureSetId: 250539,
        options: [
            0.2000, 0.5, -0.5, -1, 0, 1, 1, 1, -1, -1, -1, 0, 0.30000, 0.4000, -0.30000, -0.5, 0,
            0.5, 0,
        ],
        presets: [10, -1, 33, 19],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -6979217 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds', type: 1, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWoodElfWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWoodElfWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWoodElfWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWoodElfWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWoodElfWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 9797999,
        customPresets: defaultPresets_1.forestElvesMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'forestelves_female',
        race: Race_1.Race.WoodElves,
        gender: Gender_1.Gender.Female,
        weight: 50,
        hairColor: 4338989,
        headpartIds: [333343, 333071, 937517, 967618, 967608, 333072, 937340],
        headTextureSetId: 250540,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [8, -1, 8, 8],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -6644841 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds', type: 1, argb: 1621709906 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWoodElfWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWoodElfWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWoodElfWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWoodElfWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWoodElfWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 10132375,
        customPresets: defaultPresets_1.forestElvesFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'imperial_male',
        race: Race_1.Race.Imperials,
        gender: Gender_1.Gender.Male,
        weight: 39.999996185302734,
        hairColor: 1315864,
        headpartIds: [333360, 333361, 546143, 332816, 332817, 95497, 148047, 815370],
        headTextureSetId: 333382,
        options: [
            0, 0, -1, 0.3200000, 0, -0.39999, -0.3999, 0.55999, -0.3999999, -0.840000,
            -1, 0.22000, -0.220000, 0, 0.7000, 0.4400, 0.55999, -0.24000, 0,
        ],
        presets: [5, -1, 14, 12],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -8229541 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds', type: 1, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadImperialWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadImperialWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadImperialWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadImperialWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadImperialWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 8547675,
        customPresets: defaultPresets_1.imperialMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'imperial_female',
        race: Race_1.Race.Imperials,
        gender: Gender_1.Gender.Female,
        weight: 9.999999046325684,
        hairColor: 1315864,
        headpartIds: [333341, 333071, 967090, 961137, 961129, 262693, 937380],
        headTextureSetId: 333384,
        options: [0, 0, 0, 0, 0, 0, 0, -0.3399, 0, -0.306, 0, 0, 0.120000, 0, 0, 0, 0, 0, 0],
        presets: [3, -1, 3, 3],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -4607062 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds', type: 4, argb: 1923699794 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds', type: 1, argb: -967833343 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperialWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperialWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperialWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperialWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperialWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds', type: 3, argb: -2075982847 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 12170154,
        customPresets: defaultPresets_1.imperialFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'nord_male',
        race: Race_1.Race.Nords,
        gender: Gender_1.Gender.Male,
        weight: 75,
        hairColor: 6051920,
        headpartIds: [333359, 333361, 546143, 333063, 333061, 331956, 148036, 333064],
        headTextureSetId: 242977,
        options: [
            0.05999, 0.1, -1, 0.07999999, 0.01999, 0.03999, 0.5, 0.5,
            -0.059, -1, 0, -0.239, 0.66000, 0.1599, -0.34000, -0.4,
            0.18, -0.639993, 0,
        ],
        presets: [1, -1, 1, 19],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -5798278 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds', type: 1, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBothiahTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBlackBloodTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBlackBloodTattoo_02.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 10978938,
        customPresets: defaultPresets_1.nordMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'nord_female',
        race: Race_1.Race.Nords,
        gender: Gender_1.Gender.Female,
        weight: 50,
        hairColor: 6051920,
        headpartIds: [333347, 333071, 967090, 332146, 331984, 262696, 937380],
        headTextureSetId: 242978,
        options: [
            -0.2, 0.3, 0, 0, 0.3, 0, 0.2, -0.5, 0, -0.6, 0, 0,
            -0.1, -1, 0, 0, 0, 0, 0,
        ],
        presets: [3, -1, 9, 4],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -2236963 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds', type: 1, argb: 1621709906 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNordWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNordWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNordWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNordWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNordWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBothiahTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBlackBloodTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBlackBloodTattoo_02.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 14540253,
        customPresets: defaultPresets_1.nordFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'orc_male',
        race: Race_1.Race.Orcs,
        gender: Gender_1.Gender.Male,
        weight: 79.99999237060547,
        hairColor: 1053202,
        headpartIds: [333354, 501248, 937516, 937418, 267598, 267603, 331957, 599306, 331904],
        headTextureSetId: 501247,
        options: [
            0.4, -0.4, 0.1, 1, 0, 1, 0.5, -0.4, 0.51999, -1,
            -0.2, 0, 0.2, -0.5, 0.30, 1, 0.5, 0, 0,
        ],
        presets: [21, -1, 28, 26],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -12629959 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds', type: 1, argb: -13289662 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadOrcWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadOrcWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadOrcWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadOrcWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadOrcWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds', type: 14, argb: -13688813 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 4147257,
        customPresets: defaultPresets_1.orcMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'orc_female',
        race: Race_1.Race.Orcs,
        gender: Gender_1.Gender.Female,
        weight: 79.99999237060547,
        hairColor: 1711132,
        headpartIds: [333339, 611477, 967090, 548329, 548319, 262690, 937340],
        headTextureSetId: 602448,
        options: [-0.0799999, 0.32, 0, 0, 0, 0, 0, 0, 0, -0.2799, 0, 0, 0.5, 0, 0, 0, 0, 0, 0],
        presets: [21, -1, 9, 23],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -11901867 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds', type: 1, argb: 346641490 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadOrcWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadOrcWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadOrcWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadOrcWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadOrcWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 4875349,
        customPresets: defaultPresets_1.orcFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'redgard_male',
        race: Race_1.Race.Redgards,
        gender: Gender_1.Gender.Male,
        weight: 90,
        hairColor: 3154721,
        headpartIds: [333358, 333361, 546143, 332796, 1067118, 331956, 948972, 815395],
        headTextureSetId: 853799,
        options: [
            -1, 1, -0.6600, -1, 0, 0, 0, 0.0599, -0.3, -0.1, 0.4,
            0.699, 1, 0, -0.4, 0, 0.2599, -0.5, 0,
        ],
        presets: [11, -1, 12, 6],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -11453131 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds', type: 1, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguardWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguardWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguardWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguardWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguardWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBothiahTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds', type: 14, argb: -13688813 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 5324085,
        customPresets: defaultPresets_1.redgardMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'redgard_female',
        race: Race_1.Race.Redgards,
        gender: Gender_1.Gender.Female,
        weight: 79.99999237060547,
        hairColor: 1315864,
        headpartIds: [333346, 333071, 967090, 331954, 469271, 937380],
        headTextureSetId: 333385,
        options: [0, 0, 0, 0, 0, 0, 0, -0.1, 0, -0.1, -0.2, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [4, -1, 4, 4],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -11453131 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds', type: 4, argb: -1354562559 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds', type: 5, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds', type: 2, argb: 1923699794 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds', type: 1, argb: -2109537279 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguardWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguardWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguardWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguardWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguardWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBothiahTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds', type: 3, argb: -2075982847 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds', type: 14, argb: -11128558 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 5324085,
        customPresets: defaultPresets_1.redgardFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'dargelv_male',
        race: Race_1.Race.DarkElves,
        gender: Gender_1.Gender.Male,
        weight: 19.999998092651367,
        hairColor: 2565667,
        headpartIds: [333356, 333361, 546143, 989849, 989851, 95498, 342311, 815394],
        headTextureSetId: 103310,
        options: [
            0.799, -1, 0, 0, 0, 0.5, 0.5, 0.6, -0.3, -1, 0.3, 0, -1, 1, 0, 0, 0,
            -0.3, 0,
        ],
        presets: [1, -1, 6, 8],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: -8021341 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds', type: 4, argb: -752800942 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds', type: 5, argb: -752800942 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds', type: 1, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDarkElfWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDarkElfWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDarkElfWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDarkElfWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDarkElfWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDarkElfWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBothiahTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds', type: 3, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 8755875,
        customPresets: defaultPresets_1.darkElveMalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
    {
        presetName: 'darkelv_female',
        race: Race_1.Race.DarkElves,
        gender: Gender_1.Gender.Female,
        weight: 50,
        hairColor: 1711132,
        headpartIds: [333340, 333071, 967090, 576111, 576135, 342314, 937340],
        headTextureSetId: 103312,
        options: [
            0, 0, 0, 0, 0, 0, 0.3, -0.5, 0.6, -0.5, 0, 0, -0.4, 0, 0, 0.1, 0, 0, 0,
        ],
        presets: [6, -1, 25, 16],
        tints: [
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds', type: 6, argb: 1798332261 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds', type: 4, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds', type: 5, argb: -16777216 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds', type: 2, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds', type: 9, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds', type: 8, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds', type: 1, argb: 1621709906 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds', type: 10, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds', type: 13, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds', type: 11, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds', type: 12, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_07.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_08.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_09.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadWarPaint_10.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDarkElfWarPaint_01.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDarkElfWarPaint_02.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDarkElfWarPaint_03.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDarkElfWarPaint_04.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDarkElfWarPaint_06.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDarkElfWarPaint_05.dds', type: 7, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBothiahTattoo_01.dds', type: 0, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds', type: 3, argb: -1086960095 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds', type: 14, argb: 16777215 },
            { texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds', type: 14, argb: 16777215 },
        ],
        skinColor: 6189428,
        customPresets: defaultPresets_1.darkElveFemalePresets,
        clothes: { clothesTop: 0, clothesShoes: 0 },
    },
];


/***/ }),

/***/ 8274:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.darkElveFemalePresets = exports.darkElveMalePresets = exports.redgardFemalePresets = exports.redgardMalePresets = exports.orcFemalePresets = exports.orcMalePresets = exports.nordFemalePresets = exports.nordMalePresets = exports.imperialFemalePresets = exports.imperialMalePresets = exports.forestElvesFemalePresets = exports.forestElvesMalePresets = exports.highElvesFemalePresets = exports.highElvesMalePresets = exports.bretonFemalePresets = exports.bretonMalePresets = exports.argonianFemalePresets = exports.argonianMalePresets = exports.kajFemalePresets = exports.kajMalePresets = void 0;
exports.kajMalePresets = [
    {
        weight: 50,
        hairColor: 2830643,
        headpartIds: [333334, 333069, 977024, 976988, 976981, 333067],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 3, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -907285525,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13948116,
    },
    {
        hairColor: 2565667,
        headpartIds: [333334, 333069, 977024, 865115, 865116, 865139, 865140, 977004],
        headTextureSetId: 0,
        options: [
            -0.6000000238418579, 0.699999988079071, 0, 0, 0, 0, 0, -0.30000001192092896, -0.4000000059604645, 0.30000001192092896, 0.4000000059604645,
            0, 0.30000001192092896, 0, 0, 0, 0, 0, 0,
        ],
        presets: [1, -1, 1, 3],
        skinColor: 16645629,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16645629,
            },
        ],
        weight: 19.999998092651367,
    },
    {
        hairColor: 2565667,
        headpartIds: [333334, 333069, 977024, 865117, 976970, 865139, 865140, 977009],
        headTextureSetId: 0,
        options: [
            0.5, -0.20000000298023224, 0.6000000238418579, 0.4000000059604645, 0.699999988079071, 0, -0.6000000238418579, 0.30000001192092896,
            -0.30000001192092896, 1, 0, 0.8999999761581421, 0, 0, 0, -0.6000000238418579, 0.5, 0, 0,
        ],
        presets: [2, -1, 2, 0],
        skinColor: 10126425,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1339396356,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 19.999998092651367,
    },
    {
        hairColor: 3090724,
        headpartIds: [333334, 333069, 997658, 865125, 865120, 976981, 977009],
        headTextureSetId: 0,
        options: [
            0, 0, 0, 0.7, -0.2, 0.6, 0, -0.3, -0.3, -0.9,
            0.4, 0.2, 0, 0, 0, -0.4, -0.2, 0, 0,
        ],
        presets: [3, -1, 3, 3],
        skinColor: 9464140,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -829070272,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 39.999996185302734,
    },
    {
        hairColor: 2830643,
        headpartIds: [333334, 333069, 977024, 865117, 976970, 976981, 977005],
        headTextureSetId: 0,
        options: [
            0.5, -0.6000000238418579, -0.30000001192092896, 0, 0, 0.699999988079071, -0.6000000238418579, -0.20000000298023224, -0.20000000298023224,
            -0.5, 0.30000001192092896, 0, -0.4000000059604645, -0.5, 0.800000011920929, 0, 0, -0.8999999761581421, 0,
        ],
        presets: [2, -1, 3, 2],
        skinColor: 8355711,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
        ],
        weight: 60.000003814697266,
    },
    {
        hairColor: 1315864,
        headpartIds: [333334, 333069, 977024, 976988, 865144, 865130, 977012],
        headTextureSetId: 0,
        options: [
            0.1599999964237213, -0.9200000166893005, 0, 0, 0, -0.7400000095367432, -0.6399999856948853, -0.8600000143051147, -0.7599999904632568,
            -0.5199999809265137, -0.5199999809265137, -0.2800000011920929, 0, 0, 0, 0, 0, -0.5, 0,
        ],
        presets: [4, -1, 1, 3],
        skinColor: 10126425,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1339396356,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
    {
        hairColor: 1711132,
        headpartIds: [333334, 333069, 977024, 534973, 865128, 976981, 977012],
        headTextureSetId: 0,
        options: [
            0.5, -0.7, 0, 0, 0, 0, 0, 0.7, 0.6, 0, 0, 0, 0, 0, 0.4, 0, -0.6,
            0, 0,
        ],
        presets: [0, -1, 3, 4],
        skinColor: 6573369,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1554632430,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
    {
        hairColor: 3154721,
        headpartIds: [333334, 333069, 977024, 534971, 976971, 865128, 865144, 865130, 977007],
        headTextureSetId: 0,
        options: [
            0, 0, 0, 0, 0, 0.8, 0, -0.5, -0.6, -0.9, 0.6, 0, 0.3, 0, 0,
            0.6, 0, 0, 0,
        ],
        presets: [0, -1, 2, 1],
        skinColor: 11039807,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2144495872,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: -1220344831,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 79.99999237060547,
    },
    {
        hairColor: 1315864,
        headpartIds: [333334, 333069, 997659, 534972, 976972, 865133, 865144, 865130, 977010],
        headTextureSetId: 0,
        options: [
            0, -0.7, 0, 0, 0, 0.4, 0, -0.8, 0, 0, 0, 0, 0.8, 1, -0.6, 0, 0, 0,
            0,
        ],
        presets: [4, -1, 4, 1],
        skinColor: 4405295,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1137762285,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -822215171,
            },
        ],
        weight: 80,
    },
    {
        hairColor: 1711132,
        headpartIds: [333334, 333069, 977024, 534973, 865128, 865143, 865130, 977007],
        headTextureSetId: 0,
        options: [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.18, 1, 0, 0, 0, 0, 0],
        presets: [2, -1, 1, 3],
        skinColor: 4144959,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2130706432,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
];
exports.kajFemalePresets = [
    {
        weight: 50,
        hairColor: 6051920,
        headpartIds: [333330, 332200, 937380, 997638, 976988, 187841],
        headTextureSetId: 242978,
        options: [
            -0.2, 0.3, 0, 0, 0, 0.3, 0.2, -0.5, 0, -0.6, 0, 0,
            -0.1, -1, 0, 0, 0, 0, 0,
        ],
        presets: [3, -1, 9, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        hairColor: 1315864,
        headpartIds: [333330, 332200, 997638, 976988, 187841],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        skinColor: 13948116,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -907285525,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
    {
        hairColor: 1315864,
        headpartIds: [333330, 332200, 997638, 976987, 976983, 865133, 977021],
        headTextureSetId: 0,
        options: [-1, 0, 0, 0.8799999952316284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.9399999976158142, 0.019999999552965164, 0, 0],
        presets: [0, -1, 1, 2],
        skinColor: 4405295,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1137762285,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
    {
        hairColor: 1711132,
        headpartIds: [333330, 332200, 997638, 976986, 865109, 865132, 977021],
        headTextureSetId: 752054,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        skinColor: 9464140,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -829070272,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
    {
        hairColor: 1315864,
        headpartIds: [333330, 332200, 997654, 534979, 865134, 976985, 977022],
        headTextureSetId: 987705,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        skinColor: 10126425,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1339396356,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 50,
    },
    {
        hairColor: 3090724,
        headpartIds: [333330, 332200, 997638, 534978, 865128, 976984, 977019],
        headTextureSetId: 987705,
        options: [
            0, 0, 0, 0, 0.5, 0, 0.4, 0, 0, 0, 0, 0.1, 0, 0, -0.5, -0.6, -0.7,
            -0.6, 0,
        ],
        presets: [0, -1, 3, 3],
        skinColor: 11039807,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2144495872,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 4391937,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 70,
    },
    {
        hairColor: 1315864,
        headpartIds: [333330, 332200, 997654, 534979, 865134, 976985, 977016],
        headTextureSetId: 752054,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        skinColor: 8355711,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
        ],
        weight: 70,
    },
    {
        hairColor: 3090724,
        headpartIds: [333330, 332200, 997651, 534981, 865114, 865135, 977018],
        headTextureSetId: 752054,
        options: [
            0.4, 0, 0, 0.9, 0, 0, 0, -0.71, 0.5, 0, -0.7, -0.5, 0.4, -0.5, 0,
            0, 0, -0.5, 0,
        ],
        presets: [2, -1, 2, 1],
        skinColor: 6573369,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1554632430,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -822215171,
            },
        ],
        weight: 79.99999237060547,
    },
    {
        hairColor: 2565667,
        headpartIds: [333330, 332200, 997638, 534980, 865112, 865131, 977021],
        headTextureSetId: 752054,
        options: [
            0, 0.3, 0, -0.5, 0, -0.5, 0, 0.4, 0, 0, 0.6, 0, -0.5, 0.4, 0.7,
            0, 0, 0, 0,
        ],
        presets: [2, -1, 3, 0],
        skinColor: 7105908,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 671550525,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        weight: 70,
    },
    {
        hairColor: 1315864,
        headpartIds: [333330, 332200, 997638, 865111, 865112, 977019],
        headTextureSetId: 987705,
        options: [
            -0.5, 0.2, 0, 0, 0, 0, 0, -0.2, -0.5, 0, -0.4, 0, 0, 0, 0, -0.9,
            0.6, 0, 0,
        ],
        presets: [0, -1, 0, 4],
        skinColor: 7954252,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1468641486,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: -912956352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
        ],
        weight: 70,
    },
    {
        hairColor: 1053202,
        headpartIds: [333330, 332200, 997638, 534981, 865114, 865135, 977016],
        headTextureSetId: 987705,
        options: [
            0, 0.3, 0, 0.5, -0.1, 0.4, 0, -0.4, 0, 0, -0.7, 0,
            -0.7, 0, 0, 0, 0, -0.5, 0,
        ],
        presets: [1, -1, 1, 3],
        skinColor: 4144959,
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2130706432,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeliner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColor.dds',
                type: 2,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitCheekColorLower.dds',
                type: 9,
                argb: -15659514,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitForehead.dds',
                type: 13,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitChin.dds',
                type: 11,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLipColor.dds',
                type: 1,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitLaughlines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNeck.dds',
                type: 12,
                argb: -822215171,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitStripes04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint01.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint02.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint03.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitPaint04.dds',
                type: 7,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\KhajiitNose01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
        ],
        weight: 90,
    },
];
exports.argonianMalePresets = [
    {
        weight: 50,
        hairColor: 4610077,
        headpartIds: [333332, 333068, 733141, 885497, 333066, 885496],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2139127808,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8355647,
    },
    {
        weight: 0,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733141, 865098, 644602, 885496],
        headTextureSetId: 0,
        options: [
            -0.20000000298023224, 0.4000000059604645, 0, 0, 0, 0, -0.699999988079071, -0.800000011920929, 0, -0.4000000059604645, -0.5, 0.5, 0, 0, 0,
            0, 0, 0, 0,
        ],
        presets: [1, -1, 2, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1375600125,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10987431,
    },
    {
        weight: 19,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733141, 865099, 644621, 733130],
        headTextureSetId: 0,
        options: [
            0, -0.699999988079071, 0.5, -0.5, 0, 0, 0, 0.4000000059604645, -0.20000000298023224, -0.6000000238418579, -0.6000000238418579, 0, 0, 0, 0,
            0, 0, 0, 0,
        ],
        presets: [2, -1, 1, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2062673756,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -11892411,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 3558945,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 3558945,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 3558945,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 3558945,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 3558945,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 11907438,
    },
    {
        weight: 30,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733126, 865100, 644623, 885496],
        headTextureSetId: 433373,
        options: [
            -0.699999988079071, 0.4000000059604645, 0, 0.4000000059604645, 0, 0, 0, -0.30000001192092896, 0, 0, 0, 1, -0.30000001192092896, 0,
            -0.4000000059604645, -0.30000001192092896, 0.20000000298023224, -0.6000000238418579, 0,
        ],
        presets: [3, -1, 3, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 8355711,
    },
    {
        weight: 39,
        hairColor: 2893423,
        headpartIds: [333332, 333068, 733141, 865101, 865149, 644649, 885496],
        headTextureSetId: 0,
        options: [
            -0.5, -0.30000001192092896, 0.30000001192092896, 0, 0.5, -0.5, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 0, 0, 0,
            0.8999999761581421, 0, 0.4000000059604645, 0.20000000298023224, 0, 0.20000000298023224, 0,
        ],
        presets: [4, -1, 2, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1800046917,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6914918,
    },
    {
        weight: 50,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733148, 865102, 644937, 733131],
        headTextureSetId: 433373,
        options: [
            -0.699999988079071, 0.4000000059604645, -0.6000000238418579, 1, -0.30000001192092896, 0, 0, -0.20000000298023224, -0.20000000298023224, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
        ],
        presets: [5, -1, 4, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1472836063,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 5135937,
    },
    {
        weight: 60,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733141, 865103, 644939, 885496],
        headTextureSetId: 433373,
        options: [
            0.30000001192092896, -0.4000000059604645, -0.30000001192092896, -0.6000000238418579, 0, 0.5, 0.30000001192092896, -0.30000001192092896,
            0.30000001192092896, 0.699999988079071, 0, 0, -0.6000000238418579, 0, 0, 0, 0, 0, 0,
        ],
        presets: [1, -1, 1, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2132880210,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5264744,
    },
    {
        weight: 60,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733141, 865104, 865146, 644940, 885496],
        headTextureSetId: 433373,
        options: [
            -0.5, -0.5, 0.6000000238418579, -0.4000000059604645, -0.699999988079071, 0.6000000238418579, -0.10000000149011612, -0.5,
            -0.8999999761581421, -0.699999988079071, 0.4000000059604645, 0.5, 0.6000000238418579, 0.5, -0.20000000298023224, 0, 0, 0, 0,
        ],
        presets: [2, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1344099088,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 12820173,
    },
    {
        weight: 70,
        hairColor: 2365207,
        headpartIds: [333332, 333068, 733141, 865105, 644956, 733130],
        headTextureSetId: 433373,
        options: [
            0.4000000059604645, 0.6000000238418579, 0, 0.6000000238418579, 0, 0, 0, 0, 0, 0, 0, -0.4000000059604645, 0, 0, 0, -0.699999988079071,
            0.800000011920929, 0, 0,
        ],
        presets: [3, -1, 2, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9595755,
    },
    {
        weight: 90,
        hairColor: 5321493,
        headpartIds: [333332, 333068, 733141, 865106, 644962, 885496],
        headTextureSetId: 433373,
        options: [0, 0, 0, 0, 0, 0, 0, -0.5, 0, 0, 0, 1, 0, 0, 0, -0.10000000149011612, 0.800000011920929, 0, 0],
        presets: [5, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1522334719,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: -741015552,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes06.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5779245,
    },
];
exports.argonianFemalePresets = [
    {
        weight: 50,
        hairColor: 6830613,
        headpartIds: [333331, 599309, 733140, 885495, 599308, 885494],
        headTextureSetId: 0,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 0],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1686081536,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8353329,
    },
    {
        weight: 0,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 733140, 865088, 923192, 667311, 885494],
        headTextureSetId: 0,
        options: [-0.30000001192092896, -0.4000000059604645, 0, 0.10000000149011612, 0, 0.800000011920929, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [1, -1, 1, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1375600125,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10987431,
    },
    {
        weight: 19,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 733140, 865089, 667012, 885494],
        headTextureSetId: 0,
        options: [-0.4000000059604645, -0.5, 0, 0, 0, 0, 0, 0.20000000298023224, 0, -0.699999988079071, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [2, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8355711,
    },
    {
        weight: 30,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 733140, 865090, 667013, 733132],
        headTextureSetId: 0,
        options: [
            -0.6000000238418579, 0.699999988079071, 0.30000001192092896, -0.30000001192092896, -0.5, 0, 0, -0.6000000238418579, 0.699999988079071, 0,
            0, -0.30000001192092896, 0, 0, 0, 0, 0, 0, 0,
        ],
        presets: [3, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -969990125,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4207914,
    },
    {
        weight: 39,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 732701, 865091, 599308, 885494],
        headTextureSetId: 433376,
        options: [
            -0.4000000059604645, -0.30000001192092896, 0.4000000059604645, -0.30000001192092896, 0, 0, 0, 0, 0, 0, 0.800000011920929, 0, 0, 0, 0, 0,
            0.5, 0, 0,
        ],
        presets: [3, -1, 0, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2062673756,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -782081281,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 11907438,
    },
    {
        weight: 60,
        hairColor: 5321493,
        headpartIds: [333331, 599309, 733140, 865092, 865147, 667311, 733137],
        headTextureSetId: 0,
        options: [
            0, 0, 0, 0, 0, 0, 0, -0.5, -0.800000011920929, 0, 0, 0, 0.5, 0, -0.4000000059604645, -0.30000001192092896, 0.4000000059604645, 0, 0,
        ],
        presets: [0, -1, 3, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1800046917,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -11892411,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -11892411,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -11892411,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -11892411,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -13218271,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6914918,
    },
    {
        weight: 70,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 733140, 865094, 667312, 885494],
        headTextureSetId: 0,
        options: [
            0.30000001192092896, 0.6000000238418579, 0.6000000238418579, -0.5, -0.5, 0.4000000059604645, 0.6000000238418579, -0.5, -0.5, -0.5,
            -0.4000000059604645, 0, 0, 0, 0, -0.4000000059604645, -0.699999988079071, 0.5, 0,
        ],
        presets: [4, -1, 3, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 2132880210,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -131587,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 5264744,
    },
    {
        weight: 79,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 733110, 865095, 667313, 885494],
        headTextureSetId: 0,
        options: [-1, -0.699999988079071, 0, 0.699999988079071, 1, 0.800000011920929, 0, -0.6000000238418579, 0, 0, 0, 1, 0, 0, 0, 0, -0.5, 0, 0],
        presets: [4, -1, 4, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1344099088,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: -741015552,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12820173,
    },
    {
        weight: 70,
        hairColor: 2365207,
        headpartIds: [333331, 599309, 733140, 865096, 923196, 667411, 885494],
        headTextureSetId: 433376,
        options: [
            0.6000000238418579, 0.699999988079071, 0, 0, 0, 0, 0, 0.699999988079071, 0, 0, 0, 0.8999999761581421, 0, -0.5, -0.4000000059604645, 0, 0,
            -0.800000011920929, 0,
        ],
        presets: [1, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: -923812,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: 16645629,
            },
        ],
        skinColor: 9595755,
    },
    {
        weight: 90,
        hairColor: 5321493,
        headpartIds: [333331, 599309, 733140, 865097, 923195, 667412, 733137],
        headTextureSetId: 433376,
        options: [
            0.6000000238418579, -0.6000000238418579, 0, 0, 0, 0, 0.8999999761581421, -0.5, -0.4000000059604645, 0.800000011920929, 0, 0, 0, 0,
            0.800000011920929, 0, 0, 0, 0,
        ],
        presets: [2, -1, 4, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -1522334719,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianForehead.dds',
                type: 13,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketUpper.dds',
                type: 4,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeSocketLower.dds',
                type: 5,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianEyeLiner.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNostrils01.dds',
                type: 10,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLaughline.dds',
                type: 8,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeks.dds',
                type: 2,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianCheeksLower.dds',
                type: 9,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianLips.dds',
                type: 1,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianChin.dds',
                type: 11,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianNeck.dds',
                type: 12,
                argb: -1357836794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes01.dds',
                type: 7,
                argb: -2987776,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes02.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes03.dds',
                type: 7,
                argb: 16645629,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes04.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianStripes05.dds',
                type: 7,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\ArgonianDirt.dds',
                type: 14,
                argb: -16777216,
            },
        ],
        skinColor: 5779245,
    },
];
exports.bretonMalePresets = [
    {
        weight: 35,
        hairColor: 1711132,
        headpartIds: [333363, 333361, 546143, 332805, 95497, 148047, 815469],
        headTextureSetId: 853791,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [2, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13021352,
    },
    {
        weight: 19.999998092651367,
        hairColor: 1053202,
        headpartIds: [333363, 333361, 937515, 937494, 332803, 802008, 148048, 331904],
        headTextureSetId: 333386,
        options: [
            -0.5, -0.699999988079071, -1, 0.699999988079071, 0, 0.30000001192092896, 0.10000000149011612, -0.10000000149011612, 0.20000000298023224,
            -0.699999988079071, 0.8999999761581421, 0.800000011920929, -0.30000001192092896, -0.6000000238418579, 0, 0.5, 1, 0, 0,
        ],
        presets: [13, -1, 13, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: -11128558,
            },
        ],
        skinColor: 13021352,
    },
    {
        weight: 0,
        hairColor: 2565667,
        headpartIds: [333363, 333361, 546143, 916480, 916274, 863934, 863890, 148059, 815370],
        headTextureSetId: 853792,
        options: [
            -0.5, -0.10000000149011612, -1, 0.699999988079071, 0, 0.30000001192092896, 0.10000000149011612, 0, 0.6000000238418579, -1,
            0.8999999761581421, 0.800000011920929, 0.30000001192092896, -0.6000000238418579, 0, 0.30000001192092896, 1, -0.6000000238418579, 0,
        ],
        presets: [20, -1, 17, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 1795162112,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 5648658,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 1,
        hairColor: 1711132,
        headpartIds: [333363, 333361, 546143, 916485, 916423, 853348, 853350, 148059, 815394],
        headTextureSetId: 853794,
        options: [-1, 0.5, -0.5, -1, 0, -1, -1, -0.4599999785423279, -0.19999998807907104, -1, -1, 0, 1, -1, 0, 0, 1, -1, 0],
        presets: [19, -1, 17, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13021352,
    },
    {
        weight: 50,
        hairColor: 3090724,
        headpartIds: [333363, 333361, 937514, 937498, 916482, 916282, 802020, 948972, 815705],
        headTextureSetId: 853791,
        options: [
            -1, -1, 0.2799999713897705, -1, 1, 1, -0.42000001668930054, -0.6000000238418579, 0.36000001430511475, -1, 0, 0.3999999761581421, -1,
            -0.2799999713897705, 0.5, 1, -1, -0.2200000286102295, 0,
        ],
        presets: [18, -1, 16, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 25,
        hairColor: 4606805,
        headpartIds: [333363, 333361, 546143, 332887, 332945, 843181, 842625, 148059, 815394],
        headTextureSetId: 853793,
        options: [
            0.10000000149011612, -0.699999988079071, 0.4000000059604645, -0.5, 0, 0, 0, 0, 0.5, -0.8999999761581421, 0, 0, 0, 0, 0.20000000298023224,
            0.4000000059604645, -0.4000000059604645, -1, 0,
        ],
        presets: [5, -1, 16, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 0,
        hairColor: 1315864,
        headpartIds: [333363, 333361, 546143, 916480, 916274, 1003529, 333362, 815471],
        headTextureSetId: 333386,
        options: [
            0, 0, -1, 0.699999988079071, 0, 0.30000001192092896, 0.10000000149011612, -0.5, 0.20000000298023224, 0, 0, 0, 0.30000001192092896,
            -0.8999999761581421, 0.800000011920929, -0.699999988079071, 0.4000000059604645, 0, 0,
        ],
        presets: [2, -1, 16, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 816403538,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 1,
        hairColor: 3154721,
        headpartIds: [333363, 333361, 546143, 332806, 332807, 802010, 333362, 815370],
        headTextureSetId: 853791,
        options: [
            -1, 0.6800000071525574, 0, 0, 0, 0, 0, -0.4000000059604645, -0.46000000834465027, -1, 0.20000000298023224, 0.7400000095367432,
            0.7200000286102295, -1, 0.23999999463558197, -0.5400000214576721, -0.8199999928474426, 0.41999998688697815, 0,
        ],
        presets: [10, -1, 20, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13021352,
    },
    {
        weight: 19.999998092651367,
        hairColor: 2830643,
        headpartIds: [333363, 333361, 546143, 332816, 332817, 95498, 333362, 815705],
        headTextureSetId: 853809,
        options: [
            -1, 0.4000000059604645, -1, -0.20000000298023224, 0.30000001192092896, 1, -0.5, 0, 0, -0.30000001192092896, 0.10000000149011612,
            0.800000011920929, 1, -1, -0.800000011920929, -0.800000011920929, -0.800000011920929, -0.6000000238418579, 0,
        ],
        presets: [9, -1, 20, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 0,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 50,
        hairColor: 1711132,
        headpartIds: [333363, 333361, 546143, 332984, 332968, 95499, 148047, 815395],
        headTextureSetId: 853791,
        options: [
            -1, -0.2199999988079071, -0.5400000214576721, -0.3199999928474426, 0, 0, 0, -0.3199999928474426, -0.1600000262260437, -0.6399999856948853,
            -1, 0, 0.25999999046325684, 0, -0.5600000023841858, -0.30000001192092896, -0.30000001192092896, -0.2800000011920929, 0,
        ],
        presets: [20, -1, 17, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
];
exports.bretonFemalePresets = [
    {
        weight: 50,
        hairColor: 3090724,
        headpartIds: [333345, 333071, 967090, 961138, 961130, 333128, 937377],
        headTextureSetId: 333383,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.10000000149011612, 0, -0.18000000715255737, -0.30000001192092896, 0],
        presets: [2, -1, 2, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 50,
        hairColor: 1315864,
        headpartIds: [333345, 333071, 937549, 332179, 332022, 262672, 937384],
        headTextureSetId: 991319,
        options: [
            -0.4000000059604645, -0.10000000149011612, -0.20000000298023224, 0.10000000149011612, -1, 0.30000001192092896, -0.10000000149011612, 0.5,
            -0.20000000298023224, -0.30000001192092896, -0.800000011920929, 1, -0.10000000149011612, -0.10000000149011612, -0.10000000149011612,
            0.10000000149011612, -0.8999999761581421, -0.5, 0,
        ],
        presets: [20, -1, 4, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: -1683401646,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 0,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 0,
        hairColor: 4406574,
        headpartIds: [333345, 333071, 967090, 961137, 961129, 333128, 937377],
        headTextureSetId: 991322,
        options: [
            -0.5, -0.4000000059604645, -1, -0.6000000238418579, 0, 0, -0.5, -0.6000000238418579, 0.10000000149011612, -0.8999999761581421,
            -0.699999988079071, 0.699999988079071, 0.10000000149011612, -0.10000000149011612, 0.6000000238418579, -1, -0.8600000143051147, -0.5, 0,
        ],
        presets: [16, -1, 15, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 1795162112,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 0,
        hairColor: 5922665,
        headpartIds: [333345, 333071, 937528, 961141, 961133, 262695, 937384],
        headTextureSetId: 333383,
        options: [
            0.10000000149011612, 0, -0.20000000298023224, -0.30000001192092896, 0, 0.30000001192092896, -0.10000000149011612, 0.5,
            -0.20000000298023224, -0.30000001192092896, -0.800000011920929, 1, -0.10000000149011612, -0.10000000149011612, 0.5, 0.20000000298023224,
            0.5199999809265137, -0.5, 0,
        ],
        presets: [14, -1, 4, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 50,
        hairColor: 3154721,
        headpartIds: [333345, 333071, 967090, 1054701, 262672, 937361],
        headTextureSetId: 333383,
        options: [
            -0.5, -0.4000000059604645, -0.10000000149011612, -0.5, -1, 0.20000000298023224, -0.20000000298023224, -0.4000000059604645,
            0.4000000059604645, 0.10000000149011612, 0.30000001192092896, 0, 0, 0, 0.20000000298023224, 0.4000000059604645, -0.18000000715255737, 0,
            0,
        ],
        presets: [2, -1, 4, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -498071295,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 50,
        hairColor: 3090724,
        headpartIds: [333345, 333071, 937517, 332199, 332195, 262672, 937377],
        headTextureSetId: 333383,
        options: [
            0, 0, -1, -0.6000000238418579, 0, 0, -0.5, -0.6000000238418579, 0.10000000149011612, -0.30000001192092896, -0.699999988079071,
            0.699999988079071, 1, -0.10000000149011612, 0.20000000298023224, -0.20000000298023224, -0.8600000143051147, -0.5, 0,
        ],
        presets: [12, -1, 16, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 0,
        hairColor: 4606805,
        headpartIds: [333345, 333071, 967090, 961140, 961132, 1016276, 937378],
        headTextureSetId: 991321,
        options: [
            -0.5, 0.10000000149011612, -1, -1, 1, -1, -0.4000000059604645, -0.8999999761581421, 0.10000000149011612, -1, -0.699999988079071,
            0.699999988079071, 1, -0.8999999761581421, 0.6000000238418579, -1, -1, -0.5, 0,
        ],
        presets: [15, -1, 13, 9],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 1795162112,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 60.000003814697266,
        hairColor: 1053202,
        headpartIds: [333345, 333071, 967090, 331954, 262664, 937377],
        headTextureSetId: 333383,
        options: [
            -0.5, -1, -0.8999999761581421, -0.4000000059604645, 1, -1, -0.4000000059604645, -1, -0.30000001192092896, -0.4000000059604645,
            -0.20000000298023224, 0.8999999761581421, 0.30000001192092896, 0.5, 0.6000000238418579, -0.5, 0.6000000238418579, -0.5, 0,
        ],
        presets: [16, -1, 20, 6],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 1745814592,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 1795162112,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 1,
        hairColor: 3749672,
        headpartIds: [333345, 333071, 967090, 331955, 262693, 937375],
        headTextureSetId: 333383,
        options: [
            -0.5, 0.30000001192092896, -1, -0.4000000059604645, 0, -0.20000000298023224, -0.10000000149011612, -0.4000000059604645,
            0.4000000059604645, -0.10000000149011612, 0, 0, 1, -1, 0, 0, 0.3199999928474426, 0, 0,
        ],
        presets: [5, -1, 12, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 50,
        hairColor: 6051920,
        headpartIds: [333345, 333071, 937520, 332102, 331962, 262673, 937380],
        headTextureSetId: 991319,
        options: [
            -0.4000000059604645, -0.10000000149011612, -0.4000000059604645, -0.30000001192092896, 0.20000000298023224, 0.20000000298023224, -0.5,
            -0.20000000298023224, -0.4000000059604645, 0.30000001192092896, -1, -0.30000001192092896, -0.20000000298023224, -0.5,
            -0.10000000149011612, 0.10000000149011612, -0.20000000298023224, 0.4000000059604645, 0,
        ],
        presets: [17, -1, 15, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1257829315,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1118393426,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadBreton_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: -1683401646,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 1745814592,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: -11128558,
            },
        ],
        skinColor: 14540253,
    },
];
exports.highElvesMalePresets = [
    {
        weight: 0,
        hairColor: 3749672,
        headpartIds: [333357, 333361, 546143, 331902, 331840, 1003529, 333351, 331903],
        headTextureSetId: 232032,
        options: [0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0.10000000149011612, 0, 0, 0],
        presets: [7, -1, 6, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6714027,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10063189,
    },
    {
        weight: 50,
        hairColor: 4606805,
        headpartIds: [333357, 333361, 546143, 331900, 331820, 1003529, 262544, 333064],
        headTextureSetId: 232032,
        options: [
            -0.7200000286102295, 0.10000002384185791, -0.5600000023841858, -0.2200000286102295, 0, 0, 0, 0.7200000286102295, 1, -0.6200000047683716,
            0, 0, 0.3200000524520874, 0, -0.5800000429153442, -0.699999988079071, -0.5199999809265137, 0, 0,
        ],
        presets: [13, -1, 18, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8556474,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8220742,
    },
    {
        weight: 0,
        hairColor: 3749672,
        headpartIds: [333357, 333361, 546143, 964599, 1003529, 262544, 815705],
        headTextureSetId: 232032,
        options: [
            0, -0.5, -1, -0.5, 0, 0.800000011920929, 0.10000000149011612, 0.30000001192092896, -0.699999988079071, -0.4000000059604645, 0, -1, -0.5,
            0, 0.5, -0.4000000059604645, 0, 0, 0,
        ],
        presets: [7, -1, 33, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9607875,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7169341,
    },
    {
        weight: 0,
        hairColor: 5328185,
        headpartIds: [333357, 333361, 546143, 989849, 989851, 95497, 262671, 815471],
        headTextureSetId: 991307,
        options: [
            -1, 1, -1, -1, 0, 0.5, 0.10000000149011612, 1, -1, 1, 0, -1, -0.4000000059604645, 0, 0.5, -0.4000000059604645, 0, 0.20000000298023224, 0,
        ],
        presets: [6, -1, 37, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5003670,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 11773546,
    },
    {
        weight: 50,
        hairColor: 3749672,
        headpartIds: [333357, 333361, 546143, 331901, 331834, 802006, 333351, 815370],
        headTextureSetId: 232032,
        options: [
            1, 0, -1, 1, 0, 0.5, 0.10000000149011612, 0, 0.5, -0.5, 0, -1, -0.4000000059604645, 0, 0.5, -0.4000000059604645, 0, 0.20000000298023224,
            0,
        ],
        presets: [4, -1, 8, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8624848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8152368,
    },
    {
        weight: 29.999998092651367,
        hairColor: 5922665,
        headpartIds: [333357, 333361, 546143, 989849, 989851, 1003529, 262544, 815469],
        headTextureSetId: 991307,
        options: [
            0, -0.8999999761581421, 0.30000001192092896, -0.30000001192092896, 0, 0, -0.4000000059604645, -0.30000001192092896, 0,
            -0.30000001192092896, -0.5, 0, -0.6000000238418579, 0.4000000059604645, 0.5, -0.4000000059604645, -0.5, 0, 0,
        ],
        presets: [5, -1, 28, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5003670,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 11773546,
    },
    {
        weight: 19.999998092651367,
        hairColor: 4338989,
        headpartIds: [333357, 333361, 546143, 967601, 967034, 1003529, 262671, 815470],
        headTextureSetId: 232032,
        options: [
            0, -0.699999988079071, -1, 0.800000011920929, 0, 0.5, 0.20000000298023224, 1, 0, -1, 0, 0, 0, 0, 0, -0.8999999761581421, 0,
            -0.20000000298023224, 0,
        ],
        presets: [8, -1, 31, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8556474,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -8555706,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8220742,
    },
    {
        weight: 0,
        hairColor: 5328185,
        headpartIds: [333357, 333361, 546143, 967604, 967264, 1003529, 262671, 815472],
        headTextureSetId: 991306,
        options: [
            0, -0.10000000149011612, -1, 0.800000011920929, 0, 0.5, 0.20000000298023224, 0.4000000059604645, 0.30000001192092896, -0.800000011920929,
            -1, 0.4000000059604645, 0.5, 0, 0, -0.8999999761581421, 0, -0.20000000298023224, 0,
        ],
        presets: [13, -1, 32, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9607875,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -8555706,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7169341,
    },
    {
        weight: 39.999996185302734,
        hairColor: 3685164,
        headpartIds: [333357, 333361, 546143, 967603, 967093, 1003529, 262544, 331903],
        headTextureSetId: 232032,
        options: [
            0, 0.4000000059604645, -1, 0.800000011920929, 0, 1, 1, -0.10000000149011612, -1, -1, -1, 0.4000000059604645, 0.4000000059604645, 0,
            0.30000001192092896, -1, -1, 0.4000000059604645, 0,
        ],
        presets: [18, -1, 37, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5003670,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -10394849,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 11773546,
    },
    {
        weight: 39.999996185302734,
        hairColor: 5328185,
        headpartIds: [333357, 333361, 546143, 967606, 967267, 1003529, 262544, 815470],
        headTextureSetId: 232032,
        options: [
            -0.30000001192092896, 0.20000000298023224, -1, 0.800000011920929, 0, 0.20000000298023224, 0.10000000149011612, 0, -1, -1, -1,
            0.4000000059604645, 0, 0, 0.30000001192092896, -1, -1, 0.4000000059604645, 0,
        ],
        presets: [8, -1, 32, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5003670,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -8555706,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 11773546,
    },
];
exports.highElvesFemalePresets = [
    {
        weight: 9.999999046325684,
        hairColor: 5328185,
        headpartIds: [333342, 333071, 967090, 576111, 576135, 333119, 937384],
        headTextureSetId: 232031,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [7, -1, 6, 7],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4736387,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12040829,
    },
    {
        weight: 50,
        hairColor: 5328185,
        headpartIds: [333342, 333071, 967090, 576132, 576140, 262665, 937340],
        headTextureSetId: 232031,
        options: [
            0.5, -0.6000000238418579, -0.5, 0.30000001192092896, 0, -1, 0, -0.5, -0.20000000298023224, 0, 0, 0, -0.30000001192092896, -0.5, 0, 0, 0,
            0.4000000059604645, 0,
        ],
        presets: [16, -1, 27, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3815020,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12962196,
    },
    {
        weight: 50,
        hairColor: 3749672,
        headpartIds: [333342, 333071, 967090, 576134, 576150, 262665, 937340],
        headTextureSetId: 232031,
        options: [
            -0.800000011920929, 0, -0.5, 0.30000001192092896, 0, 0, 0.5, 0.30000001192092896, -0.20000000298023224, 1, -0.5, 0, -0.30000001192092896,
            -0.5, 0.5, -1, 0, 0.4000000059604645, 0,
        ],
        presets: [13, -1, 26, 13],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6709139,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10068077,
    },
    {
        weight: 50,
        hairColor: 5922665,
        headpartIds: [333342, 333071, 967090, 576133, 576140, 262684, 937340],
        headTextureSetId: 232031,
        options: [
            0, 0, -0.5, 0.5, 0.4000000059604645, 0.5, 0, 0.30000001192092896, 0.20000000298023224, 1, 0, 0, 0.4000000059604645, 0, 0, -1, 0, 0, 0,
        ],
        presets: [9, -1, 7, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7041192,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9736024,
    },
    {
        weight: 29.999998092651367,
        hairColor: 5922665,
        headpartIds: [333342, 333071, 967090, 576131, 576137, 262665, 937340],
        headTextureSetId: 232031,
        options: [
            0.5, 0.30000001192092896, -1, 0.30000001192092896, -1, 0.5, -0.20000000298023224, 1, 0.20000000298023224, 0.10000000149011612,
            0.30000001192092896, 0, 0.4000000059604645, 0, 0, -1, 0, 0, 0,
        ],
        presets: [12, -1, 24, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8354472,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8422744,
    },
    {
        weight: 39.999996185302734,
        hairColor: 5328185,
        headpartIds: [333342, 333071, 967090, 576132, 576140, 262684, 937381],
        headTextureSetId: 232031,
        options: [
            -0.4000000059604645, -0.800000011920929, -0.30000001192092896, 0.699999988079071, 0, -1, -0.4000000059604645, -0.5, 0.4000000059604645,
            -0.800000011920929, 0.30000001192092896, 0, -0.30000001192092896, 0.10000000149011612, 0.5, 0.10000000149011612, 0, 0.4000000059604645, 0,
        ],
        presets: [17, -1, 28, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3815020,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1220344831,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12962196,
    },
    {
        weight: 50,
        hairColor: 4406574,
        headpartIds: [333342, 333071, 967090, 967622, 967612, 333119, 937381],
        headTextureSetId: 232031,
        options: [
            0, 0, 0, 0, 0, 0, 0.10000000149011612, -0.30000001192092896, -0.4000000059604645, -0.30000001192092896, 0, 0, -0.20000000298023224, -1,
            0.10000000149011612, -0.30000001192092896, -0.30000001192092896, 0, 0,
        ],
        presets: [7, -1, 24, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3815020,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12962196,
    },
    {
        weight: 9.999999046325684,
        hairColor: 1053202,
        headpartIds: [333342, 333071, 967090, 967622, 967612, 262665, 937381],
        headTextureSetId: 232031,
        options: [
            0, 0, 0, 0, 0, 0, 0.10000000149011612, -0.30000001192092896, -0.4000000059604645, -0.30000001192092896, 0, 0, -0.20000000298023224, -1,
            0.10000000149011612, -0.30000001192092896, -0.30000001192092896, 0, 0,
        ],
        presets: [7, -1, 24, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6709139,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10068077,
    },
    {
        weight: 50,
        hairColor: 3154721,
        headpartIds: [333342, 333071, 967090, 967625, 967615, 333119, 937377],
        headTextureSetId: 232031,
        options: [
            0.5, 0.30000001192092896, -1, 0.30000001192092896, -1, 0.5, -0.20000000298023224, 0.6000000238418579, 0.20000000298023224,
            -0.30000001192092896, 0.30000001192092896, 0, 1, 0, 0, -1, 0, 0, 0,
        ],
        presets: [12, -1, 28, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4736387,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12040829,
    },
    {
        weight: 50,
        hairColor: 3090724,
        headpartIds: [333342, 333071, 967090, 967623, 967613, 262684, 937380],
        headTextureSetId: 232031,
        options: [
            0, 0.5, -1, -0.10000000149011612, -1, 0.5, 0.20000000298023224, 0.4000000059604645, 0.20000000298023224, 0.30000001192092896,
            -0.699999988079071, 0, 1, -1, 0.30000001192092896, -1, 0.4000000059604645, 0, 0,
        ],
        presets: [8, -1, 24, 14],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4736387,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12040829,
    },
];
exports.forestElvesMalePresets = [
    {
        weight: 0,
        hairColor: 3090724,
        headpartIds: [333355, 333361, 546143, 964597, 964593, 1003529, 333350, 815471],
        headTextureSetId: 250539,
        options: [
            0.20000000298023224, 0.5, -0.5, -1, 0, 1, 1, 1, -1, -1, -1, 0, 0.30000001192092896, 0.4000000059604645, -0.30000001192092896, -0.5, 0,
            0.5, 0,
        ],
        presets: [10, -1, 33, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6979217,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9797999,
    },
    {
        weight: 19.999998092651367,
        hairColor: 1711132,
        headpartIds: [333355, 333361, 546143, 331899, 331811, 964589, 95498, 342295, 815705],
        headTextureSetId: 991316,
        options: [
            0.699999988079071, -1, 1, -1, 0, 1, 1, -0.20000000298023224, -1, 0, 0.5, 0.10000000149011612, -0.8999999761581421, 0.4000000059604645,
            -0.6000000238418579, 0.5, 1, 1, 0,
        ],
        presets: [12, -1, 37, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8295590,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13424870,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8481626,
    },
    {
        weight: 19.999998092651367,
        hairColor: 3090724,
        headpartIds: [333355, 333361, 546143, 331860, 331809, 964591, 843149, 842621, 342295, 815705],
        headTextureSetId: 991316,
        options: [
            0.699999988079071, -1, 1, -1, 0, 1, 1, 0.30000001192092896, -1, 0, 0.5, 0.10000000149011612, -0.8999999761581421, 0.4000000059604645,
            -0.6000000238418579, 0.5, 0, 1, 0,
        ],
        presets: [8, -1, 6, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7902645,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8874571,
    },
    {
        weight: 19.999998092651367,
        hairColor: 3090724,
        headpartIds: [333355, 333361, 546143, 964597, 964593, 802014, 342305, 331903],
        headTextureSetId: 991314,
        options: [
            0.699999988079071, -1, 1, -1, 0, 1, 1, -0.20000000298023224, 0.4000000059604645, 0, 0.5, 0.10000000149011612, -1, 0.800000011920929,
            0.4000000059604645, 0.6000000238418579, -0.5, -0.5, 0,
        ],
        presets: [7, -1, 8, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8824000,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13424870,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7953216,
    },
    {
        weight: 19.999998092651367,
        hairColor: 3090724,
        headpartIds: [333355, 333361, 546143, 331902, 331840, 95494, 342305, 331904],
        headTextureSetId: 991314,
        options: [
            0.699999988079071, -1, 1, -1, 0, 1, 1, 0.5, 0.4000000059604645, -1, 0.30000001192092896, 0.10000000149011612, -1, 0.800000011920929,
            0.4000000059604645, 0.6000000238418579, -0.5, 0, 0,
        ],
        presets: [7, -1, 35, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9480642,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7296574,
    },
    {
        weight: 39.999996185302734,
        hairColor: 3154721,
        headpartIds: [333355, 333361, 546143, 967028, 967031, 331956, 333350, 815370],
        headTextureSetId: 991316,
        options: [
            -0.30000001192092896, -1, 0.30000001192092896, 0, 0, 0, -0.6000000238418579, -0.30000001192092896, 0.4000000059604645,
            -0.6000000238418579, 0.6000000238418579, 0.10000000149011612, -0.800000011920929, 0.4000000059604645, 0.30000001192092896,
            0.20000000298023224, 0.20000000298023224, -0.4000000059604645, 0,
        ],
        presets: [12, -1, 17, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6979217,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13424870,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1665336321,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9797999,
    },
    {
        weight: 39.999996185302734,
        hairColor: 2565667,
        headpartIds: [333355, 333361, 546143, 331900, 331820, 95496, 148062, 815471],
        headTextureSetId: 250539,
        options: [
            0.5, 0.5, -0.5, -1, 0, 1, 1, 0.699999988079071, -1, -1, -1, 0, 0.30000001192092896, 0.4000000059604645, -0.30000001192092896, -0.5,
            0.20000000298023224, 0.5, 0,
        ],
        presets: [10, -1, 26, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7902645,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 0,
            },
        ],
        skinColor: 8874571,
    },
    {
        weight: 9.999999046325684,
        hairColor: 2565667,
        headpartIds: [333355, 333361, 546143, 967606, 967267, 1003529, 342305, 333064],
        headTextureSetId: 250539,
        options: [
            -0.6000000238418579, -0.20000000298023224, -0.5, -1, 0, 1, 1, 0.6000000238418579, -1, -1, -1, 0, 0.20000000298023224, 0.4000000059604645,
            -0.800000011920929, -1, -0.20000000298023224, -0.30000001192092896, 0,
        ],
        presets: [16, -1, 34, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9480642,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13424870,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7296574,
    },
    {
        weight: 0,
        hairColor: 4606805,
        headpartIds: [333355, 333361, 546143, 967604, 967264, 802021, 333350, 815471],
        headTextureSetId: 250539,
        options: [
            0, -0.8999999761581421, -1, 0.20000000298023224, -0.8999999761581421, 1, -0.30000001192092896, -0.10000000149011612, -0.699999988079071,
            -1, 1, 1, 0.30000001192092896, -1, -0.800000011920929, -1, -0.30000001192092896, -0.30000001192092896, 0,
        ],
        presets: [1, -1, 37, 7],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6979217,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9797999,
    },
    {
        weight: 30.000001907348633,
        hairColor: 3154721,
        headpartIds: [333355, 333361, 937496, 967601, 967034, 802018, 342303, 815470],
        headTextureSetId: 250539,
        options: [
            -0.699999988079071, 0.20000000298023224, -1, -1, -0.8999999761581421, 1, 0.5, 0.6000000238418579, 0.6000000238418579, 0.30000001192092896,
            -0.6000000238418579, -0.4000000059604645, 0.30000001192092896, -1, 0.20000000298023224, -1, -0.30000001192092896, -0.30000001192092896, 0,
        ],
        presets: [9, -1, 8, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7902645,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: -16777216,
            },
        ],
        skinColor: 8874571,
    },
];
exports.forestElvesFemalePresets = [
    {
        weight: 50,
        hairColor: 4338989,
        headpartIds: [333343, 333071, 937517, 979739, 979747, 979743, 333072, 937340],
        headTextureSetId: 250540,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [8, -1, 8, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6644841,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10132375,
    },
    {
        weight: 50,
        hairColor: 4338989,
        headpartIds: [333343, 333071, 937547, 576111, 576135, 342316, 937340],
        headTextureSetId: 250540,
        options: [-0.5, -1, 0, 0.6000000238418579, 0, 0, 0, -0.699999988079071, 0.20000000298023224, -0.5, 0.5, 0, -1, 0, 0, 0.5, 0, 0, 0],
        presets: [7, -1, 27, 13],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6910596,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9866620,
    },
    {
        weight: 50,
        hairColor: 3090724,
        headpartIds: [333343, 333071, 967090, 979735, 979745, 979741, 333072, 937340],
        headTextureSetId: 250540,
        options: [0, -1, 0, 0.5, 0, 0, 0.5, -1, 0, -0.6000000238418579, 0.5, 0, -0.800000011920929, -0.5, 0.5, 0, 0, 0, 0],
        presets: [9, -1, 24, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8094104,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8683112,
    },
    {
        weight: 50,
        hairColor: 3154721,
        headpartIds: [333343, 333071, 967090, 576133, 576140, 342316, 937340],
        headTextureSetId: 250540,
        options: [-1, -0.5, -1, 0, 0, -0.5, 0, 0, 0, -0.6000000238418579, 0.5, 0, 0, -0.4000000059604645, -0.5, -1, 0.5, -1, 0],
        presets: [10, -1, 8, 9],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9147050,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1051719423,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7630166,
    },
    {
        weight: 50,
        hairColor: 3154721,
        headpartIds: [333343, 333071, 967090, 576134, 576150, 342361, 937340],
        headTextureSetId: 250540,
        options: [1, 0.5, -1, -0.5, 1, -0.5, 0, -1, 0, 1, 0.5, 0, 0, -0.4000000059604645, -0.5, -1, 0.5, -1, 0],
        presets: [8, -1, 17, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9278124,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7499092,
    },
    {
        weight: 39.999996185302734,
        hairColor: 1053202,
        headpartIds: [333343, 333071, 967090, 979735, 979745, 979741, 342316, 937376],
        headTextureSetId: 250540,
        options: [
            -0.30000001192092896, -0.5, -0.4000000059604645, 0.699999988079071, -0.699999988079071, 0.6000000238418579, 0.20000000298023224, 0,
            0.8999999761581421, -0.4000000059604645, 0.10000000149011612, 0, -0.4000000059604645, 0.20000000298023224, 0.20000000298023224, -0.5,
            -0.699999988079071, -0.20000000298023224, 0,
        ],
        presets: [9, -1, 6, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6644841,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1257829315,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1220344831,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: -1941765119,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10132375,
    },
    {
        weight: 0,
        hairColor: 4338989,
        headpartIds: [333343, 333071, 967090, 967625, 967615, 333072, 937381],
        headTextureSetId: 250540,
        options: [
            -0.10000000149011612, 0.6000000238418579, -1, 0.30000001192092896, 1, -0.5, 0, 0.6000000238418579, 0.800000011920929, 0.10000000149011612,
            0.5, 0, 0.4000000059604645, -0.4000000059604645, -0.5, -1, 0.5, -1, 0,
        ],
        presets: [8, -1, 27, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6644841,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 10132375,
    },
    {
        weight: 70,
        hairColor: 1315864,
        headpartIds: [333343, 333071, 967090, 967622, 967612, 333072, 937378],
        headTextureSetId: 250540,
        options: [
            -0.10000000149011612, 0.6000000238418579, -1, 1, 1, 0.30000001192092896, 0, 1, 0.800000011920929, -0.4000000059604645, 0.8999999761581421,
            0, 1, -0.4000000059604645, -0.10000000149011612, -0.4000000059604645, -0.4000000059604645, -1, 0,
        ],
        presets: [8, -1, 24, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8094104,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 8683112,
    },
    {
        weight: 0,
        hairColor: 3154721,
        headpartIds: [333343, 333071, 967090, 967623, 967613, 342316, 937378],
        headTextureSetId: 250540,
        options: [
            -0.10000000149011612, -1, -1, 0.6000000238418579, -0.4000000059604645, 0.10000000149011612, 0.8999999761581421, 0.10000000149011612,
            0.800000011920929, -0.8999999761581421, 0.8999999761581421, 0, -0.6000000238418579, -0.4000000059604645, 0.800000011920929,
            0.20000000298023224, 0.10000000149011612, -1, 0,
        ],
        presets: [8, -1, 25, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8094104,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: -16777216,
            },
        ],
        skinColor: 8683112,
    },
    {
        weight: 19.999998092651367,
        hairColor: 4406574,
        headpartIds: [333343, 333071, 967090, 967627, 967617, 342361, 937381],
        headTextureSetId: 250540,
        options: [
            -0.10000000149011612, -0.4000000059604645, -1, -0.10000000149011612, -0.4000000059604645, -0.800000011920929, -0.5, -0.6000000238418579,
            -0.30000001192092896, -1, 0.20000000298023224, 0, 0.5, -0.4000000059604645, -0.20000000298023224, -0.8999999761581421, 0.800000011920929,
            0.800000011920929, 0,
        ],
        presets: [2, -1, 6, 14],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9278124,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 0,
            },
        ],
        skinColor: 7499092,
    },
];
exports.imperialMalePresets = [
    {
        weight: 39.999996185302734,
        hairColor: 1315864,
        headpartIds: [333360, 333361, 546143, 332816, 332817, 95497, 148047, 815370],
        headTextureSetId: 333382,
        options: [
            0, 0, -1, 0.3200000524520874, 0, -0.3999999761581421, -0.3999999761581421, 0.559999942779541, -0.3999999761581421, -0.8400000333786011,
            -1, 0.2200000286102295, -0.2200000286102295, 0, 0.7000000476837158, 0.440000057220459, 0.559999942779541, -0.24000000953674316, 0,
        ],
        presets: [5, -1, 14, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8229541,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8547675,
    },
    {
        weight: 4.999999523162842,
        hairColor: 1711132,
        headpartIds: [333360, 333361, 546143, 332805, 802008, 333362, 331904],
        headTextureSetId: 333382,
        options: [
            -0.7400000095367432, 0.1799999475479126, -0.8400000333786011, -0.6000000238418579, 0.5199999809265137, 0.6000000238418579,
            0.24000000953674316, 0, 0.5800000429153442, -0.5600000023841858, 0.24000000953674316, 0.3999999761581421, 0.10000002384185791, -1,
            0.7999999523162842, 0.6599999666213989, 0.3799999952316284, -0.48000001907348633, 0,
        ],
        presets: [20, -1, 1, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 100,
        hairColor: 1315864,
        headpartIds: [333360, 333361, 937386, 332818, 332819, 843121, 842621, 948973, 815470],
        headTextureSetId: 333382,
        options: [
            -0.699999988079071, 0.3400000333786011, -0.800000011920929, 0.6000000238418579, -1, 0.3400000333786011, 0.5399999618530273,
            0.41999995708465576, -0.13999998569488525, -1, -0.3399999737739563, 0.7999999523162842, 0, 0, 0.3999999761581421, 0.36000001430511475,
            0.5, -0.24000000953674316, 0,
        ],
        presets: [3, -1, 3, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9412266,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7364950,
    },
    {
        weight: 25,
        hairColor: 1315864,
        headpartIds: [333360, 333361, 937496, 916480, 916274, 802006, 948973, 815705],
        headTextureSetId: 853798,
        options: [
            0.3799999952316284, 0.1799999475479126, 0.5399999618530273, -1, 0.5199999809265137, -1, -1, 0.039999961853027344, 0.1799999475479126,
            -0.30000001192092896, 0.41999995708465576, 0, -1, -0.18000000715255737, 1, 1, -1, -0.6000000238418579, 0,
        ],
        presets: [10, -1, 17, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8229541,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8547675,
    },
    {
        weight: 19.999998092651367,
        hairColor: 2830643,
        headpartIds: [333360, 333361, 546143, 630112, 842942, 842944, 333362, 815469],
        headTextureSetId: 853797,
        options: [
            -1, 1, -0.5600000023841858, -0.5600000023841858, 0, 0.559999942779541, 0.440000057220459, 0.3400000333786011, -0.24000000953674316,
            -0.5600000023841858, -0.19999998807907104, 0.20000004768371582, 1, -0.6399999856948853, 0.5, -0.9200000166893005, 0.3999999761581421,
            -0.3199999928474426, 0,
        ],
        presets: [10, -1, 18, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1661928512,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 70,
        hairColor: 1053202,
        headpartIds: [333360, 333361, 546143, 332805, 95496, 148060, 815705],
        headTextureSetId: 333382,
        options: [
            -0.10000000149011612, -0.25999999046325684, -0.20000000298023224, 0.699999988079071, -1, -0.6000000238418579, 0.699999988079071,
            0.2199999988079071, 0.46000000834465027, -1, 0.5600000023841858, 0.800000011920929, 0.5, 0.20000000298023224, 0.699999988079071,
            0.36000001430511475, 0.5, -0.699999988079071, 0,
        ],
        presets: [5, -1, 17, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10398903,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6378313,
    },
    {
        weight: 39.999996185302734,
        hairColor: 1711132,
        headpartIds: [333360, 333361, 937497, 332806, 332807, 863938, 863900, 148047, 815395],
        headTextureSetId: 853797,
        options: [
            -0.10000000149011612, -0.6600000262260437, -0.5, 1, -1, 0.20000000298023224, 0.10000000149011612, 0.6200000047683716,
            -0.30000001192092896, -1, -0.6399999856948853, 1, 0, 0.20000000298023224, 0, 0.6600000262260437, -0.20000000298023224, -0.5, 0,
        ],
        presets: [10, -1, 16, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 816403538,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 100,
        hairColor: 1315864,
        headpartIds: [333360, 333361, 546143, 630142, 630147, 842942, 842944, 333362, 331904],
        headTextureSetId: 333382,
        options: [
            0, 0, -1, 1, 0, 0.30000001192092896, 0.10000000149011612, -0.03999999910593033, -0.4000000059604645, -1, -0.10000000149011612, 1,
            -0.3199999928474426, 0, 0.699999988079071, 0.4399999976158142, 0.5600000023841858, -0.23999999463558197, 0,
        ],
        presets: [5, -1, 15, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8229541,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8547675,
    },
    {
        weight: 0,
        hairColor: 4606805,
        headpartIds: [333360, 333361, 546143, 332810, 332811, 863906, 863874, 948972, 815395],
        headTextureSetId: 853798,
        options: [
            0, 0.30000001192092896, -0.10000000149011612, -0.4000000059604645, 0, 1, 1, -0.03999999910593033, 0.30000001192092896,
            -0.10000000149011612, -0.10000000149011612, 1, 0.8799999952316284, -0.5, 0.6000000238418579, -0.5600000023841858, -0.6399999856948853,
            -0.23999999463558197, 0,
        ],
        presets: [1, -1, 9, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8229541,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8547675,
    },
    {
        weight: 29.999998092651367,
        hairColor: 1053202,
        headpartIds: [333360, 333361, 651426, 916484, 916418, 802008, 333362, 815469],
        headTextureSetId: 853796,
        options: [
            -1, 0.30000001192092896, -1, -0.10000000149011612, 0, 1, 1, -0.14000000059604645, 0.5, -1, -0.5, 1, 0.8799999952316284,
            -0.30000001192092896, 0.6000000238418579, -0.5600000023841858, -0.23999999463558197, -0.23999999463558197, 0,
        ],
        presets: [9, -1, 11, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
];
exports.imperialFemalePresets = [
    {
        weight: 9.999999046325684,
        hairColor: 1315864,
        headpartIds: [333341, 333071, 967090, 961137, 961129, 262693, 937380],
        headTextureSetId: 333384,
        options: [0, 0, 0, 0, 0, 0, 0, -0.3399999737739563, 0, -0.30000001192092896, 0, 0, 0.12000000476837158, 0, 0, 0, 0, 0, 0],
        presets: [3, -1, 3, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -2075982847,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 100,
        hairColor: 1315864,
        headpartIds: [333341, 333071, 967090, 332199, 332195, 262693, 937362],
        headTextureSetId: 333384,
        options: [
            -0.30000001192092896, -0.30000001192092896, -0.4000000059604645, 0.10000000149011612, -0.8999999761581421, 0.4000000059604645,
            0.30000001192092896, -0.10000000149011612, 0.4000000059604645, -0.4000000059604645, 0.5, 0.5, -0.10000000149011612, 0.20000000298023224,
            -0.20000000298023224, 0.20000000298023224, -0.07999999821186066, 0, 0,
        ],
        presets: [3, -1, 13, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -6583420,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1118393426,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1220344831,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: -1941765119,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10193796,
    },
    {
        weight: 70,
        hairColor: 1053202,
        headpartIds: [333341, 333071, 937547, 332036, 331959, 262693, 937362],
        headTextureSetId: 333384,
        options: [
            0.5, -0.8999999761581421, 0.20000000298023224, -0.30000001192092896, 0, -0.4000000059604645, -0.30000001192092896, -0.5,
            0.30000001192092896, -0.4000000059604645, -0.4000000059604645, 0.5, 0, 0.30000001192092896, -0.800000011920929, 0.5, 0.019999999552965164,
            -0.699999988079071, 0,
        ],
        presets: [16, -1, 13, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 1,
        hairColor: 1053202,
        headpartIds: [333341, 333071, 967090, 332106, 331971, 469275, 937352],
        headTextureSetId: 333384,
        options: [
            0.30000001192092896, -0.699999988079071, -0.6000000238418579, 0, -0.699999988079071, 0.6000000238418579, -0.699999988079071,
            -0.800000011920929, 0.039999961853027344, 0, -0.6000000238418579, -0.10000000149011612, 0.5, -0.5, -0.699999988079071, -0.699999988079071,
            -0.20000000298023224, -0.6000000238418579, 0,
        ],
        presets: [16, -1, 18, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3224116,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1257829315,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: -1683401646,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1358492611,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13553100,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333341, 333071, 967090, 961141, 961133, 333128, 937377],
        headTextureSetId: 333384,
        options: [
            -0.30000001192092896, -0.30000001192092896, 0, 0, 0, 0.20000000298023224, 0, -0.699999988079071, -0.30000001192092896, 0.5,
            -0.10000000149011612, 0, 0, 0.30000001192092896, -0.10000000149011612, 0.10000000149011612, -0.5799999833106995, -0.20000000298023224, 0,
        ],
        presets: [3, -1, 13, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7376283,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 9400933,
    },
    {
        weight: 90,
        hairColor: 2565667,
        headpartIds: [333341, 333071, 967090, 332046, 331961, 262673, 937384],
        headTextureSetId: 333384,
        options: [
            -0.6000000238418579, -0.30000001192092896, -1, -0.699999988079071, 0.30000001192092896, -0.30000001192092896, -0.30000001192092896,
            -0.6000000238418579, 0.30000001192092896, -0.6000000238418579, 0.20000000298023224, 0.5, 1, -0.30000001192092896, -0.20000000298023224,
            -0.800000011920929, 0.10000000149011612, -0.20000000298023224, 0,
        ],
        presets: [15, -1, 16, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 1745814592,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 90,
        hairColor: 1315864,
        headpartIds: [333341, 333071, 937553, 937538, 961141, 961133, 262693, 937340],
        headTextureSetId: 333384,
        options: [
            -0.6000000238418579, 0.10000000149011612, -0.8999999761581421, -0.30000001192092896, 0.30000001192092896, -0.30000001192092896,
            -0.10000000149011612, -1, -0.20000000298023224, -0.4000000059604645, -0.20000000298023224, 0.699999988079071, 0.6000000238418579,
            0.30000001192092896, -0.6000000238418579, -0.4000000059604645, -0.4000000059604645, -0.20000000298023224, 0,
        ],
        presets: [17, -1, 14, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7376283,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 1745814592,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: -13688813,
            },
        ],
        skinColor: 9400933,
    },
    {
        weight: 0,
        hairColor: 3154721,
        headpartIds: [333341, 333071, 967090, 961138, 961130, 469274, 937377],
        headTextureSetId: 333384,
        options: [
            -0.6000000238418579, -0.4000000059604645, -1, 0.30000001192092896, 0.30000001192092896, -0.30000001192092896, -0.10000000149011612,
            -0.4000000059604645, 0.4000000059604645, -0.4000000059604645, -0.20000000298023224, 0.699999988079071, 0.6000000238418579, 0,
            -0.6000000238418579, -0.4000000059604645, 0.30000001192092896, -0.20000000298023224, 0,
        ],
        presets: [15, -1, 12, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5464169,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 1745814592,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 3088403,
            },
        ],
        skinColor: 11313047,
    },
    {
        weight: 70,
        hairColor: 3090724,
        headpartIds: [333341, 333071, 967090, 332151, 332021, 469271, 937380],
        headTextureSetId: 333384,
        options: [
            -0.6000000238418579, -0.4000000059604645, -1, -0.6000000238418579, -0.5, 0.4000000059604645, 0.30000001192092896, 0, 0,
            -0.800000011920929, -0.8999999761581421, 1, 0.699999988079071, 0, -0.6000000238418579, -0.4000000059604645, 0.30000001192092896,
            -0.20000000298023224, 0,
        ],
        presets: [15, -1, 2, 9],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5464169,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -749729535,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 3088403,
            },
        ],
        skinColor: 11313047,
    },
    {
        weight: 1,
        hairColor: 5922665,
        headpartIds: [333341, 333071, 967090, 961140, 961132, 469275, 937381],
        headTextureSetId: 991333,
        options: [
            -0.6000000238418579, -0.4000000059604645, -1, -1, -0.5, -1, -0.5, -0.8999999761581421, -0.10000000149011612, -0.800000011920929,
            -0.10000000149011612, 0.4000000059604645, 0.30000001192092896, 0, -0.6000000238418579, -0.5, -1, 0.4000000059604645, 0,
        ],
        presets: [15, -1, 16, 1],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadImperial_Lips.dds',
                type: 1,
                argb: -967833343,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 3088403,
            },
        ],
        skinColor: 14540253,
    },
];
exports.nordMalePresets = [
    {
        weight: 75,
        hairColor: 6051920,
        headpartIds: [333359, 333361, 546143, 333063, 333061, 331956, 148036, 333064],
        headTextureSetId: 242977,
        options: [
            0.05999999865889549, 0.10000000149011612, -1, 0.07999999821186066, 0.019999999552965164, 0.03999999910593033, 0.5, 0.5,
            -0.05999999865889549, -1, 0, -0.23999999463558197, 0.6600000262260437, 0.1599999964237213, -0.3400000035762787, -0.4000000059604645,
            0.18000000715255737, -0.6399999856948853, 0,
        ],
        presets: [1, -1, 1, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 50,
        hairColor: 6051920,
        headpartIds: [333359, 333361, 937427, 332803, 863920, 863881, 148048, 815469],
        headTextureSetId: 853789,
        options: [
            0, 0.7000000476837158, -0.7200000286102295, 0.48000001907348633, 0, 0.6599999666213989, 1, 1, 0.1799999475479126, -1, 0.3999999761581421,
            0, 0.6599999666213989, 0.3200000524520874, 0.7400000095367432, 0.3200000524520874, 0.13999998569488525, -0.699999988079071, 0,
        ],
        presets: [12, -1, 16, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 85,
        hairColor: 3154721,
        headpartIds: [333359, 333361, 937495, 916484, 916418, 95496, 148036, 331904],
        headTextureSetId: 471642,
        options: [
            -0.14000000059604645, 0, -0.3199999928474426, -0.30000001192092896, -0.5600000023841858, 0.6200000047683716, -0.10000000149011612, 1,
            -0.10000000149011612, -1, -0.800000011920929, 0.36000001430511475, 0.6600000262260437, 0.1599999964237213, 0.6600000262260437, 0,
            0.2800000011920929, -0.4399999976158142, 0,
        ],
        presets: [15, -1, 16, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 59.999996185302734,
        hairColor: 2830643,
        headpartIds: [333359, 333361, 937427, 630144, 630149, 853348, 853350, 651407, 651406, 815471],
        headTextureSetId: 853790,
        options: [
            0.36000001430511475, -0.5199999809265137, 1, -0.19999998807907104, 0.6399999856948853, 1, 1, -0.2799999713897705, -0.12000000476837158,
            -1, 0.440000057220459, 0.6200000047683716, -0.9399999976158142, -1, 1, 1, 0.6000000238418579, 0.25999999046325684, 0,
        ],
        presets: [10, -1, 17, 9],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 816403538,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 15.000000953674316,
        hairColor: 3154721,
        headpartIds: [333359, 333361, 937516, 937418, 332818, 332819, 863934, 863890, 948973, 815394],
        headTextureSetId: 853789,
        options: [
            -1, 1, -0.18000000715255737, -0.3799999952316284, 0.3199999928474426, -0.20000000298023224, -0.20000000298023224, 1, 0.1599999964237213,
            -0.9200000166893005, 0.3799999952316284, 1, 0.5400000214576721, -1, 0.46000000834465027, 0.47999998927116394, 0, -1, 0,
        ],
        presets: [9, -1, 15, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -5798278,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 10978938,
    },
    {
        weight: 90,
        hairColor: 4606805,
        headpartIds: [333359, 333361, 937513, 937499, 332803, 842615, 842617, 148037, 815470],
        headTextureSetId: 853789,
        options: [
            0.10000000149011612, 0, 0.6800000071525574, -0.4000000059604645, 0.3400000035762787, 0.6000000238418579, 0.30000001192092896,
            -0.10000000149011612, -0.30000001192092896, -1, 0.20000000298023224, 0.5, -0.14000000059604645, 0.5600000023841858, -0.30000001192092896,
            -0.10000000149011612, 0, -0.20000000298023224, 0,
        ],
        presets: [14, -1, 16, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 816403538,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 0,
        hairColor: 5922665,
        headpartIds: [333359, 333361, 546143, 916480, 916274, 853348, 853350, 148036, 815471],
        headTextureSetId: 471643,
        options: [
            -1, 0.10000000149011612, 0.20000000298023224, -1, -0.6600000262260437, 1, 0.4000000059604645, -0.10000000149011612, -0.05999999865889549,
            -1, 1, 0.7599999904632568, 1, 0.05999999865889549, -0.3400000035762787, 0, -1, 0.6000000238418579, 0,
        ],
        presets: [19, -1, 5, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12033169,
    },
    {
        weight: 75,
        hairColor: 3749672,
        headpartIds: [333359, 333361, 546143, 916272, 916273, 863906, 863874, 148060, 331904],
        headTextureSetId: 471641,
        options: [
            0.6600000262260437, 0.5600000023841858, 0.7799999713897705, -0.6800000071525574, -0.6600000262260437, 0.3199999928474426, 1, 1,
            -0.7599999904632568, -0.5400000214576721, 0, 0.7599999904632568, 0.6600000262260437, 0.6600000262260437, -0.3400000035762787, 0,
            0.2800000011920929, -0.6399999856948853, 0,
        ],
        presets: [18, -1, 14, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 2135951617,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13021352,
    },
    {
        weight: 100,
        hairColor: 4606805,
        headpartIds: [333359, 333361, 937495, 916486, 916479, 863938, 863900, 1011590, 148024, 331903],
        headTextureSetId: 853789,
        options: [
            0.05999999865889549, 0.10000000149011612, 0.07999999821186066, 0.20000000298023224, 0.03999999910593033, 0.019999999552965164, 0.5, 0.5,
            0.20000000298023224, -1, 0, -0.23999999463558197, 0.1599999964237213, 0.1599999964237213, 1, 0.6000000238418579, -0.41999998688697815,
            -0.6399999856948853, 0,
        ],
        presets: [5, -1, 16, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -3755864,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 816403538,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 13021352,
    },
    {
        weight: 39.999996185302734,
        hairColor: 2565667,
        headpartIds: [333359, 333361, 546143, 916484, 916418, 1003529, 148048, 815469],
        headTextureSetId: 242977,
        options: [
            -0.10000000149011612, 0.5, -0.800000011920929, -0.800000011920929, -0.6600000262260437, 1, 0.4000000059604645, 0.5, -0.5600000023841858,
            -1, 0.4000000059604645, 0.8600000143051147, 0.4000000059604645, 0.05999999865889549, -0.3400000035762787, -0.5, 0, -0.30000001192092896,
            0,
        ],
        presets: [17, -1, 14, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4744047,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 1661928512,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                type: 0,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1090519040,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 3088403,
            },
        ],
        skinColor: 12033169,
    },
];
exports.nordFemalePresets = [
    {
        weight: 50,
        hairColor: 6051920,
        headpartIds: [333347, 333071, 967090, 332146, 331984, 262696, 937380],
        headTextureSetId: 242978,
        options: [
            -0.20000000298023224, 0.30000001192092896, 0, 0, 0.30000001192092896, 0, 0.20000000298023224, -0.5, 0, -0.6000000238418579, 0, 0,
            -0.10000000149011612, -1, 0, 0, 0, 0, 0,
        ],
        presets: [3, -1, 9, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 59.999996185302734,
        hairColor: 3154721,
        headpartIds: [333347, 333071, 967090, 332104, 331963, 469276, 937384],
        headTextureSetId: 242978,
        options: [
            0.10000000149011612, -0.30000001192092896, -0.4000000059604645, 0.6000000238418579, 0, 0.30000001192092896, 0.20000000298023224,
            0.10000000149011612, 0.10000000149011612, -0.30000001192092896, 0.30000001192092896, 0.5, 0, 0, 0.699999988079071, 0.30000001192092896, 0,
            -0.4000000059604645, 0,
        ],
        presets: [2, -1, 4, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 807480146,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 50,
        hairColor: 5328185,
        headpartIds: [333347, 333071, 967090, 961137, 961129, 262696, 937352],
        headTextureSetId: 242978,
        options: [
            0.5, -0.4000000059604645, 0, 0.8999999761581421, 0, 0.10000000149011612, 0.10000000149011612, -0.8999999761581421, -0.10000000149011612,
            -0.30000001192092896, -0.699999988079071, 0.6000000238418579, 0.20000000298023224, -0.5, 0.699999988079071, 0.699999988079071, 0.5,
            -0.6000000238418579, 0,
        ],
        presets: [9, -1, 9, 14],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 807480146,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 0,
        hairColor: 4338989,
        headpartIds: [333347, 333071, 967090, 332146, 331984, 262692, 937376],
        headTextureSetId: 962467,
        options: [
            0.10000000149011612, 0.10000000149011612, -0.5, -0.5, 0.5, -0.30000001192092896, -0.20000000298023224, -0.4000000059604645,
            0.30000001192092896, -0.30000001192092896, -1, -0.8999999761581421, 0.20000000298023224, 1, 0, 0.10000000149011612, 0,
            -0.6000000238418579, 0,
        ],
        presets: [5, -1, 12, 13],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 807480146,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 75,
        hairColor: 4606805,
        headpartIds: [333347, 333071, 967090, 332106, 331971, 262695, 937384],
        headTextureSetId: 242978,
        options: [
            0.4000000059604645, 0.6000000238418579, -0.5, -0.5, 0.5, 0.20000000298023224, -0.5, 0, -0.30000001192092896, -0.5, 0,
            -0.10000000149011612, 0.800000011920929, 0, 0, 0.10000000149011612, -0.20000000298023224, -0.699999988079071, 0,
        ],
        presets: [8, -1, 14, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 807480146,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 59.999996185302734,
        hairColor: 3749672,
        headpartIds: [333347, 333071, 967090, 961141, 961133, 469275, 937377],
        headTextureSetId: 242978,
        options: [
            -0.20000000298023224, -0.4000000059604645, 0.10000000149011612, -0.10000000149011612, -0.5, 0.6000000238418579, 0.10000000149011612,
            -0.4599999785423279, -0.13999998569488525, 0.20000000298023224, 0, 0, 0.20000000298023224, 0.20000000298023224, 0.5, 0, -0.5, -0.5, 0,
        ],
        presets: [4, -1, 17, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 1745814592,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 30.000001907348633,
        hairColor: 5922665,
        headpartIds: [333347, 333071, 937547, 1054702, 1016277, 937378],
        headTextureSetId: 962468,
        options: [
            0, 0, 0, -0.699999988079071, 0, 0.4000000059604645, 0.5, -0.5, 0.6000000238418579, -0.699999988079071, -0.4000000059604645, 1,
            -0.10000000149011612, 0.30000001192092896, -0.4000000059604645, 0.20000000298023224, 0.10000000149011612, -0.4000000059604645, 0,
        ],
        presets: [12, -1, 10, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 60.000003814697266,
        hairColor: 4606805,
        headpartIds: [333347, 333071, 967090, 961137, 961129, 262692, 937377],
        headTextureSetId: 411099,
        options: [
            -0.6000000238418579, -0.30000001192092896, -0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.20000000298023224,
            0.20000000298023224, -0.30000001192092896, 0.5, 0.699999988079071, 0, 0, 0.10000000149011612, -0.6000000238418579, -0.20000000298023224,
            0.20000000298023224, 0.10000000149011612, -0.20000000298023224, 0,
        ],
        presets: [3, -1, 13, 13],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -4607062,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1257829315,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1118393426,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1213639598,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 12170154,
    },
    {
        weight: 9.999999046325684,
        hairColor: 3090724,
        headpartIds: [333347, 333071, 967090, 961141, 961133, 262672, 937377],
        headTextureSetId: 242978,
        options: [
            0.5, -0.20000000298023224, -0.20000000298023224, -0.20000000298023224, 0, 0.6000000238418579, 0.4000000059604645, -0.6000000238418579,
            0.4000000059604645, -0.30000001192092896, -0.699999988079071, 0.6000000238418579, 0.20000000298023224, -0.6000000238418579,
            -0.30000001192092896, 0.10000000149011612, 1, 0, 0,
        ],
        presets: [9, -1, 12, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 807480146,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -2075982847,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 1795162112,
            },
        ],
        skinColor: 14540253,
    },
    {
        weight: 9.999999046325684,
        hairColor: 6051920,
        headpartIds: [333347, 333071, 967090, 331954, 469276, 937381],
        headTextureSetId: 962469,
        options: [
            -0.30000001192092896, -0.4000000059604645, -1, -0.30000001192092896, 0, -0.20000000298023224, 1, -0.8999999761581421, 0.20000000298023224,
            -1, 0.10000000149011612, 0.20000000298023224, -0.20000000298023224, 0.4000000059604645, -0.30000001192092896, -0.4000000059604645,
            -0.20000000298023224, 0, 0,
        ],
        presets: [14, -1, 13, 15],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -2236963,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -2075982847,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 1795162112,
            },
        ],
        skinColor: 14540253,
    },
];
exports.orcMalePresets = [
    {
        weight: 80,
        hairColor: 1053202,
        headpartIds: [333354, 501248, 937516, 937418, 387060, 387055, 331957, 599306, 331904],
        headTextureSetId: 501247,
        options: [
            0.4, -0.4, 0.1, 1, 0, 1, 0.5, -0.4, 0.52, -1,
            -0.2, 0, 0.2, -0.5, 0.3, 1, 0.5, 0, 0,
        ],
        presets: [21, -1, 28, 26],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -12629959,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13289662,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4147257,
    },
    {
        weight: 100,
        hairColor: 1711132,
        headpartIds: [333354, 501248, 546143, 387096, 387102, 95498, 262667, 262666, 1078810, 1078802],
        headTextureSetId: 501247,
        options: [
            -0.6, 0.7, 0.34, 1, 0, 0.62, 0.66, -0.28,
            0.96, -0.52, -0.72, 0, 0.76, 0.56, 0.74, 0,
            0.42, -0.18, 0,
        ],
        presets: [27, -1, 22, 22],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11510702,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5266514,
    },
    {
        weight: 70,
        hairColor: 1711132,
        headpartIds: [333354, 501248, 546143, 386983, 386977, 386976, 146893, 599306, 333064],
        headTextureSetId: 501247,
        options: [
            0, 1, -0.38, -0.74, 0, -0.92, 0, -0.28, 0.92, -0.82,
            0, 0, 0, 0, -0.98, 0, 0, 0.9, 0,
        ],
        presets: [26, -1, 27, 28],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -14078172,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1471464415,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2699044,
    },
    {
        weight: 75,
        hairColor: 1711132,
        headpartIds: [333354, 501248, 937513, 937499, 387130, 387120, 387131, 863934, 863890, 262694, 815471],
        headTextureSetId: 853807,
        options: [
            1, 1, -1, 1, -1, 1, 1, -0.42, -0.28, -1, -1, 0.46, 1, -1, -1, -0.52, 0,
            -0.64, 0,
        ],
        presets: [30, -1, 29, 26],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11313075,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1471464415,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5464141,
    },
    {
        weight: 90,
        hairColor: 2830643,
        headpartIds: [333354, 501248, 546143, 386966, 386968, 853348, 853350, 262698, 815370],
        headTextureSetId: 853808,
        options: [
            -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -0.48, 0.26, -0.52, 1, 0, 0.52, 0,
        ],
        presets: [28, -1, 20, 24],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11313075,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13289662,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5464141,
    },
    {
        weight: 70,
        hairColor: 1053202,
        headpartIds: [333354, 501248, 546143, 267598, 267603, 843181, 842625, 262698, 815471],
        headTextureSetId: 501247,
        options: [
            0.42, -1, 0.1, 0.4, 0, 0.5, -0.7, 0.5, 1, -0.5, -0.1,
            0.6, -0.8, -0.2, 0.4, 0.5, -0.1, 0.6, 0,
        ],
        presets: [29, -1, 21, 25],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -12629959,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4147257,
    },
    {
        weight: 90,
        hairColor: 5922665,
        headpartIds: [333354, 501248, 546143, 267598, 267603, 1003529, 262697, 1078811, 1078804],
        headTextureSetId: 853807,
        options: [
            0.8, 0.2, 0.6, 0, 0.3, 0.2, -0.6,
            0.3, 1, 0.4, 1, -0.4, 0.32, 0.1, 0.48,
            0.3, 0, 0.52, 0,
        ],
        presets: [27, -1, 27, 28],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -14078172,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13289662,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2699044,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333354, 501248, 937497, 387096, 387102, 1003529, 262694, 1078803, 1078805],
        headTextureSetId: 853808,
        options: [
            0.62, -0.5, -0.9, 1, 0.3, 0.1, -1, 0.8, 0.52, -1,
            0.8, 0, -1, -0.5, 1, 0.8, 0.2, 0, 0,
        ],
        presets: [26, -1, 25, 22],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -14078172,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -13289662,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 0,
            },
        ],
        skinColor: 2699044,
    },
    {
        weight: 70,
        hairColor: 1053202,
        headpartIds: [333354, 501248, 546143, 387088, 387060, 387055, 801984, 599306, 1078810, 1078802],
        headTextureSetId: 853807,
        options: [
            0.5, -1, -0.3, 1, -0.1, 0.9, 0.7, 0.5, 1, 0, -0.5, 1, -1,
            0.1, 0.2, 0.8, 0.8, 0.6, 0,
        ],
        presets: [25, -1, 27, 29],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10915492,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -14338522,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5861724,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333354, 501248, 937516, 937418, 387139, 387131, 387120, 863920, 863881, 599306, 1078808, 1078807],
        headTextureSetId: 853804,
        options: [
            -1, 0.2, 0, 1, -1, -1, 1, 0.3, 1, -1, -1, 1, 1, 0.26, -0.52, 1,
            0.7, 0.52, 0,
        ],
        presets: [27, -1, 28, 22],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11313075,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1471464415,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5464141,
    },
];
exports.orcFemalePresets = [
    {
        weight: 80,
        hairColor: 1711132,
        headpartIds: [333339, 611477, 967090, 548329, 548319, 262690, 937340],
        headTextureSetId: 602448,
        options: [-0.08, 0.32, 0, 0, 0, 0, 0, 0, 0, -0.28, 0, 0, 0.5, 0, 0, 0, 0, 0, 0],
        presets: [21, -1, 9, 23],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11901867,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 346641490,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4875349,
    },
    {
        weight: 79.99999237060547,
        hairColor: 1711132,
        headpartIds: [333339, 611477, 967090, 548329, 548319, 262690, 937340],
        headTextureSetId: 602448,
        options: [-0.08, 0.32, 0, 0, 0, 0, 0, 0, 0, -0.2799999713897705, 0, 0, 0.5, 0, 0, 0, 0, 0, 0],
        presets: [21, -1, 9, 23],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11901867,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 346641490,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4875349,
    },
    {
        weight: 25,
        hairColor: 1711132,
        headpartIds: [333339, 611477, 967090, 548332, 548302, 262690, 937340],
        headTextureSetId: 602448,
        options: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [0, -1, 0, 27],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10581380,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 346641490,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6195836,
    },
    {
        weight: 4.999999523162842,
        hairColor: 1711132,
        headpartIds: [333339, 611477, 967090, 548326, 548323, 548301, 262689, 937340],
        headTextureSetId: 602448,
        options: [
            0.08000004291534424, -0.5600000023841858, 0, 0, 0, 0, 0, -0.9399999976158142, 0.6399999856948853, 0, 0, 0, 0, 0, 0, 0,
            -0.5199999809265137, 0, 0,
        ],
        presets: [24, -1, 13, 23],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10581380,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 346641490,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6195836,
    },
    {
        weight: 4.999999523162842,
        hairColor: 2830643,
        headpartIds: [333339, 611477, 937532, 548331, 548317, 262688, 937362],
        headTextureSetId: 991337,
        options: [
            1, -1, 0, 0, 1, 0.6000000238418579, 0.5, -0.4399999976158142, 0.20000000298023224, -1, 0, 1, 0.20000000298023224, 0.6000000238418579, 1,
            1, 0.5, 0, 0,
        ],
        presets: [24, -1, 17, 24],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10581380,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6195836,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333339, 611477, 937549, 548332, 548302, 262689, 937376],
        headTextureSetId: 602448,
        options: [
            -0.07999999821186066, 0.11999999731779099, 0.30000001192092896, 0, 0, -0.800000011920929, 0.10000000149011612, -0.30000001192092896, 0,
            -0.5, 0.20000000298023224, 0, 0, -0.5, 0.30000001192092896, 0.30000001192092896, -0.6000000238418579, 0, 0,
        ],
        presets: [29, -1, 9, 28],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10847627,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5929589,
    },
    {
        weight: 0,
        hairColor: 1053202,
        headpartIds: [333339, 611477, 967090, 548296, 548297, 262688, 937340],
        headTextureSetId: 602448,
        options: [
            0.4000000059604645, 0.5, -1, -0.30000001192092896, 0, 0.8999999761581421, 0.4000000059604645, 1, 0.5, 0, 0, 0, 1, -0.30000001192092896,
            -0.10000000149011612, -1, -0.20000000298023224, 0.6000000238418579, 0,
        ],
        presets: [25, -1, 8, 28],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10581380,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -1472003071,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 950621266,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6195836,
    },
    {
        weight: 0,
        hairColor: 4606805,
        headpartIds: [333339, 611477, 967090, 548326, 548323, 548301, 262687, 937378],
        headTextureSetId: 991337,
        options: [1, 1, 1, -1, 0, -1, 1, 0.699999988079071, 0, 0.10000000149011612, 1, 0.8999999761581421, 1, 1, 0, 0, 0, 0, 0],
        presets: [28, -1, 14, 23],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -12758455,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4018761,
    },
    {
        weight: 90,
        hairColor: 1711132,
        headpartIds: [333339, 611477, 937549, 1061810, 1061813, 1061812, 262690, 937381],
        headTextureSetId: 991337,
        options: [
            0.6200000047683716, -1, 0.20000000298023224, -0.5, 0, 0.699999988079071, 0, 0.5, 0.800000011920929, 0.4000000059604645,
            -0.800000011920929, -0.20000000298023224, 0, 0.30000001192092896, -0.5, 0.699999988079071, -0.8999999761581421, 0.4000000059604645, 0,
        ],
        presets: [24, -1, 10, 23],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11901867,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1051719423,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4875349,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333339, 611477, 937550, 937536, 548324, 548323, 548300, 262689, 937340],
        headTextureSetId: 602448,
        options: [-0.30000001192092896, 0.3199999928474426, 0, 0, 0, 0, 0, 0, 0, -0.2800000011920929, 0, 0, 1, 0, 0, 0, 0, 0, 0],
        presets: [21, -1, 17, 24],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -10581380,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                type: 1,
                argb: 346641490,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6195836,
    },
];
exports.redgardMalePresets = [
    {
        weight: 90,
        hairColor: 3154721,
        headpartIds: [333358, 333361, 546143, 332796, 1067118, 331956, 948972, 815395],
        headTextureSetId: 853799,
        options: [
            -1, 1, -0.6600000262260437, -1, 0, 0, 0, 0.05999999865889549, -0.30000001192092896, -0.10000000149011612, 0.4000000059604645,
            0.699999988079071, 1, 0, -0.4000000059604645, 0, 0.25999999046325684, -0.5, 0,
        ],
        presets: [11, -1, 12, 6],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11453131,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5324085,
    },
    {
        weight: 50,
        hairColor: 1711132,
        headpartIds: [333358, 333361, 651426, 332791, 1055779, 332742, 95496, 148060, 333064],
        headTextureSetId: 333387,
        options: [
            -1, 0.5600000023841858, -0.6600000262260437, -1, 0, 0, 0, 0.1599999964237213, -0.20000000298023224, 0.3199999928474426, 0,
            0.699999988079071, 0.6399999856948853, 0, 0, 0, 0, -0.18000000715255737, 0,
        ],
        presets: [5, -1, 17, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -12111065,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 1109005105,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4666151,
    },
    {
        weight: 100,
        hairColor: 1711132,
        headpartIds: [333358, 333361, 546143, 332799, 95497, 333362, 815470],
        headTextureSetId: 333387,
        options: [
            -0.6399999856948853, 0.3400000333786011, -0.30000001192092896, 0.7200000286102295, 0, 0.7200000286102295, 1, 0.08000004291534424,
            0.24000000953674316, 0, 0, 0, 0.3200000524520874, -1, 0.6200000047683716, 0.5399999618530273, -0.5600000023841858, 0.12000000476837158, 0,
        ],
        presets: [17, -1, 16, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9349308,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -1554235865,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7427908,
    },
    {
        weight: 9.999999046325684,
        hairColor: 1711132,
        headpartIds: [333358, 333361, 937515, 937494, 332797, 651455, 863906, 863874, 147383, 815394],
        headTextureSetId: 853802,
        options: [
            -0.9800000190734863, -0.25999999046325684, 1, -0.5399999618530273, 0, 1, 1, 0.41999995708465576, 0.7999999523162842, -0.8600000143051147,
            0.5399999618530273, 1, -0.8999999761581421, -1, -1, 0.5399999618530273, 0.5199999809265137, -0.3799999952316284, 0,
        ],
        presets: [18, -1, 12, 17],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9349308,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7427908,
    },
    {
        weight: 30.000001907348633,
        hairColor: 1711132,
        headpartIds: [333358, 333361, 651426, 332796, 1067118, 863934, 863890, 148047, 331904],
        headTextureSetId: 333387,
        options: [
            -0.7400000095367432, -0.019999999552965164, 0, 0.699999988079071, 0, 0, 0, 0.5, 0.36000001430511475, 0, 0.8600000143051147,
            0.46000000834465027, 0.6200000047683716, 0.5600000023841858, 0.6000000238418579, 0, 0.36000001430511475, -0.3799999952316284, 0,
        ],
        presets: [15, -1, 17, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11453131,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 1541651637,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5324085,
    },
    {
        weight: 4.999999523162842,
        hairColor: 1315864,
        headpartIds: [333358, 333361, 546143, 332799, 95499, 148037, 815395],
        headTextureSetId: 853801,
        options: [
            -0.30000001192092896, -0.5, -0.03999999910593033, -0.05999999865889549, -0.20000000298023224, 0.6399999856948853, 0.6000000238418579, 0,
            0.6399999856948853, 0.07999999821186066, 0.4000000059604645, 1, 0.5, 0.5, 0.05999999865889549, 0.5, 0.05999999865889549,
            0.1599999964237213, 0,
        ],
        presets: [5, -1, 5, 9],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13293790,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 1109005105,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1111688193,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 3483426,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333358, 333361, 651426, 332803, 863920, 863881, 147425, 147503, 815469],
        headTextureSetId: 853799,
        options: [
            0.20000000298023224, -0.699999988079071, 0.5600000023841858, 0.699999988079071, -0.699999988079071, 0.23999999463558197,
            0.6000000238418579, -0.30000001192092896, -0.05999999865889549, -0.9200000166893005, 1, 1, 0.10000000149011612, 0.6000000238418579,
            0.6600000262260437, 0.4000000059604645, 0.25999999046325684, -0.30000001192092896, 0,
        ],
        presets: [1, -1, 20, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -12375007,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 1495346002,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 1111688193,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 1111688193,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4402209,
    },
    {
        weight: 0,
        hairColor: 1053202,
        headpartIds: [333358, 333361, 651426, 332798, 651455, 842942, 842944, 333362, 333064],
        headTextureSetId: 853801,
        options: [
            -1, 0.699999988079071, -0.6600000262260437, -1, 0, 0, 0, 0.25999999046325684, -0.20000000298023224, -0.6000000238418579, 0,
            0.699999988079071, 0.5, 0, -0.4000000059604645, 0, -0.699999988079071, -0.7799999713897705, 0,
        ],
        presets: [5, -1, 14, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13819618,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2957598,
    },
    {
        weight: 0,
        hairColor: 2830643,
        headpartIds: [333358, 333361, 546143, 332799, 853348, 853350, 948972, 815395],
        headTextureSetId: 853802,
        options: [
            -1, 1, -0.6600000262260437, -1, 0, 0, 0, 0.6600000262260437, -0.30000001192092896, -1, 0.10000000149011612, 0.699999988079071, 1, 0,
            -0.4000000059604645, 0, -1, 0.30000001192092896, 0,
        ],
        presets: [11, -1, 15, 6],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13819618,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2957598,
    },
    {
        weight: 70,
        hairColor: 1711132,
        headpartIds: [333358, 333361, 546143, 332799, 843149, 842621, 333362, 815470],
        headTextureSetId: 333387,
        options: [
            -1, 0.8999999761581421, -0.3400000035762787, 0.4399999976158142, 0, 0.5400000214576721, 0.47999998927116394, 1, 0.23999999463558197,
            -0.5199999809265137, 0.47999998927116394, 0.6600000262260437, 1, -1, 0.25999999046325684, 0.20000000298023224, 0.5600000023841858,
            -0.3400000035762787, 0,
        ],
        presets: [5, -1, 4, 12],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -9349308,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -1554235865,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7427908,
    },
];
exports.redgardFemalePresets = [
    {
        weight: 79.99999237060547,
        hairColor: 1315864,
        headpartIds: [333346, 333071, 967090, 331954, 469271, 937380],
        headTextureSetId: 333385,
        options: [0, 0, 0, 0, 0, 0, 0, -0.10000000149011612, 0, -0.10000000149011612, -0.20000000298023224, 0, 0, 0, 0, 0, 0, 0, 0],
        presets: [4, -1, 4, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11453131,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -2109537279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -2075982847,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: -11128558,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5324085,
    },
    {
        weight: 79.99999237060547,
        hairColor: 1711132,
        headpartIds: [333346, 333071, 967090, 1054702, 262692, 937352],
        headTextureSetId: 333385,
        options: [
            -0.4000000059604645, -0.20000000298023224, -0.30000001192092896, 0.6000000238418579, -0.699999988079071, 0.10000000149011612,
            0.20000000298023224, -0.5, 0.4000000059604645, -0.6000000238418579, 0.10000000149011612, 0.4000000059604645, 0.10000000149011612,
            0.30000001192092896, 0.4000000059604645, 0.5, 0.10000000149011612, 0, 0,
        ],
        presets: [9, -1, 13, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13819618,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2957598,
    },
    {
        weight: 0,
        hairColor: 3154721,
        headpartIds: [333346, 333071, 967090, 1075990, 1075989, 333128, 937378],
        headTextureSetId: 333385,
        options: [
            0.20000000298023224, -0.10000000149011612, -0.5, -0.20000000298023224, 0, 0.8999999761581421, 0.20000000298023224, -0.6000000238418579,
            0.5, -0.20000000298023224, -1, 0.8999999761581421, 0.8999999761581421, 0.10000000149011612, -0.20000000298023224, -0.30000001192092896,
            -0.10000000149011612, -0.699999988079071, 0,
        ],
        presets: [12, -1, 16, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -12111065,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1354562559,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1358492611,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 4666151,
    },
    {
        weight: 70,
        hairColor: 3090724,
        headpartIds: [333346, 333071, 967090, 961136, 961128, 262695, 937340],
        headTextureSetId: 333385,
        options: [0.019999980926513672, 0.3400000333786011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6599999666213989, 0, 0, 0, 0, 0, 0],
        presets: [14, -1, 4, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13623018,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 3154198,
    },
    {
        weight: 100,
        hairColor: 1053202,
        headpartIds: [333346, 333071, 967090, 332150, 332018, 262692, 937352],
        headTextureSetId: 333385,
        options: [
            -0.6600000262260437, -0.5, 0, 0.10000000149011612, 0, 0, 0, -0.5, -0.800000011920929, -0.5, -0.30000001192092896, 0.20000000298023224,
            0.8999999761581421, 0.20000000298023224, -0.10000000149011612, -0.30000001192092896, 0, 0, 0,
        ],
        presets: [0, -1, 3, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13819618,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2957598,
    },
    {
        weight: 70,
        hairColor: 1315864,
        headpartIds: [333346, 333071, 967090, 332146, 331984, 469271, 937380],
        headTextureSetId: 991339,
        options: [
            -0.699999988079071, 0.10000000149011612, -0.6000000238418579, -0.4000000059604645, 0, 0.5, 0.6000000238418579, -1, -0.800000011920929, 0,
            -0.5, 0.8999999761581421, 0.6000000238418579, -1, 0.800000011920929, -0.20000000298023224, -0.699999988079071, -0.800000011920929, 0,
        ],
        presets: [1, -1, 20, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13293790,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 1445014354,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 1445014354,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -2109537279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1051719423,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 3483426,
    },
    {
        weight: 39.999996185302734,
        hairColor: 4606805,
        headpartIds: [333346, 333071, 937549, 1054702, 262692, 937362],
        headTextureSetId: 991341,
        options: [
            -0.699999988079071, 0.10000000149011612, -0.6000000238418579, -0.4000000059604645, 0, 0.5, 0.6000000238418579, -0.10000000149011612,
            -0.800000011920929, -0.699999988079071, -0.30000001192092896, 0.8999999761581421, 0.10000000149011612, -1, -0.4000000059604645,
            0.4000000059604645, -1, -0.8999999761581421, 0,
        ],
        presets: [1, -1, 3, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -13819618,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 1445014354,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 5648658,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 2957598,
    },
    {
        weight: 70,
        hairColor: 1315864,
        headpartIds: [333346, 333071, 967090, 961139, 961131, 262673, 937361],
        headTextureSetId: 333385,
        options: [
            -0.4000000059604645, -0.20000000298023224, -1, 1, 0.6000000238418579, 0.800000011920929, 0.20000000298023224, -0.30000001192092896, 0,
            -0.30000001192092896, 0, 0, 0.699999988079071, 0, 1, 0.5, 0, 0, 0,
        ],
        presets: [1, -1, 4, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11582144,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -2075982847,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5195072,
    },
    {
        weight: 70,
        hairColor: 1315864,
        headpartIds: [333346, 333071, 967090, 332102, 331962, 469275, 937377],
        headTextureSetId: 333385,
        options: [
            -0.10000000149011612, 0.10000000149011612, -1, 0, 0.6000000238418579, -0.5, 0.20000000298023224, 0.6000000238418579, 0.10000000149011612,
            0.4000000059604645, 0, 0, 1, 0.699999988079071, 1, -0.4000000059604645, 0.699999988079071, -1, 0,
        ],
        presets: [14, -1, 2, 6],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11582144,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1257829315,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5195072,
    },
    {
        weight: 100,
        hairColor: 4338989,
        headpartIds: [333346, 333071, 967090, 961137, 961129, 262672, 937362],
        headTextureSetId: 333385,
        options: [
            0, 0.5, -1, 0.4000000059604645, 0.6000000238418579, 0.6000000238418579, 0, -0.6000000238418579, -0.30000001192092896,
            -0.10000000149011612, 0, 0, 0.5, 0.10000000149011612, 0.4000000059604645, -0.4000000059604645, -0.10000000149011612, -1, 0,
        ],
        presets: [8, -1, 14, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11453131,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 1923699794,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 1445014354,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadRedguard_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: -1683401646,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 1795162112,
            },
        ],
        skinColor: 5324085,
    },
];
exports.darkElveMalePresets = [
    {
        weight: 19.999998092651367,
        hairColor: 2565667,
        headpartIds: [333356, 333361, 546143, 989849, 989851, 95498, 342311, 815394],
        headTextureSetId: 103310,
        options: [
            0.7999999523162842, -1, 0, 0, 0, 0.5, 0.5, 0.6000000238418579, -0.30000001192092896, -1, 0.30000001192092896, 0, -1, 1, 0, 0, 0,
            -0.30000001192092896, 0,
        ],
        presets: [1, -1, 6, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8021341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8755875,
    },
    {
        weight: 2,
        hairColor: 4606805,
        headpartIds: [333356, 333361, 546143, 331901, 331834, 331957, 342311, 815470],
        headTextureSetId: 991310,
        options: [
            1, -0.5, 0, 0.5, 0, -0.20000000298023224, 0.4000000059604645, -0.4000000059604645, 0.5, -0.8999999761581421, -0.5, -1, -0.5, 1,
            -0.6000000238418579, -0.800000011920929, 0, -0.20000000298023224, 0,
        ],
        presets: [8, -1, 9, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8810085,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7967131,
    },
    {
        weight: 14.999999046325684,
        hairColor: 1711132,
        headpartIds: [333356, 333361, 546143, 331860, 331809, 964591, 802020, 333349, 815395],
        headTextureSetId: 991308,
        options: [0.5, -0.5, 0, 1, 0, 0, 0.5, -0.6000000238418579, -0.800000011920929, -1, 0.5, -1, -0.5, -0.5, 0, 0.20000000298023224, 0.5, 1, 0],
        presets: [12, -1, 22, 11],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8810085,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -1472003071,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -11314341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7967131,
    },
    {
        weight: 2,
        hairColor: 4606805,
        headpartIds: [333356, 333361, 546143, 331902, 331840, 802016, 342424, 815395],
        headTextureSetId: 991311,
        options: [
            1, 1, -1, -0.10000000149011612, 0, 0.5, 0, 0, 0.20000000298023224, -1, 0.5, -1, 0.6000000238418579, -0.5, -0.800000011920929, -0.5, 0.5,
            0.5, 0,
        ],
        presets: [18, -1, 11, 10],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11378581,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: -13688813,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5398635,
    },
    {
        weight: 50,
        hairColor: 1711132,
        headpartIds: [333356, 333361, 651425, 331900, 331820, 843149, 842621, 342311, 815394],
        headTextureSetId: 991311,
        options: [
            -0.5, 0.5, -1, 1, 0, 0.5, 0.5, -0.10000000149011612, 0.20000000298023224, -1, 0.5, -1, 0.6000000238418579, -0.5, -0.800000011920929, -0.5,
            1, -0.20000000298023224, 0,
        ],
        presets: [19, -1, 16, 8],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11314341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 3088403,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5462875,
    },
    {
        weight: 50,
        hairColor: 1053202,
        headpartIds: [333356, 333361, 546143, 331860, 331809, 964591, 95494, 342311, 331903],
        headTextureSetId: 991309,
        options: [
            0.10000000149011612, -1, 0.4000000059604645, 0.699999988079071, -0.4000000059604645, 0.10000000149011612, -0.30000001192092896,
            -0.4000000059604645, 0.6000000238418579, -0.20000000298023224, 0.10000000149011612, 0, -0.30000001192092896, 0.20000000298023224,
            0.699999988079071, -0.30000001192092896, -0.10000000149011612, -0.4000000059604645, 0,
        ],
        presets: [5, -1, 22, 9],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11378581,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1607979173,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5398635,
    },
    {
        weight: 1,
        hairColor: 1315864,
        headpartIds: [333356, 333361, 546143, 331902, 331840, 802008, 148062, 331903],
        headTextureSetId: 991311,
        options: [
            -1, -1, 0.4000000059604645, 0.800000011920929, -0.10000000149011612, -0.20000000298023224, -1, -0.6000000238418579, 0.30000001192092896,
            -0.4000000059604645, -1, -0.699999988079071, -1, 0.4000000059604645, 0, 0, 0, 0, 0,
        ],
        presets: [10, -1, 22, 5],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8021341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 380195922,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 380195922,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 950621266,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 950621266,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 950621266,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 1881221970,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 984175698,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8755875,
    },
    {
        weight: 39.999996185302734,
        hairColor: 1711132,
        headpartIds: [333356, 333361, 546143, 989850, 989852, 989853, 802021, 342313, 815395],
        headTextureSetId: 103310,
        options: [
            0.6000000238418579, -0.8999999761581421, 0, 0.30000001192092896, 0, 0.5, 0.5, -0.20000000298023224, 0.6000000238418579, -1,
            0.800000011920929, 0, -1, 1, 0.4000000059604645, 0.20000000298023224, 0.20000000298023224, -0.30000001192092896, 0,
        ],
        presets: [8, -1, 27, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11378581,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1607979173,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5398635,
    },
    {
        weight: 0,
        hairColor: 1053202,
        headpartIds: [333356, 333361, 546143, 967606, 967267, 842931, 842619, 342311, 331904],
        headTextureSetId: 991311,
        options: [
            -1, -0.699999988079071, 0, 0.800000011920929, 0, 0.8999999761581421, 1, 1, -0.30000001192092896, -1, 0.4000000059604645,
            0.6000000238418579, 0.20000000298023224, -0.4000000059604645, -0.5, -0.4000000059604645, 0.5, -0.30000001192092896, 0,
        ],
        presets: [19, -1, 32, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11314341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -11314341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5462875,
    },
    {
        weight: 0,
        hairColor: 3154721,
        headpartIds: [333356, 333361, 937515, 937494, 967607, 967268, 802002, 342313, 815705],
        headTextureSetId: 103310,
        options: [
            -0.800000011920929, 0.20000000298023224, -1, 1, 0, 1, 0.20000000298023224, 0.30000001192092896, -1, -1, -1, 0.800000011920929, -1, 1, 0,
            0, 0, 0.4000000059604645, 0,
        ],
        presets: [19, -1, 37, 18],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11314341,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                type: 1,
                argb: -1607979173,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                type: 3,
                argb: -1828716544,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5462875,
    },
];
exports.darkElveFemalePresets = [
    {
        weight: 50,
        hairColor: 1711132,
        headpartIds: [333340, 333071, 967090, 979735, 979745, 979741, 342314, 937340],
        headTextureSetId: 103312,
        options: [
            0, 0, 0, 0, 0, 0, 0.30000001192092896, -0.5, 0.6000000238418579, -0.5, 0, 0, -0.4000000059604645, 0, 0, 0.10000000149011612, 0, 0, 0,
        ],
        presets: [6, -1, 25, 16],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1798332261,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6189428,
    },
    {
        weight: 0,
        hairColor: 5922665,
        headpartIds: [333340, 333071, 967090, 576111, 576135, 333120, 937362],
        headTextureSetId: 103312,
        options: [
            -0.4000000059604645, 0.20000000298023224, 0, 0, 0, -0.30000001192092896, -0.20000000298023224, 0.10000000149011612, 0, 0.5,
            0.10000000149011612, 0, 0.6000000238418579, -0.6000000238418579, 0.4000000059604645, -0.6000000238418579, -0.800000011920929, 0, 0,
        ],
        presets: [15, -1, 9, 20],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8806477,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -1606458848,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1086960095,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7970739,
    },
    {
        weight: 0,
        hairColor: 3154721,
        headpartIds: [333340, 333071, 967090, 979739, 979747, 979743, 333120, 937380],
        headTextureSetId: 103312,
        options: [
            0.4000000059604645, -0.5, -0.5, -0.6000000238418579, 0, -0.30000001192092896, -0.20000000298023224, -0.20000000298023224, 0, 0.5,
            0.10000000149011612, 0, -0.5, -0.6000000238418579, 0.4000000059604645, -0.5, -0.800000011920929, 1, 0,
        ],
        presets: [16, -1, 28, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8939875,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1494156352,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 7837341,
    },
    {
        weight: 0,
        hairColor: 3154721,
        headpartIds: [333340, 333071, 967090, 576134, 576150, 342314, 937340],
        headTextureSetId: 103312,
        options: [
            -1, -1, -0.5, -0.6000000238418579, 0, -0.30000001192092896, -0.20000000298023224, -1, 0, -0.6000000238418579, 0.10000000149011612, 0,
            -0.10000000149011612, -0.6000000238418579, 0.4000000059604645, -0.5, -0.800000011920929, -0.4000000059604645, 0,
        ],
        presets: [11, -1, 11, 2],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11176312,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5600904,
    },
    {
        weight: 0,
        hairColor: 5922665,
        headpartIds: [333340, 333071, 967090, 576131, 576137, 342315, 937376],
        headTextureSetId: 991324,
        options: [
            -1, -1, 0, -0.10000000149011612, 0, 0.20000000298023224, -0.20000000298023224, -1, 0, 0.5, -0.5, 1, -0.30000001192092896,
            -0.6000000238418579, 0.4000000059604645, -0.5, -0.800000011920929, 0, 0,
        ],
        presets: [11, -1, 14, 13],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -7818810,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1621709906,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 8958406,
    },
    {
        weight: 60.000003814697266,
        hairColor: 1315864,
        headpartIds: [333340, 333071, 967090, 967621, 967611, 342314, 937340],
        headTextureSetId: 103312,
        options: [
            -0.30000001192092896, -0.699999988079071, -0.30000001192092896, 0.20000000298023224, -0.6000000238418579, -0.20000000298023224,
            0.30000001192092896, 0, 0.699999988079071, -0.10000000149011612, 0, 0, -0.5, 0.30000001192092896, 0.5, -0.30000001192092896,
            -0.10000000149011612, -0.5, 0,
        ],
        presets: [4, -1, 7, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11176312,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1691410413,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5600904,
    },
    {
        weight: 19.999998092651367,
        hairColor: 1315864,
        headpartIds: [333340, 333071, 967090, 576111, 576135, 342314, 937384],
        headTextureSetId: 991326,
        options: [
            -0.30000001192092896, -0.6000000238418579, 0.30000001192092896, 0, -0.10000000149011612, -0.10000000149011612, -0.30000001192092896,
            -0.30000001192092896, 0, -0.8999999761581421, -0.30000001192092896, 0, -0.6000000238418579, 0.4000000059604645, 0.5, 0.20000000298023224,
            0.5, 0, 0,
        ],
        presets: [3, -1, 24, 14],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -8939875,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: -752800942,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 2007585874,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: -1220344831,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: -12385279,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 0,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 0,
            },
        ],
        skinColor: 7837341,
    },
    {
        weight: 70,
        hairColor: 1053202,
        headpartIds: [333340, 333071, 937547, 967622, 967612, 342315, 937377],
        headTextureSetId: 103312,
        options: [
            -1, -0.699999988079071, 0.10000000149011612, 0.5, -0.800000011920929, -0.5, 0.30000001192092896, -0.4000000059604645, 0.699999988079071,
            -0.6000000238418579, 0.5, 0, -0.4000000059604645, 0.4000000059604645, 0.699999988079071, 0.10000000149011612, 0, -1, 0,
        ],
        presets: [10, -1, 11, 4],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1798332261,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: 1799554049,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1358492611,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6189428,
    },
    {
        weight: 39.999996185302734,
        hairColor: 1053202,
        headpartIds: [333340, 333071, 967090, 967626, 967616, 333120, 937340],
        headTextureSetId: 103312,
        options: [
            -0.4000000059604645, -0.30000001192092896, 0, 0.30000001192092896, 0, 0.20000000298023224, -0.20000000298023224, -0.6000000238418579, 0,
            -0.4000000059604645, -0.5, 1, 0.699999988079071, -0.6000000238418579, 0.30000001192092896, -0.699999988079071, 0.4000000059604645, 0, 0,
        ],
        presets: [18, -1, 23, 3],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: 1798332261,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 6189428,
    },
    {
        weight: 0,
        hairColor: 2565667,
        headpartIds: [333340, 333071, 937547, 576131, 576137, 1084964, 1084963, 937361],
        headTextureSetId: 991325,
        options: [
            -0.4000000059604645, -1, 0, 0.30000001192092896, 0, 0.20000000298023224, -0.20000000298023224, -0.6000000238418579, 0, -1,
            0.20000000298023224, 0, 0.20000000298023224, -0.6000000238418579, 0.30000001192092896, -0.699999988079071, 0.4000000059604645, 0, 0,
        ],
        presets: [16, -1, 24, 19],
        tints: [
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                type: 6,
                argb: -11176312,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                type: 4,
                argb: -2029059008,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                type: 5,
                argb: -16777216,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                type: 2,
                argb: 480859218,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                type: 9,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                type: 8,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHighElf_Lips.dds',
                type: 1,
                argb: -1912140739,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                type: 10,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                type: 13,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                type: 11,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                type: 12,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                type: 3,
                argb: -1051719423,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                type: 14,
                argb: 16777215,
            },
            {
                texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                type: 14,
                argb: 16777215,
            },
        ],
        skinColor: 5600904,
    },
];


/***/ }),

/***/ 9429:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringToRace = exports.raceToString = void 0;
const Race_1 = __webpack_require__(3127);
function raceToString(race) {
    switch (race) {
        case Race_1.Race.Khajits:
            return 'Khajit';
        case Race_1.Race.Argonians:
            return 'Argonian';
        case Race_1.Race.Bretons:
            return 'Breton';
        case Race_1.Race.HighElves:
            return 'HighElf';
        case Race_1.Race.WoodElves:
            return 'WoodElf';
        case Race_1.Race.Imperials:
            return 'Imperial';
        case Race_1.Race.Nords:
            return 'Nord';
        case Race_1.Race.Orcs:
            return 'Orc';
        case Race_1.Race.Redgards:
            return 'Redguard';
        case Race_1.Race.DarkElves:
            return 'DarkElf';
        default:
            throw new Error(`[StringToRace]: Cant convert ${race} to race`);
    }
}
exports.raceToString = raceToString;
function stringToRace(raceString) {
    switch (raceString) {
        case 'Khajit':
            return Race_1.Race.Khajits;
        case 'Argonian':
            return Race_1.Race.Argonians;
        case 'Breton':
            return Race_1.Race.Bretons;
        case 'HighElf':
            return Race_1.Race.HighElves;
        case 'WoodElf':
            return Race_1.Race.WoodElves;
        case 'Imperial':
            return Race_1.Race.Imperials;
        case 'Nord':
            return Race_1.Race.Nords;
        case 'Orc':
            return Race_1.Race.Orcs;
        case 'Redguard':
            return Race_1.Race.Redgards;
        case 'DarkElf':
            return Race_1.Race.DarkElves;
        default:
            throw new Error(`[StringToRace]: Cant convert ${raceString} to race`);
    }
}
exports.stringToRace = stringToRace;


/***/ }),

/***/ 512:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TintTypes = void 0;
var TintTypes;
(function (TintTypes) {
    TintTypes[TintTypes["Frekles"] = 0] = "Frekles";
    TintTypes[TintTypes["Lips"] = 1] = "Lips";
    TintTypes[TintTypes["Cheeks"] = 2] = "Cheeks";
    TintTypes[TintTypes["Eyeliner"] = 3] = "Eyeliner";
    TintTypes[TintTypes["UpperEyesocket"] = 4] = "UpperEyesocket";
    TintTypes[TintTypes["LowerEyesocket"] = 5] = "LowerEyesocket";
    TintTypes[TintTypes["SkinTone"] = 6] = "SkinTone";
    TintTypes[TintTypes["Warpaint"] = 7] = "Warpaint";
    TintTypes[TintTypes["Frownlines"] = 8] = "Frownlines";
    TintTypes[TintTypes["LowerCheeks"] = 9] = "LowerCheeks";
    TintTypes[TintTypes["Nose"] = 10] = "Nose";
    TintTypes[TintTypes["Chin"] = 11] = "Chin";
    TintTypes[TintTypes["Neck"] = 12] = "Neck";
    TintTypes[TintTypes["Forehead"] = 13] = "Forehead";
    TintTypes[TintTypes["Dirt"] = 14] = "Dirt";
})(TintTypes = exports.TintTypes || (exports.TintTypes = {}));


/***/ }),

/***/ 1851:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharacterMenuHandler = void 0;
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const events_1 = __webpack_require__(3602);
const binder_1 = __webpack_require__(1220);
const Binder_1 = __webpack_require__(9132);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Utils_1 = __webpack_require__(2453);
class CharacterMenuHandler {
    static init() {
        Binder_1.Binder.bind(binder_1.BinderHash.CharacterMenu, this.open.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CharacterMenuEvents.Close).addHandler(this.close.bind(this));
    }
    static open() {
        (0, Utils_1.sendEventToServer)(events_1.CharacterMenuEvents.Update);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.CharacterMenu}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.CharacterMenu].Show}`, null, true);
    }
    static close() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.CharacterMenu}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.CharacterMenu].Hide}`, null, false);
    }
}
exports.CharacterMenuHandler = CharacterMenuHandler;


/***/ }),

/***/ 3206:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharacterSelectorService = void 0;
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
class CharacterSelectorService {
    static init(characters, unlockPrice) {
        this.isInit = true;
        this.characters = characters;
        this.unlockPrice = unlockPrice;
    }
    static show() {
        const payload = {
            characters: this.characters,
            unlockPrice: this.unlockPrice,
        };
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('selectCharacter/show', payload, true);
    }
}
exports.CharacterSelectorService = CharacterSelectorService;


/***/ }),

/***/ 6291:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadAppearance = exports.initSelectorBrowserEvents = exports.unequipAll = exports.hideCharacterSelector = exports.showCharacterSelector = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const events_1 = __webpack_require__(3222);
const Player_1 = __webpack_require__(5456);
const Utils_1 = __webpack_require__(2453);
const spApiInteraction_1 = __webpack_require__(3331);
const launcherService_1 = __webpack_require__(2041);
const ColshapesHandler_1 = __webpack_require__(9978);
const StaminaHudState_1 = __webpack_require__(3687);
const Binder_1 = __webpack_require__(9132);
const GameRestrictions_1 = __webpack_require__(3352);
const NpcHandler_1 = __webpack_require__(5977);
const browserService_1 = __webpack_require__(5472);
const CharacterSelectorService_1 = __webpack_require__(3206);
const utils_1 = __webpack_require__(9429);
const Gender_1 = __webpack_require__(3730);
const defaultConfig_1 = __webpack_require__(978);
const appearanceSync_1 = __webpack_require__(282);
const TintTypes_1 = __webpack_require__(512);
const HeadParts_1 = __webpack_require__(1873);
function showCharacterSelector(characters, slotCost) {
    if (CharacterSelectorService_1.CharacterSelectorService.isInit) {
        CharacterSelectorService_1.CharacterSelectorService.init(characters, slotCost);
        return CharacterSelectorService_1.CharacterSelectorService.show();
    }
    CharacterSelectorService_1.CharacterSelectorService.init(characters, slotCost);
}
exports.showCharacterSelector = showCharacterSelector;
function hideCharacterSelector() {
    spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('selectCharacter/hide', null);
}
exports.hideCharacterSelector = hideCharacterSelector;
function unequipAll() {
    (0, skyrimPlatform_1.once)('update', () => {
        Player_1.localPlayer.actor.unequipAll();
    });
}
exports.unequipAll = unequipAll;
function initSelectorBrowserEvents() {
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CharacterSelectorEvents.Remove).addHandler((data) => {
        (0, Utils_1.sendEventToServer)(events_1.CharacterSelectorEvents.Remove, { id: data.id });
    });
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CharacterSelectorEvents.Create).addHandler(() => {
        (0, Utils_1.sendEventToServer)(events_1.CharacterSelectorEvents.Create);
    });
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CharacterSelectorEvents.Choose).addHandler((data) => {
        ColshapesHandler_1.ColshapesHandler.init();
        NpcHandler_1.NpcHandler.init();
        StaminaHudState_1.StaminaHudState.update();
        StaminaHudState_1.StaminaHudState.initHook();
        GameRestrictions_1.GameRestrictions.initAnimationsHook();
        Binder_1.Binder.isDisable = false;
        (0, Utils_1.sendEventToServer)(events_1.CharacterSelectorEvents.Choose, { id: data.id });
    });
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CharacterSelectorEvents.Unlock).addHandler(() => {
        (0, Utils_1.sendEventToServer)(events_1.CharacterSelectorEvents.Unlock);
    });
    BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.CharacterSelectorEvents.Exit).addHandler(() => {
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('selectCharacter/hide', null, false);
        (0, skyrimPlatform_1.once)('update', () => {
            spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(launcherService_1.LauncherService).quitFromGame('', ', 1');
        });
    });
}
exports.initSelectorBrowserEvents = initSelectorBrowserEvents;
function loadAppearance(appearanceData) {
    (0, skyrimPlatform_1.once)('update', () => {
        const race = (0, utils_1.stringToRace)(appearanceData.race);
        const gender = appearanceData.gender === 'Male' ? Gender_1.Gender.Male : Gender_1.Gender.Female;
        const numTints = skyrimPlatform_1.Game.getNumTintMasks();
        skyrimPlatform_1.TESModPlatform.setNpcRace(Player_1.localPlayer.baseActor, skyrimPlatform_1.Race.from(skyrimPlatform_1.Game.getFormEx(race)));
        skyrimPlatform_1.TESModPlatform.setNpcSex(Player_1.localPlayer.baseActor, gender);
        const defaultCharactersPreset = defaultConfig_1.defaultConfig.find(v => v.race === race && v.gender === gender);
        if (!defaultCharactersPreset) {
            return;
        }
        const headparts = defaultCharactersPreset.headpartIds.map(id => skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(id))).filter(headpart => !!headpart);
        Player_1.localPlayer.baseActor.setWeight(defaultCharactersPreset.weight);
        Player_1.localPlayer.actor.updateWeight(0);
        skyrimPlatform_1.TESModPlatform.setNpcSkinColor(Player_1.localPlayer.baseActor, defaultCharactersPreset.skinColor);
        skyrimPlatform_1.TESModPlatform.setNpcHairColor(Player_1.localPlayer.baseActor, defaultCharactersPreset.hairColor);
        skyrimPlatform_1.TESModPlatform.resizeHeadpartsArray(Player_1.localPlayer.baseActor, headparts.length);
        headparts.forEach((v, i) => Player_1.localPlayer.baseActor.setNthHeadPart(v, i));
        Player_1.localPlayer.baseActor.setFaceTextureSet(skyrimPlatform_1.TextureSet.from(skyrimPlatform_1.Game.getFormEx(defaultCharactersPreset.headTextureSetId)));
        defaultCharactersPreset.options.forEach((v, i) => Player_1.localPlayer.baseActor.setFaceMorph(v, i));
        defaultCharactersPreset.presets.forEach((v, i) => Player_1.localPlayer.baseActor.setFacePreset(v, i));
        appearanceSync_1.AppearanceSync.applyTints(null, defaultCharactersPreset.tints);
        Player_1.localPlayer.baseActor.setWeight(appearanceData.body.weight);
        Player_1.localPlayer.actor.updateWeight(0);
        skyrimPlatform_1.TESModPlatform.setNpcSkinColor(Player_1.localPlayer.baseActor, appearanceData.body.skinColor);
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            if (type === TintTypes_1.TintTypes.SkinTone) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.body.skinColor);
            }
        }
        if (typeof appearanceData.head.dirtTint === 'string') {
            appearanceData.head.dirtTint = JSON.parse(appearanceData.head.dirtTint);
        }
        appearanceData.head.dirtTint.forEach(tint => {
            appearanceSync_1.AppearanceSync.resetTintsForPlayerByType(tint.type);
            for (let i = 0; i < numTints; i++) {
                const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
                const path = skyrimPlatform_1.Game.getNthTintMaskTexturePath(i);
                if (type === TintTypes_1.TintTypes.Dirt && path === tint.texturePath) {
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, tint.argb);
                }
            }
        });
        if (appearanceData.head.faceScar === -1) {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.Scar);
        }
        else {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.Scar);
            appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(appearanceData.head.faceScar);
        }
        Player_1.localPlayer.baseActor.setFacePreset(appearanceData.face.noseType, 0);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.face.noseHeight, 0);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.face.noseLength, 1);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.face.jawHeight, 2);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.face.jawWidth, 3);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.face.cheekbondeWidth, 4);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.face.cheekboneHeight, 5);
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            switch (type) {
                case TintTypes_1.TintTypes.Cheeks:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.cheeksTint);
                    break;
                case TintTypes_1.TintTypes.LowerCheeks:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.cheeksTintLower);
                    break;
                case TintTypes_1.TintTypes.Frownlines:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.frownLines);
                    break;
                case TintTypes_1.TintTypes.Nose:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.noseTint);
                    break;
                case TintTypes_1.TintTypes.Chin:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.chinTint);
                    break;
                case TintTypes_1.TintTypes.Neck:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.neckTint);
                    break;
                case TintTypes_1.TintTypes.Forehead:
                    skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.face.foreHeadTint);
                    break;
                default:
                    break;
            }
        }
        Player_1.localPlayer.baseActor.setFacePreset(appearanceData.eyes.eyesForm, 2);
        if (appearanceData.eyes.eyesColor === 0) {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.EyesColor);
        }
        else {
            appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(appearanceData.eyes.eyesColor);
        }
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.eyes.eyesHeigth, 7);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.eyes.eyesDistance, 8);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.eyes.eyesDepth, 17);
        Player_1.localPlayer.baseActor.setFaceMorph(0, 18);
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            if (type === TintTypes_1.TintTypes.Eyeliner) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.eyes.eyesLinerColor);
            }
            else if (type === TintTypes_1.TintTypes.UpperEyesocket) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.eyes.eyesUpperShadows);
            }
            else if (type === TintTypes_1.TintTypes.LowerEyesocket) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.eyes.eyesLowerShadows);
            }
        }
        if (appearanceData.eyebrows.eyebrowsType === 0) {
            appearanceSync_1.AppearanceSync.resetHeadPartForPlayer(HeadParts_1.HeadParts.Eyebrows);
        }
        else {
            appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(appearanceData.eyebrows.eyebrowsType);
        }
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.eyebrows.eyebrowsHeigth, 9);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.eyebrows.eyebrowsWeight, 10);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.eyebrows.eyebrowsForward, 11);
        Player_1.localPlayer.baseActor.setFacePreset(appearanceData.mouth.lipsType, 3);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.mouth.lipsHeigth, 12);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.mouth.lipsForward, 13);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.mouth.chinWeigth, 14);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.mouth.chinLength, 15);
        Player_1.localPlayer.baseActor.setFaceMorph(appearanceData.mouth.chinForward, 16);
        for (let i = 0; i < numTints; i++) {
            const type = skyrimPlatform_1.Game.getNthTintMaskType(i);
            if (type === TintTypes_1.TintTypes.Lips) {
                skyrimPlatform_1.Game.setNthTintMaskColor(i, appearanceData.mouth.lipsColor);
            }
        }
        appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(appearanceData.hair.hairs);
        appearanceSync_1.AppearanceSync.applyHeadPartToPlayer(appearanceData.hair.facialHair);
        skyrimPlatform_1.TESModPlatform.setNpcHairColor(Player_1.localPlayer.baseActor, appearanceData.hair.hairColor);
        Player_1.localPlayer.actor.queueNiNodeUpdate();
        const appearanceDump = appearanceSync_1.AppearanceSync.getAppearance(Player_1.localPlayer.actor);
        appearanceDump.name = appearanceData.name;
        (0, Utils_1.sendEventToServer)('loadAppearance', appearanceDump);
    });
}
exports.loadAppearance = loadAppearance;


/***/ }),

/***/ 3222:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharacterSelectorEvents = void 0;
var CharacterSelectorEvents;
(function (CharacterSelectorEvents) {
    CharacterSelectorEvents["Create"] = "charSelector:create";
    CharacterSelectorEvents["Remove"] = "charSelector:remove";
    CharacterSelectorEvents["Choose"] = "charSelector:choose";
    CharacterSelectorEvents["Unlock"] = "charSelector:unlock";
    CharacterSelectorEvents["Exit"] = "charSelector:exit";
})(CharacterSelectorEvents = exports.CharacterSelectorEvents || (exports.CharacterSelectorEvents = {}));


/***/ }),

/***/ 8428:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EscapeMenu = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Hud_1 = __webpack_require__(9720);
const Binder_1 = __webpack_require__(9132);
const binder_1 = __webpack_require__(1220);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const spApiInteraction_1 = __webpack_require__(3331);
const launcherService_1 = __webpack_require__(2041);
const browserService_1 = __webpack_require__(5472);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const events_1 = __webpack_require__(8939);
const events_2 = __webpack_require__(5357);
const Player_1 = __webpack_require__(5456);
const NotificationsHandler_1 = __webpack_require__(5807);
class EscapeMenu {
    static init() {
        Binder_1.Binder.bindRelease(binder_1.BinderHash.EscMenu, this.openMenu.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.EscMenuEvents.RequestClose).addHandler(this.closeMenu.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_2.WorldMapEvents.CloseRequest).addHandler(this.closeMenu.bind(this));
    }
    static closeMenu() {
        if (this.mapIsOpen) {
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.WorldMap}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.WorldMap].Hide}`, null);
            this.mapIsOpen = false;
        }
        if (this.menuIsOpen) {
            Hud_1.Hud.open();
        }
        this.menuIsOpen = false;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Hide}`, null, false);
    }
    static openMenu() {
        (0, skyrimPlatform_1.once)('update', () => {
            Hud_1.Hud.close();
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Show}`, null, true);
            this.menuIsOpen = true;
        });
    }
    static openMap() {
        (0, skyrimPlatform_1.once)('update', () => {
            if (Player_1.localPlayer.cell !== 60) {
                return NotificationsHandler_1.NotificationsHandler.send('Вы не можете открыть карту в данной области');
            }
            this.mapIsOpen = true;
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.Hide}`, null);
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.WorldMap}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.WorldMap].Show}`, null, true);
        });
    }
    static exitGame(_helper) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, skyrimPlatform_1.once)('update', () => __awaiter(this, void 0, void 0, function* () {
                spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(launcherService_1.LauncherService).quitFromGame('', '', 1);
            }));
        });
    }
}
exports.EscapeMenu = EscapeMenu;
EscapeMenu.menuIsOpen = false;
EscapeMenu.mapIsOpen = false;
EscapeMenu.InterfaceName = InterfacesName_1.BrowserInterfacesName.EscMenu;
EscapeMenu.InterfaceFunction = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.EscMenu];


/***/ }),

/***/ 9720:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Hud = void 0;
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Binder_1 = __webpack_require__(9132);
const binder_1 = __webpack_require__(1220);
const Utils_1 = __webpack_require__(2453);
const VoiceChat_1 = __webpack_require__(1299);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const events_1 = __webpack_require__(5592);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const Player_1 = __webpack_require__(5456);
const skyrimPlatform_1 = __webpack_require__(2112);
class Hud {
    static init() {
        Binder_1.Binder.bindRelease(binder_1.BinderHash.Hud, this.toggleHud.bind(this));
        Binder_1.Binder.bindRelease(binder_1.BinderHash.Chat, this.openChatInput.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.HudEvents.SendMessage).addHandler(this.RequestChatMessage.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.HudEvents.HideInput).addHandler(this.hideInput.bind(this));
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Map}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Map].SetData}`, {
                playerPosition: {
                    x: Player_1.localPlayer.position.x,
                    y: Player_1.localPlayer.position.y,
                },
                playerHeading: Player_1.localPlayer.rotation.z,
                cameraHeading: (0, skyrimPlatform_1.getCameraRotationYaw)(),
                cellOrWorld: Player_1.localPlayer.cell,
            });
        }, 'HUD'));
    }
    static openChatInput() {
        Binder_1.Binder.isDisable = true;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowInput}`, true, true);
    }
    static toggleHud() {
        if (this.isUserInfoShow) {
            this.hideUserInfo();
        }
        else {
            this.showUserInfo();
        }
    }
    static showUserInfo() {
        this.isUserInfoShow = true;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowUserInfo}`, true);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowMessages}`, true);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetVisibleMinimap}`, true);
    }
    static hideUserInfo() {
        this.isUserInfoShow = false;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowUserInfo}`, false);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowMessages}`, false);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetVisibleMinimap}`, false);
    }
    static open() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].Show}`);
    }
    static close() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].Hide}`);
    }
    static setChatIsShow(toggle) {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowMessages}`, toggle);
    }
    static setPlayerId(id) {
        this.id = id;
        VoiceChat_1.VoiceChat.connect(id);
    }
    static getPlayerId() {
        return this.id;
    }
    static hideInput() {
        Binder_1.Binder.isDisable = false;
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowInput}`, false, false);
    }
    static RequestChatMessage(data) {
        if (data.message.length === 0) {
            return;
        }
        this.hideInput();
        (0, Utils_1.sendEventToServer)(events_1.HudEvents.SendMessage, data);
    }
}
exports.Hud = Hud;
Hud.isUserInfoShow = true;


/***/ }),

/***/ 5807:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationsHandler = void 0;
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const NotificationPositions_1 = __webpack_require__(8006);
const NotificationTypes_1 = __webpack_require__(4815);
class NotificationsHandler {
    static send(text, type = NotificationTypes_1.NotificationTypes.Info, position = NotificationPositions_1.NotificationPositions.Bottom, duration = 5) {
        if (this.lastMessage === text && Date.now() - this.lastSendAt < this.lastDuration * 1000) {
            return;
        }
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser('notifications/send', { text, position, type, duration });
        this.lastMessage = text;
        this.lastSendAt = Date.now();
        this.lastDuration = duration;
    }
    static sendTemplate(template, params, type = NotificationTypes_1.NotificationTypes.Info, position = NotificationPositions_1.NotificationPositions.Bottom, duration = 5) {
        if (this.lastMessage === template && Date.now() - this.lastSendAt < this.lastDuration * 1000) {
            return;
        }
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser('notifications/send', { template, params, position, type, duration });
        this.lastMessage = template;
        this.lastSendAt = Date.now();
        this.lastDuration = duration;
    }
}
exports.NotificationsHandler = NotificationsHandler;
NotificationsHandler.lastMessage = '';
NotificationsHandler.lastSendAt = 0;
NotificationsHandler.lastDuration = 0;


/***/ }),

/***/ 7460:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authError = void 0;
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
function authError(id, text) {
    spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('auth/setInputError', { inputId: id, error: text });
}
exports.authError = authError;


/***/ }),

/***/ 5456:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.localPlayer = exports.Player = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Utils_1 = __webpack_require__(2453);
const objectReferenceEx_1 = __webpack_require__(7564);
const Vector3_1 = __webpack_require__(2233);
class Player {
    static getInstance() {
        if (!this.playerInstance) {
            this.playerInstance = new Player();
        }
        return this.playerInstance;
    }
    get actor() {
        return (0, Utils_1.getLocalActor)();
    }
    get baseActor() {
        return (0, Utils_1.getLocalBaseActor)();
    }
    get position() {
        const actor = this.actor;
        return (0, Vector3_1.toVector3)(actor.getPositionX(), actor.getPositionY(), actor.getPositionZ());
    }
    get cell() {
        return objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(this.actor);
    }
    get rotation() {
        const actor = this.actor;
        return (0, Vector3_1.toVector3)(actor.getAngleX(), actor.getAngleY(), actor.getAngleZ());
    }
    set alpha(alpha) {
        (0, skyrimPlatform_1.once)('update', () => {
            this.actor.setAlpha(alpha, false);
        });
    }
    setPosition(position, rotation, cell) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, skyrimPlatform_1.once)('update', () => {
                if (cell === undefined) {
                    cell = this.cell;
                }
                const cellEx = skyrimPlatform_1.Cell.from(skyrimPlatform_1.Game.getFormEx(cell));
                const world = skyrimPlatform_1.WorldSpace.from(skyrimPlatform_1.Game.getFormEx(cell));
                const rotationPos = rotation ? rotation : (0, Vector3_1.toVector3)(this.actor.getAngleX(), this.actor.getAngleY(), this.actor.getAngleZ());
                skyrimPlatform_1.TESModPlatform.moveRefrToPosition(this.actor, cellEx, world, position.x, position.y, position.z, rotationPos.x, rotationPos.y, rotationPos.z);
            });
        });
    }
}
exports.Player = Player;
exports.localPlayer = Player.getInstance();


/***/ }),

/***/ 1828:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RadialMenu = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const events_1 = __webpack_require__(8797);
const binder_1 = __webpack_require__(1220);
const Binder_1 = __webpack_require__(9132);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Utils_1 = __webpack_require__(2453);
const playerCharacterDataHolder_1 = __webpack_require__(3590);
const worldViewMisc_1 = __webpack_require__(9885);
const formView_1 = __webpack_require__(3770);
const settings_1 = __webpack_require__(5427);
const SettingsId_1 = __webpack_require__(9373);
const skyrimKeyCodeName_1 = __webpack_require__(6158);
const Vector3_1 = __webpack_require__(2233);
const Player_1 = __webpack_require__(5456);
const remoteServer_1 = __webpack_require__(8986);
const spApiInteraction_1 = __webpack_require__(3331);
const CenterNpcPosOffset = 40;
const headPart = 'NPC Head [Head]';
class RadialMenu {
    static init() {
        Binder_1.Binder.bind(binder_1.BinderHash.Radial, this.toggleUI.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.RadialMenuEvents.Select).addHandler(this.selectItem.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.RadialMenuEvents.Close).addHandler(this.close.bind(this));
        this.checkCondition();
        this.isOpen = false;
        this.canOpenRadial = true;
        this.targetPlayerId = null;
        this.textId = undefined;
    }
    static checkCondition() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            var _a;
            const targetRefrId = playerCharacterDataHolder_1.PlayerCharacterDataHolder.getCrosshairRefId();
            if (!targetRefrId) {
                this.canOpenRadial = false;
                this.targetPlayerId = null;
                this.removeHelpText();
                return;
            }
            const targetObject = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(targetRefrId));
            if (!targetObject) {
                this.canOpenRadial = false;
                this.targetPlayerId = null;
                this.removeHelpText();
                return;
            }
            const targetActor = skyrimPlatform_1.Actor.from(targetObject);
            if (!targetActor) {
                this.canOpenRadial = false;
                this.targetPlayerId = null;
                this.removeHelpText();
                return;
            }
            const remoteServer = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer);
            const worlds = remoteServer.getWorldModel();
            const targetServerId = (_a = worlds.forms.find(v => (v === null || v === void 0 ? void 0 : v.refrId) === (0, worldViewMisc_1.localIdToRemoteId)(targetActor.getFormID()))) === null || _a === void 0 ? void 0 : _a.playerDynamicId;
            if (targetServerId == null) {
                this.canOpenRadial = false;
                this.targetPlayerId = null;
                this.removeHelpText();
                return;
            }
            const playerPosition = new Vector3_1.Vector3(Player_1.localPlayer.actor.getPositionX(), Player_1.localPlayer.actor.getPositionY(), Player_1.localPlayer.actor.getPositionZ());
            const targetPosition = new Vector3_1.Vector3(targetActor.getPositionX(), targetActor.getPositionY(), targetActor.getPositionZ());
            if (playerPosition.dist(targetPosition) > events_1.RADIAL_MAX_DISTANCE_INTERACTION) {
                this.canOpenRadial = false;
                this.targetPlayerId = null;
                this.removeHelpText();
                if (this.isOpen) {
                    this.close();
                }
                return;
            }
            this.targetPlayerId = targetServerId;
            this.canOpenRadial = true;
            this.addHelpText(targetObject);
        }, 'Radial'));
    }
    static addHelpText(targetObject) {
        const headScreenPos = (0, skyrimPlatform_1.worldPointToScreenPoint)([
            skyrimPlatform_1.NetImmerse.getNodeWorldPositionX(targetObject, headPart, false),
            skyrimPlatform_1.NetImmerse.getNodeWorldPositionY(targetObject, headPart, false),
            skyrimPlatform_1.NetImmerse.getNodeWorldPositionZ(targetObject, headPart, false) - CenterNpcPosOffset,
        ])[0];
        const resolution = (0, formView_1.getScreenResolution)();
        const textXPos = Math.round(headScreenPos[0] * resolution.width);
        const textYPos = Math.round((1 - headScreenPos[1]) * resolution.height);
        if (!this.textId) {
            this.textId = (0, skyrimPlatform_1.createText)(textXPos, textYPos, `${skyrimKeyCodeName_1.SkyrimKeyNames[settings_1.Settings.getValue(SettingsId_1.SettingsId.Binder_Radial).codes[0]]}`, [255, 255, 255, 1]);
        }
        else {
            (0, skyrimPlatform_1.setTextPos)(this.textId, textXPos, textYPos);
            (0, skyrimPlatform_1.setTextString)(this.textId, `${skyrimKeyCodeName_1.SkyrimKeyNames[settings_1.Settings.getValue(SettingsId_1.SettingsId.Binder_Radial).codes[0]]}`);
        }
    }
    static removeHelpText() {
        if (this.textId) {
            (0, skyrimPlatform_1.destroyText)(this.textId);
            this.textId = undefined;
        }
    }
    static toggleUI() {
        if (!this.canOpenRadial) {
            return;
        }
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    static open() {
        this.isOpen = !this.isOpen;
        this.removeHelpText();
        if (skyrimPlatform_1.browser.isFocused()) {
            return;
        }
        (0, Utils_1.sendEventToServer)(events_1.RadialMenuEvents.Open, { targetId: this.targetPlayerId });
    }
    static close() {
        this.isOpen = !this.isOpen;
        this.targetPlayerId = null;
        (0, Utils_1.sendEventToServer)(events_1.RadialMenuEvents.Close);
    }
    static selectItem(data) {
        (0, Utils_1.sendEventToServer)(events_1.RadialMenuEvents.Select, data);
        this.isOpen = !this.isOpen;
    }
}
exports.RadialMenu = RadialMenu;


/***/ }),

/***/ 1684:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = void 0;
const config_1 = __webpack_require__(4572);
const events_1 = __webpack_require__(8939);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const defaultSettings_1 = __webpack_require__(3689);
const settingsMutableData_1 = __webpack_require__(1963);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const SettingSectionId_1 = __webpack_require__(6603);
const NotificationTypes_1 = __webpack_require__(4815);
const SettingsTabId_1 = __webpack_require__(7761);
const Utils_1 = __webpack_require__(2453);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const NotificationsHandler_1 = __webpack_require__(5807);
class Settings {
    static initCefEvents() {
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.EscMenuEvents.UpdateSettingValue).addHandler((data) => {
            Settings.updateSetting(data.settingId, data.newValue, true);
        });
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.EscMenuEvents.SaveSettings).addHandler(this.sendServerSettings.bind(this));
        BrowserEventsHandler_1.BrowserEventsHandler.get(events_1.EscMenuEvents.GetOldSettings).addHandler(this.revertSettings.bind(this));
    }
    static get settings() {
        return this._settings;
    }
    static getValue(settingId) {
        var _a, _b;
        if (((_a = config_1.SettingsConfig[settingId]) === null || _a === void 0 ? void 0 : _a.disabledDefault) &&
            !this._enabledClientSettings.concat(settingId).includes(settingId) &&
            !this._enabledServerSettings.includes(settingId)) {
            return null;
        }
        return (_b = this._settings[settingId]) !== null && _b !== void 0 ? _b : null;
    }
    static registerUpdateHandler(settingId, handler) {
        var _a;
        const handlers = (_a = this._updateHandlers.get(settingId)) !== null && _a !== void 0 ? _a : [];
        handlers.push(handler);
        this._updateHandlers.set(settingId, handlers);
    }
    static toggleSetting(settingId, enabled) {
        var _a;
        const enabledSettings = (_a = this._enabledClientSettings) !== null && _a !== void 0 ? _a : [];
        if (enabled) {
            if (!enabledSettings.includes(settingId)) {
                enabledSettings.push(settingId);
            }
        }
        else {
            if (enabledSettings.includes(settingId)) {
                enabledSettings.splice(enabledSettings.indexOf(settingId), 1);
            }
        }
        this._enabledClientSettings = enabledSettings;
        this.initSettings(this._settings, this._enabledServerSettings);
    }
    static updateSetting(settingId, value, isFromUi = false) {
        if (!Object.keys(this._backupSettings).length) {
            this._backupSettings = this._settings;
        }
        const result = this.runUpdateHandler(settingId, value);
        if (isFromUi) {
            if (typeof result === 'string' || !result) {
                return NotificationsHandler_1.NotificationsHandler.send(typeof result === 'string' ? result : 'Ошибка!', NotificationTypes_1.NotificationTypes.Error);
            }
            this._settings[settingId] = value;
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetSetting}`, {
                settingId,
                data: { current: this._settings[settingId] },
            });
            this._toUpdateOnServer.push({ settingId, oldValue: this._settings[settingId], value });
        }
        else {
            this._settings[settingId] = value;
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetSetting}`, {
                settingId,
                data: { current: this._settings[settingId] },
            });
        }
    }
    static initSettings(settings, enabledServerSettings) {
        var _a;
        this._enabledServerSettings = enabledServerSettings;
        const enabledSettings = this._enabledClientSettings.concat(enabledServerSettings);
        const defaultSettings = (0, defaultSettings_1.getDefaultSettings)();
        const resultSettings = {};
        const toUpdateOnServer = [];
        for (const settingId of Object.keys(defaultSettings)) {
            if (((_a = config_1.SettingsConfig[settingId]) === null || _a === void 0 ? void 0 : _a.disabledDefault) && !enabledSettings.includes(settingId)) {
                continue;
            }
            if (settings[settingId] == null) {
                toUpdateOnServer.push({
                    settingId,
                    value: defaultSettings[settingId],
                });
            }
            const newValue = settings[settingId] == null ? defaultSettings[settingId] : settings[settingId];
            if (resultSettings[settingId] !== newValue) {
                this.runUpdateHandler(settingId, newValue);
            }
            resultSettings[settingId] = newValue;
            this._settings[settingId] = newValue;
        }
        const formattedSettings = this.formatSettingsForCef(resultSettings);
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.SetSettings}`, formattedSettings);
        if (toUpdateOnServer.length) {
            (0, Utils_1.sendEventToServer)(events_1.SettingsEvents.UpdateSettings, toUpdateOnServer);
        }
    }
    static formatSettingsForCef(settings) {
        var _a;
        const result = {};
        for (const category of Object.values(SettingsTabId_1.SettingsTabId)) {
            result[category] = [];
            for (const section of Object.values(SettingSectionId_1.SettingSectionId)) {
                result[category].push({
                    title: config_1.SettingSectionConfig[section],
                    parameters: [],
                });
            }
        }
        for (const settingId of Object.keys(settings)) {
            const settingConfig = config_1.SettingsConfig[settingId];
            if (settingConfig) {
                result[settingConfig.category][result[settingConfig.category].findIndex(section => section.title === config_1.SettingSectionConfig[settingConfig.section])].parameters.push({
                    id: settingId,
                    title: settingConfig.title,
                    type: settingConfig.type,
                    data: Object.assign(Object.assign({}, ((_a = settingConfig.data) !== null && _a !== void 0 ? _a : (0, settingsMutableData_1.getSettingMutableData)(settingId))), { current: settings[settingId] }),
                });
            }
        }
        return result;
    }
    static sendServerSettings() {
        if (!this._toUpdateOnServer.length) {
            return;
        }
        (0, Utils_1.sendEventToServer)(events_1.SettingsEvents.UpdateSettings, this._toUpdateOnServer);
        NotificationsHandler_1.NotificationsHandler.send('Некоторый настройки вступят в силу после перезагрузки игры');
        this._toUpdateOnServer = [];
        this._backupSettings = {};
    }
    static revertSettings() {
        if (!this._backupSettings) {
            return;
        }
        this._settings = this._backupSettings;
        Object.keys(this._settings).forEach(settingId => {
            this.runUpdateHandler(settingId, this._settings[settingId]);
        });
        this._backupSettings = {};
    }
    static runUpdateHandler(settingId, value) {
        var _a;
        const handlers = (_a = this._updateHandlers.get(settingId)) !== null && _a !== void 0 ? _a : [];
        for (const handler of handlers) {
            const result = handler(settingId, value);
            if (typeof result === 'string' || result) {
                return result;
            }
        }
        return false;
    }
}
exports.Settings = Settings;
Settings._settings = {};
Settings._backupSettings = {};
Settings._toUpdateOnServer = [];
Settings._enabledClientSettings = [];
Settings._enabledServerSettings = [];
Settings._updateHandlers = new Map();
Settings.InterfaceName = InterfacesName_1.BrowserInterfacesName.EscMenu;
Settings.InterfaceFunction = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.EscMenu];


/***/ }),

/***/ 9527:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.handleSettingsInit = exports.handleServerUpdateSettings = void 0;
const Settings_1 = __webpack_require__(1684);
function handleServerUpdateSettings(settings) {
    for (const { settingId, value } of settings) {
        Settings_1.Settings.updateSetting(settingId, value, false);
    }
}
exports.handleServerUpdateSettings = handleServerUpdateSettings;
function handleSettingsInit(settings, enabled) {
    Settings_1.Settings.initSettings(settings, enabled);
}
exports.handleSettingsInit = handleSettingsInit;


/***/ }),

/***/ 3689:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefaultSettings = void 0;
const SettingsId_1 = __webpack_require__(9373);
function getDefaultSettings() {
    return {
        [SettingsId_1.SettingsId.Binder_Default_W]: { deviceType: 0, codes: [17] },
        [SettingsId_1.SettingsId.Binder_Default_S]: { deviceType: 0, codes: [31] },
        [SettingsId_1.SettingsId.Binder_Default_A]: { deviceType: 0, codes: [30] },
        [SettingsId_1.SettingsId.Binder_Default_D]: { deviceType: 0, codes: [32] },
        [SettingsId_1.SettingsId.Binder_Default_Ctrl]: { deviceType: 0, codes: [29] },
        [SettingsId_1.SettingsId.Binder_Default_Jump]: { deviceType: 0, codes: [57] },
        [SettingsId_1.SettingsId.Binder_Default_Sprint]: { deviceType: 0, codes: [42] },
        [SettingsId_1.SettingsId.Binder_Default_Step]: { deviceType: 0, codes: [58] },
        [SettingsId_1.SettingsId.Binder_Default_Combat_Mode]: { deviceType: 0, codes: [19] },
        [SettingsId_1.SettingsId.Binder_Default_Attack_Right]: { deviceType: 1, codes: [257] },
        [SettingsId_1.SettingsId.Binder_Default_Target]: { deviceType: 1, codes: [258] },
        [SettingsId_1.SettingsId.Binder_Default_Attack_Left]: { deviceType: 1, codes: [256] },
        [SettingsId_1.SettingsId.Binder_Default_EscMenu]: { deviceType: 0, codes: [1] },
        [SettingsId_1.SettingsId.Binder_Inventory]: { deviceType: 0, codes: [15] },
        [SettingsId_1.SettingsId.Binder_Skins]: { deviceType: 0, codes: [48] },
        [SettingsId_1.SettingsId.Binder_Animation_Menu]: { deviceType: 0, codes: [208] },
        [SettingsId_1.SettingsId.Binder_Animation_Radial]: { deviceType: 0, codes: [22] },
        [SettingsId_1.SettingsId.Binder_Stop_Animation]: { deviceType: 0, codes: [46] },
        [SettingsId_1.SettingsId.Binder_Nicknames]: { deviceType: 0, codes: [59] },
        [SettingsId_1.SettingsId.Binder_Cursor]: { deviceType: 0, codes: [64] },
        [SettingsId_1.SettingsId.Binder_Hud]: { deviceType: 0, codes: [61] },
        [SettingsId_1.SettingsId.Binder_Chat]: { deviceType: 0, codes: [20] },
        [SettingsId_1.SettingsId.Binder_Voice]: { deviceType: 0, codes: [47] },
        [SettingsId_1.SettingsId.Binder_Colshape]: { deviceType: 0, codes: [18] },
        [SettingsId_1.SettingsId.Binder_FactionMenu]: { deviceType: 0, codes: [200] },
        [SettingsId_1.SettingsId.Binder_Accept]: { deviceType: 0, codes: [21] },
        [SettingsId_1.SettingsId.Binder_Cancel]: { deviceType: 0, codes: [49] },
        [SettingsId_1.SettingsId.Binder_Radial]: { deviceType: 0, codes: [34] },
        [SettingsId_1.SettingsId.Binder_CharacterMenu]: { deviceType: 0, codes: [50] },
        [SettingsId_1.SettingsId.Binder_AdminPanel]: { deviceType: 0, codes: [24] },
        [SettingsId_1.SettingsId.Sound_General]: 1.0,
        [SettingsId_1.SettingsId.Sound_Effects]: 1.0,
        [SettingsId_1.SettingsId.Sound_Footstep]: 1.0,
        [SettingsId_1.SettingsId.Sound_Music]: 1.0,
        [SettingsId_1.SettingsId.Sound_Voice]: 1.0,
        [SettingsId_1.SettingsId.Sound_Microphone]: 1.0,
        [SettingsId_1.SettingsId.Game_MouseSensitivity]: 0.03,
        [SettingsId_1.SettingsId.Game_Crosshair]: true,
        [SettingsId_1.SettingsId.Game_FOV]: 80,
        [SettingsId_1.SettingsId.Video_Gamma]: 1,
        [SettingsId_1.SettingsId.Video_ActorFade]: 6,
        [SettingsId_1.SettingsId.Video_ItemFade]: 3,
        [SettingsId_1.SettingsId.Video_ObjectFade]: 5,
        [SettingsId_1.SettingsId.Video_GrassFade]: 3500,
    };
}
exports.getDefaultSettings = getDefaultSettings;


/***/ }),

/***/ 5427:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(1684), exports);
__webpack_require__(9884);


/***/ }),

/***/ 1963:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSettingMutableData = void 0;
const SettingsId_1 = __webpack_require__(9373);
const VoiceChat_1 = __webpack_require__(1299);
function getSettingMutableData(settingId) {
    switch (settingId) {
        case SettingsId_1.SettingsId.Sound_RecordDevices:
            return {
                values: VoiceChat_1.VoiceChat.getRecordDevices().map((v) => {
                    return { id: v.id, title: v.name };
                }),
            };
        default:
            return null;
    }
}
exports.getSettingMutableData = getSettingMutableData;


/***/ }),

/***/ 9884:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const skyrimPlatform_1 = __webpack_require__(2112);
const Settings_1 = __webpack_require__(1684);
const SettingsId_1 = __webpack_require__(9373);
const config_1 = __webpack_require__(4572);
const VoiceChat_1 = __webpack_require__(1299);
const BinderUpdate = [
    SettingsId_1.SettingsId.Binder_Animation_Menu,
    SettingsId_1.SettingsId.Binder_Animation_Radial,
    SettingsId_1.SettingsId.Binder_Radial,
    SettingsId_1.SettingsId.Binder_Chat,
    SettingsId_1.SettingsId.Binder_Colshape,
    SettingsId_1.SettingsId.Binder_Hud,
    SettingsId_1.SettingsId.Binder_Inventory,
    SettingsId_1.SettingsId.Binder_Skins,
    SettingsId_1.SettingsId.Binder_Nicknames,
    SettingsId_1.SettingsId.Binder_Stop_Animation,
    SettingsId_1.SettingsId.Binder_Voice,
    SettingsId_1.SettingsId.Binder_FactionMenu,
    SettingsId_1.SettingsId.Binder_AdminPanel,
    SettingsId_1.SettingsId.Binder_CharacterMenu,
];
BinderUpdate.forEach(binderSettings => {
    Settings_1.Settings.registerUpdateHandler(binderSettings, (settingId, value) => {
        var _a;
        const SettingConfig = config_1.SettingsConfig[settingId];
        if ((_a = SettingConfig.data) === null || _a === void 0 ? void 0 : _a.isBlocked) {
            return 'Вы не можете этого сделать';
        }
        if (value === null || value === void 0 ? void 0 : value.codes.some(v => isNaN(v))) {
            return 'Вы не можете этого сделать';
        }
        Object.keys(Settings_1.Settings.settings).forEach(settingId => {
            if (JSON.stringify(Settings_1.Settings.settings[settingId]) === JSON.stringify(value)) {
                return 'Вы не можете этого сделать';
            }
        });
        return true;
    });
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_General, (settingId, value) => {
    var _a, _b;
    const SettingConfig = config_1.SettingsConfig[settingId];
    if (value > ((_a = SettingConfig.data) === null || _a === void 0 ? void 0 : _a.max) || value < ((_b = SettingConfig.data) === null || _b === void 0 ? void 0 : _b.min)) {
        return 'Вы не можете этого сделать';
    }
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fAudioMasterVolume:AudioMenu', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_Effects, (settingId, value) => {
    var _a, _b;
    const SettingConfig = config_1.SettingsConfig[settingId];
    if (value > ((_a = SettingConfig.data) === null || _a === void 0 ? void 0 : _a.max) || value < ((_b = SettingConfig.data) === null || _b === void 0 ? void 0 : _b.min)) {
        return 'Вы не можете этого сделать';
    }
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fVal0:AudioMenu', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_Footstep, (settingId, value) => {
    var _a, _b;
    const SettingConfig = config_1.SettingsConfig[settingId];
    if (value > ((_a = SettingConfig.data) === null || _a === void 0 ? void 0 : _a.max) || value < ((_b = SettingConfig.data) === null || _b === void 0 ? void 0 : _b.min)) {
        return 'Вы не можете этого сделать';
    }
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fVal1:AudioMenu', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_Music, (settingId, value) => {
    var _a, _b;
    const SettingConfig = config_1.SettingsConfig[settingId];
    if (value > ((_a = SettingConfig.data) === null || _a === void 0 ? void 0 : _a.max) || value < ((_b = SettingConfig.data) === null || _b === void 0 ? void 0 : _b.min)) {
        return 'Вы не можете этого сделать';
    }
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fVal3:AudioMenu', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_Voice, (settingId, value) => {
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_Microphone, (settingId, value) => {
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Sound_RecordDevices, (settingId, value) => {
    const recordDevices = VoiceChat_1.VoiceChat.getRecordDevices();
    if (!recordDevices.find(v => v.id === value)) {
        return 'Вы не можете этого сделать';
    }
    VoiceChat_1.VoiceChat.setRecordDevice(value);
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Game_MouseSensitivity, (settingId, value) => {
    var _a, _b;
    const SettingConfig = config_1.SettingsConfig[settingId];
    if (value > ((_a = SettingConfig.data) === null || _a === void 0 ? void 0 : _a.max) || value < ((_b = SettingConfig.data) === null || _b === void 0 ? void 0 : _b.min)) {
        return 'Вы не можете этого сделать';
    }
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fMouseHeadingSensitivity:Controls', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Game_Crosshair, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIBool('bCrosshairEnabled:MAIN', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Game_FOV, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fDefaultWorldFOV:Display', value);
        skyrimPlatform_1.Utility.setINIFloat('fDefault1stPersonFOV:Display', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Video_Gamma, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fGamma:Display', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Video_ActorFade, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fLODFadeOutMultActors:LOD', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Video_ItemFade, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fLODFadeOutMultItems:LOD', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Video_ObjectFade, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fLODFadeOutMultObjects:LOD', value);
    });
    return true;
});
Settings_1.Settings.registerUpdateHandler(SettingsId_1.SettingsId.Video_GrassFade, (settingId, value) => {
    (0, skyrimPlatform_1.once)('update', () => {
        skyrimPlatform_1.Utility.setINIFloat('fGrassStartFadeDistance:Grass', value);
    });
    return true;
});


/***/ }),

/***/ 6241:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.initSpawnSelectorEvents = exports.finalAuth = exports.showSpawnSelector = void 0;
const BrowserEventsHandler_1 = __webpack_require__(3551);
const Hud_1 = __webpack_require__(9720);
const formView_1 = __webpack_require__(3770);
const Utils_1 = __webpack_require__(2453);
const spApiInteraction_1 = __webpack_require__(3331);
const remoteServer_1 = __webpack_require__(8986);
const browserService_1 = __webpack_require__(5472);
const GameSessionTime_1 = __webpack_require__(1648);
const Recon_1 = __webpack_require__(4801);
const BlipHandler_1 = __webpack_require__(9242);
const PickupItem_1 = __webpack_require__(7005);
const DefaultBlipts_1 = __webpack_require__(2021);
const PolygonHandler_1 = __webpack_require__(1033);
function showSpawnSelector(data) {
    const dto = data.map(item => {
        if (item.location === null) {
            return 'Недоступно';
        }
        else {
            return true;
        }
    });
    spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('selectSpawn/show', dto);
}
exports.showSpawnSelector = showSpawnSelector;
function finalAuth() {
    spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).executeBrowser('selectSpawn/hide', null, false);
    Hud_1.Hud.open();
    formView_1.FormView.isDisplayingNicknames = true;
    spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(browserService_1.BrowserService).toggleFocus();
    GameSessionTime_1.GameSessionTime.startTimer();
    Recon_1.Recon.init();
    DefaultBlipts_1.DefaultBlips.init();
    BlipHandler_1.BlipHandler.init();
    PickupItem_1.PickupItem.init();
    new PolygonHandler_1.ClientPolygonHandler();
    (0, Utils_1.freezePlayer)(false);
}
exports.finalAuth = finalAuth;
let playerChooseSpawn = false;
function initSpawnSelectorEvents() {
    BrowserEventsHandler_1.BrowserEventsHandler.get('selectSpawn:select').addHandler((data) => {
        if (playerChooseSpawn) {
            return;
        }
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer).teleportAfterAuth = true;
        (0, Utils_1.sendEventToServer)('spawnSelector:select', data.pointId);
        playerChooseSpawn = true;
    });
}
exports.initSpawnSelectorEvents = initSpawnSelectorEvents;


/***/ }),

/***/ 2892:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BansSystem = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const spApiInteraction_1 = __webpack_require__(3331);
const browserService_1 = __webpack_require__(5472);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const launcherService_1 = __webpack_require__(2041);
class BansSystem {
    static show(bansData) {
        (0, skyrimPlatform_1.once)('update', () => {
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(launcherService_1.LauncherService)
                .quitFromGame('');
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.BanInfo}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.BanInfo].SetInfo}`, bansData);
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.BanInfo}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.BanInfo].Show}`, null, true);
        });
    }
}
exports.BansSystem = BansSystem;


/***/ }),

/***/ 5431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Blip = void 0;
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const spApiInteraction_1 = __webpack_require__(3331);
const browserService_1 = __webpack_require__(5472);
class Blip {
    constructor(_id, _type, _name, _fullName, _alwaysVisibleOnMinimap, _position, _dimension) {
        this._id = _id;
        this._type = _type;
        this._name = _name;
        this._fullName = _fullName;
        this._alwaysVisibleOnMinimap = _alwaysVisibleOnMinimap;
        this._position = _position;
        this._dimension = _dimension;
        this.InterfaceName = InterfacesName_1.BrowserInterfacesName.Map;
        this.InterfaceFunction = FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Map];
    }
    get id() {
        return this._id;
    }
    get type() {
        return this._type;
    }
    get name() {
        return this._name;
    }
    get fullName() {
        return this._fullName;
    }
    get alwaysVisibleOnMinimap() {
        return this._alwaysVisibleOnMinimap;
    }
    get position() {
        return this._position;
    }
    get dimension() {
        return this._dimension;
    }
    addToMap() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.AddBlip}`, this.getDTO());
    }
    removeTFromMap() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${this.InterfaceName}/${this.InterfaceFunction.RemoveBlip}`, { blipId: this.id });
    }
    getDTO() {
        return {
            id: this.id,
            icon: this.type,
            name: {
                short: this.name,
                full: this.fullName,
            },
            position: { x: this.position.x, y: this.position.y },
            categoryId: this.type,
            alwaysVisibleOnMinimap: this._alwaysVisibleOnMinimap,
        };
    }
}
exports.Blip = Blip;


/***/ }),

/***/ 9242:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlipHandler = void 0;
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const BlipCategoryConfig_1 = __webpack_require__(5763);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const Blip_1 = __webpack_require__(5431);
class BlipHandler {
    static init() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Map}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Map].SetBlipCategories}`, Object.values(BlipCategoryConfig_1.BlipCategoryConfig));
    }
    static create(id, blipType, name, fullName, alwaysVisibleOnMinimap, position, dimension) {
        const blip = new Blip_1.Blip(id, blipType, name, fullName, alwaysVisibleOnMinimap, position, dimension);
        if (this.storage.has(blip.id)) {
            return null;
        }
        this.storage.set(blip.id, blip);
        blip.addToMap();
        return blip;
    }
    static destroy(id) {
        if (!this.storage.has(id)) {
            return;
        }
        const blip = this.storage.get(id);
        blip.removeTFromMap();
        this.storage.delete(id);
    }
}
exports.BlipHandler = BlipHandler;
BlipHandler.storage = new Map();


/***/ }),

/***/ 2021:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultBlips = void 0;
const BlipType_1 = __webpack_require__(6543);
const Vector3_1 = __webpack_require__(2233);
const BlipHandler_1 = __webpack_require__(9242);
class DefaultBlips {
    static init() {
        BlipHandler_1.BlipHandler.create('blip_riverwood', BlipType_1.BlipType.Village, 'Ривервуд', 'Ривервуд', false, new Vector3_1.Vector3(22099.3027, -44663.6484, -156.0882), 0);
        BlipHandler_1.BlipHandler.create('blip_whiterun', BlipType_1.BlipType.Whiterun, 'Вайтран', 'Вайтран', true, new Vector3_1.Vector3(19269.1387, -7430.1006, -3603.1489), 0);
        BlipHandler_1.BlipHandler.create('blip_rorikstead', BlipType_1.BlipType.Village, 'Рорикстед', 'Рорикстед', false, new Vector3_1.Vector3(-82750.5078, 5506.8306, -4644.459), 0);
        BlipHandler_1.BlipHandler.create('blip_markarth', BlipType_1.BlipType.Markarth, 'Маркарт', 'Маркарт', true, new Vector3_1.Vector3(-173136.6719, 5476.478, -3349.5298), 0);
        BlipHandler_1.BlipHandler.create('blip_Dubovaya', BlipType_1.BlipType.Village, 'Язык дракона', 'Язык дракона', false, new Vector3_1.Vector3(-15669.21, -66457.5938, 842.176), 0);
        BlipHandler_1.BlipHandler.create('blip_falkreath', BlipType_1.BlipType.Falkreath, 'Фолкрит', 'Фолкрит', true, new Vector3_1.Vector3(-29645.4277, -87691.875, -3037.9231), 0);
        BlipHandler_1.BlipHandler.create('blip_gornaya', BlipType_1.BlipType.Village, 'Северный лук', 'Северный лук', false, new Vector3_1.Vector3(100525.6797, -90411.0, 13852.8262), 0);
        BlipHandler_1.BlipHandler.create('blip_ivastread', BlipType_1.BlipType.Village, 'Айварстед', 'Айварстед', false, new Vector3_1.Vector3(75907.0391, -62201.9023, 10543.125), 0);
        BlipHandler_1.BlipHandler.create('blip_riften', BlipType_1.BlipType.Riften, 'Рифтен', 'Рифтен', true, new Vector3_1.Vector3(172925.2188, -97159.5469, 11677.0264), 0);
        BlipHandler_1.BlipHandler.create('blip_shor', BlipType_1.BlipType.Village, 'Камень Шора', 'Камень Шора', false, new Vector3_1.Vector3(163637.9844, -60625.9648, 7070.3574), 0);
        BlipHandler_1.BlipHandler.create('blip_kynesgrove', BlipType_1.BlipType.Village, 'Роща Кин', 'Роща Кин', false, new Vector3_1.Vector3(133646.0469, 11755.0723, -12491.2119), 0);
        BlipHandler_1.BlipHandler.create('blip_windhelm', BlipType_1.BlipType.Windhelm, 'Виндхельм', 'Виндхельм', true, new Vector3_1.Vector3(134984.1406, 34547.2695, -12440.7393), 0);
        BlipHandler_1.BlipHandler.create('blip_dawnstar', BlipType_1.BlipType.Dawnstar, 'Данстар', 'Данстар', true, new Vector3_1.Vector3(30765.625, 104617.2891, -13856.8877), 0);
        BlipHandler_1.BlipHandler.create('blip_morthal', BlipType_1.BlipType.Morthal, 'Морфал', 'Морфал', true, new Vector3_1.Vector3(-39072.3125, 65554.5547, -13946.7012), 0);
        BlipHandler_1.BlipHandler.create('blip_solitude', BlipType_1.BlipType.Solitude, 'Солитьюд', 'Солитьюд', true, new Vector3_1.Vector3(-66052.2109, 104228.7578, -8425.1279), 0);
        BlipHandler_1.BlipHandler.create('blip_graniteHall', BlipType_1.BlipType.Village, 'Гранитный холм', 'Гранитный холм', false, new Vector3_1.Vector3(-12603.1719, 18349.791, -6383.6396), 0);
        BlipHandler_1.BlipHandler.create('blip_winterhold', BlipType_1.BlipType.Winterhold, 'Винтерхолд', 'Винтерхолд', true, new Vector3_1.Vector3(109619.7344, 101713.7266, -9035.7451), 0);
        BlipHandler_1.BlipHandler.create('blip_dragon_bridge', BlipType_1.BlipType.Village, 'Драконий Мост', 'Драконий Мост', false, new Vector3_1.Vector3(-101463.9922, 84196.2031, -12040.2236), 0);
        BlipHandler_1.BlipHandler.create('blip_dragon_lainalten', BlipType_1.BlipType.Village, 'Лейналтен', 'Лейналтен', false, new Vector3_1.Vector3(-85335.2422, 42475.457, -12275.7705), 0);
        BlipHandler_1.BlipHandler.create('blip_amber_guard', BlipType_1.BlipType.Village, 'Янтарный Страж', 'Янтарный Страж', false, new Vector3_1.Vector3(-120181.0859, 41233.8789, -7248.8999), 0);
        BlipHandler_1.BlipHandler.create('blip_karthwasten', BlipType_1.BlipType.Village, 'Картвастен', 'Картвастен', false, new Vector3_1.Vector3(-132433.0625, 38777.7539, -6226.4082), 0);
    }
}
exports.DefaultBlips = DefaultBlips;


/***/ }),

/***/ 4633:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CameraManager = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
class CameraManager {
    constructor(settings, scenes) {
        this.settings = settings;
        this.scenes = scenes;
    }
    static create(settings, scenes) {
        if ((0, skyrimPlatform_1.cameraIsRelative)()) {
            return;
        }
        else {
            return new CameraManager(settings, scenes);
        }
    }
    init() {
        (0, skyrimPlatform_1.once)('update', () => {
            try {
                (0, skyrimPlatform_1.cameraRelativeEnable)();
                (0, skyrimPlatform_1.cameraRelativeProvideSettings)(this.settings.yawSpeed, this.settings.pitchSpeed, this.settings.moveSpeed);
                const firstSceneKey = Object.keys(this.scenes)[0];
                const firstScene = this.scenes[firstSceneKey];
                if (firstScene) {
                    (0, skyrimPlatform_1.cameraRelativeSetCoordinates)(firstScene.position.getNiPoint3(), firstScene.direction.getNiPoint3());
                }
            }
            catch (error) {
            }
        });
    }
    changeScene(sceneId) {
        (0, skyrimPlatform_1.once)('update', () => {
            try {
                const newScene = this.scenes[sceneId];
                if (!newScene) {
                    return;
                }
                (0, skyrimPlatform_1.cameraRelativeSetCoordinates)(newScene.position.getNiPoint3(), newScene.direction.getNiPoint3());
            }
            catch (error) {
            }
        });
    }
    destroy() {
        (0, skyrimPlatform_1.once)('update', () => {
            try {
                (0, skyrimPlatform_1.cameraRelativeDisable)();
            }
            catch (error) {
            }
        });
    }
}
exports.CameraManager = CameraManager;


/***/ }),

/***/ 5498:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Colshape = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const events_1 = __webpack_require__(980);
const ColshapesHandler_1 = __webpack_require__(9978);
const Player_1 = __webpack_require__(5456);
const Utils_1 = __webpack_require__(2453);
const FunctionName_1 = __webpack_require__(9865);
const InterfacesName_1 = __webpack_require__(3638);
const settings_1 = __webpack_require__(5427);
const SettingsId_1 = __webpack_require__(9373);
const skyrimKeyCodeName_1 = __webpack_require__(6158);
const browserService_1 = __webpack_require__(5472);
const spApiInteraction_1 = __webpack_require__(3331);
const remoteServer_1 = __webpack_require__(8986);
const BlipHandler_1 = __webpack_require__(9242);
class Colshape {
    constructor(id, position, radius, cellOrWorld, dimension, text, createMarker, isInteraction, blip, npc) {
        this.playerInColshape = false;
        this.id = id;
        this.position = position;
        this.radius = radius;
        this.cellOrWorld = cellOrWorld;
        this.dimension = dimension;
        this.text = text;
        this.isCreateMarker = createMarker;
        this.isInteraction = isInteraction;
        this.blip = null;
        this.npc = npc;
        if (this.isCreateMarker) {
            this.createMarker();
        }
        this.createBlip(blip);
    }
    onPlayerEnterColshape() {
        this.drawText();
        this.playerInColshape = true;
        (0, Utils_1.sendEventToServer)(events_1.ColshapeEvents.onPlayerEnter, this.id);
    }
    onPlayerExitColshape() {
        this === null || this === void 0 ? void 0 : this.destroyText();
        this.playerInColshape = false;
        (0, Utils_1.sendEventToServer)(events_1.ColshapeEvents.onPlayerExit, this.id);
    }
    destroy() {
        this === null || this === void 0 ? void 0 : this.destroyText();
        this.destroyBlip();
        if (this.isCreateMarker) {
            this.destroyMarker();
        }
    }
    playerInteracted() {
        var _a;
        this === null || this === void 0 ? void 0 : this.destroyText();
        const remoteServer = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer);
        const worlds = remoteServer.getWorldModel();
        const playerDimension = (_a = worlds.forms.find(v => v === null || v === void 0 ? void 0 : v.isMyClone)) === null || _a === void 0 ? void 0 : _a.playerDimension;
        if (Player_1.localPlayer.position.dist(this.position) > this.radius || Player_1.localPlayer.cell !== this.cellOrWorld || playerDimension !== this.dimension) {
            this.playerInColshape = false;
            return;
        }
        (0, Utils_1.sendEventToServer)(events_1.ColshapeEvents.onPlayerInteracted, this.id);
    }
    drawText() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetInteractNotification}`, {
            show: true,
            text: this.text.length === 0 ? 'Для взаимодействия нажмите' : this.text,
            button: this.isInteraction
                ? skyrimKeyCodeName_1.SkyrimKeyNames[settings_1.Settings.getValue(SettingsId_1.SettingsId.Binder_Colshape).codes[0]]
                : '',
        });
    }
    destroyText() {
        spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(browserService_1.BrowserService)
            .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.Hud}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.Hud].SetShowInteractNotification}`, false);
    }
    createMarker() {
        (0, skyrimPlatform_1.once)('update', () => {
            var _a, _b, _c;
            this.marker = Player_1.localPlayer.actor.placeAtMe(skyrimPlatform_1.Game.getForm(ColshapesHandler_1.MARKER_BASE_ID), 1, false, false);
            skyrimPlatform_1.TESModPlatform.moveRefrToPosition(this.marker, skyrimPlatform_1.Cell.from(skyrimPlatform_1.Game.getFormEx(this.cellOrWorld)), skyrimPlatform_1.WorldSpace.from(skyrimPlatform_1.Game.getFormEx(this.cellOrWorld)), this.position.x, this.position.y, this.position.z, 0, 0, 0);
            (_a = this.marker) === null || _a === void 0 ? void 0 : _a.setPosition(this.position.x, this.position.y, this.position.z);
            (_b = this.marker) === null || _b === void 0 ? void 0 : _b.setAngle(0, 0, 0);
            this.markerId = (_c = this.marker) === null || _c === void 0 ? void 0 : _c.getFormID();
        });
    }
    createBlip(blip) {
        if (blip) {
            this.blip = BlipHandler_1.BlipHandler.create(this.id, blip.type, blip.name, blip.fullName, blip.alwaysVisibleOnMinimap, this.position, this.dimension);
        }
        else {
            this.blip = null;
        }
    }
    destroyBlip() {
        if (this.blip) {
            BlipHandler_1.BlipHandler.destroy(this.blip.id);
            this.blip = null;
        }
    }
    destroyMarker() {
        (0, skyrimPlatform_1.once)('update', () => {
            const marker = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(this.markerId));
            marker.disableNoWait(true);
            marker.delete();
        });
    }
}
exports.Colshape = Colshape;


/***/ }),

/***/ 9978:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColshapesHandler = exports.NPC_BASE_ID = exports.MARKER_BASE_ID = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Colshape_1 = __webpack_require__(5498);
const Binder_1 = __webpack_require__(9132);
const binder_1 = __webpack_require__(1220);
const Player_1 = __webpack_require__(5456);
const Quadtree_1 = __webpack_require__(4018);
const Rectangle_1 = __webpack_require__(8476);
const spApiInteraction_1 = __webpack_require__(3331);
const remoteServer_1 = __webpack_require__(8986);
const Utils_1 = __webpack_require__(2453);
exports.MARKER_BASE_ID = parseInt('09003347', 16);
exports.NPC_BASE_ID = parseInt('3901f212', 16);
const MAX_DISTANCE = 2000;
class ColshapesHandler {
    static init() {
        Binder_1.Binder.bindRelease(binder_1.BinderHash.Colshape, this.playerInteracted.bind(this));
        const boundary = new Rectangle_1.Rectangle(-200000, -200000, 400000, 400000);
        this.quadtree = new Quadtree_1.Quadtree(boundary, 4);
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.checkColshapes();
        }, 'Colshapes'));
    }
    static createColshape(id, position, radius, cellOrWorld, dimension, text, createMarker, isInteraction, blipData, createNpc) {
        if (this.storage.has(id)) {
            return;
        }
        const colshape = new Colshape_1.Colshape(id, position, radius, cellOrWorld, dimension, text, createMarker, isInteraction, blipData, createNpc);
        this.storage.set(id, colshape);
        this.quadtree.insert(colshape);
    }
    static destroyColshape(id) {
        const colshape = this.storage.get(id);
        if (!colshape) {
            return;
        }
        colshape.destroy();
        this.storage.delete(id);
        this.quadtree.remove(colshape.position, colshape);
    }
    static playerInteracted() {
        for (const colshape of this.storage.values()) {
            if (colshape.playerInColshape) {
                this.lastInteractedColshape = colshape.id;
                colshape.playerInteracted();
                break;
            }
        }
    }
    static checkColshapes() {
        var _a;
        if (this.storage.size === 0) {
            return;
        }
        const playerPosition = Player_1.localPlayer.position;
        const nearbyColshapes = this.findNearbyColshapes(playerPosition, MAX_DISTANCE);
        if (this.lastInteractedColshape) {
            const lastColshape = this.storage.get(this.lastInteractedColshape);
            if (lastColshape) {
                if (Player_1.localPlayer.position.dist(lastColshape.position) > lastColshape.radius) {
                    this.lastInteractedColshape = null;
                    lastColshape.onPlayerExitColshape();
                }
                else {
                    return;
                }
            }
        }
        const remoteServer = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer);
        const worlds = remoteServer.getWorldModel();
        const playerDimension = (_a = worlds.forms.find(v => v === null || v === void 0 ? void 0 : v.isMyClone)) === null || _a === void 0 ? void 0 : _a.playerDimension;
        for (const colshape of nearbyColshapes) {
            const inRadius = playerPosition.dist(colshape.position) <= colshape.radius;
            const inSameCell = Player_1.localPlayer.cell === colshape.cellOrWorld;
            const isSameDimension = playerDimension === colshape.dimension;
            if (inRadius && inSameCell && !colshape.playerInColshape && isSameDimension) {
                colshape.onPlayerEnterColshape();
            }
            else if ((!inRadius || !inSameCell) && colshape.playerInColshape) {
                colshape.onPlayerExitColshape();
            }
        }
    }
    static findNearbyColshapes(playerPosition, searchRadius) {
        var _a;
        const searchArea = new Rectangle_1.Rectangle(playerPosition.x - searchRadius / 2, playerPosition.y - searchRadius / 2, searchRadius, searchRadius);
        const playerDimension = (_a = spApiInteraction_1.SpApiInteraction.getControllerInstance()
            .lookupListener(remoteServer_1.RemoteServer)
            .getWorldModel()
            .forms.find(v => v === null || v === void 0 ? void 0 : v.isMyClone)) === null || _a === void 0 ? void 0 : _a.playerDimension;
        return this.quadtree.query(searchArea).filter(colshape => colshape.dimension === playerDimension);
    }
}
exports.ColshapesHandler = ColshapesHandler;
ColshapesHandler.storage = new Map();
ColshapesHandler.lastInteractedColshape = null;


/***/ }),

/***/ 4018:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Quadtree = void 0;
const Rectangle_1 = __webpack_require__(8476);
class Quadtree {
    constructor(boundary, capacity) {
        this.northeast = null;
        this.northwest = null;
        this.southeast = null;
        this.southwest = null;
        this.boundary = boundary;
        this.capacity = capacity;
        this.points = [];
        this.divided = false;
    }
    subdivide() {
        const x = this.boundary.x;
        const y = this.boundary.y;
        const w = this.boundary.width / 2;
        const h = this.boundary.height / 2;
        const ne = new Rectangle_1.Rectangle(x + w, y - h, w, h);
        this.northeast = new Quadtree(ne, this.capacity);
        const nw = new Rectangle_1.Rectangle(x - w, y - h, w, h);
        this.northwest = new Quadtree(nw, this.capacity);
        const se = new Rectangle_1.Rectangle(x + w, y + h, w, h);
        this.southeast = new Quadtree(se, this.capacity);
        const sw = new Rectangle_1.Rectangle(x - w, y + h, w, h);
        this.southwest = new Quadtree(sw, this.capacity);
        this.divided = true;
    }
    insert(item) {
        var _a, _b, _c, _d;
        if (!this.boundary.contains(item.position)) {
            return false;
        }
        if (this.points.length < this.capacity) {
            this.points.push(item);
            return true;
        }
        else {
            if (!this.divided) {
                this.subdivide();
            }
            if ((_a = this.northeast) === null || _a === void 0 ? void 0 : _a.insert(item)) {
                return true;
            }
            else if ((_b = this.northwest) === null || _b === void 0 ? void 0 : _b.insert(item)) {
                return true;
            }
            else if ((_c = this.southeast) === null || _c === void 0 ? void 0 : _c.insert(item)) {
                return true;
            }
            else if ((_d = this.southwest) === null || _d === void 0 ? void 0 : _d.insert(item)) {
                return true;
            }
        }
        return false;
    }
    query(range, found = []) {
        var _a, _b, _c, _d;
        if (!this.boundary.intersects(range)) {
            return found;
        }
        for (const item of this.points) {
            if (range.contains(item.position)) {
                found.push(item);
            }
        }
        if (this.divided) {
            (_a = this.northeast) === null || _a === void 0 ? void 0 : _a.query(range, found);
            (_b = this.northwest) === null || _b === void 0 ? void 0 : _b.query(range, found);
            (_c = this.southeast) === null || _c === void 0 ? void 0 : _c.query(range, found);
            (_d = this.southwest) === null || _d === void 0 ? void 0 : _d.query(range, found);
        }
        return found;
    }
    remove(position, item) {
        var _a, _b, _c, _d;
        if (!this.boundary.contains(position)) {
            return false;
        }
        const index = this.points.indexOf(item);
        if (index !== -1) {
            this.points.splice(index, 1);
            return true;
        }
        if (this.divided) {
            return (((_a = this.northeast) === null || _a === void 0 ? void 0 : _a.remove(position, item)) ||
                ((_b = this.northwest) === null || _b === void 0 ? void 0 : _b.remove(position, item)) ||
                ((_c = this.southeast) === null || _c === void 0 ? void 0 : _c.remove(position, item)) ||
                ((_d = this.southwest) === null || _d === void 0 ? void 0 : _d.remove(position, item)) ||
                false);
        }
        return false;
    }
}
exports.Quadtree = Quadtree;


/***/ }),

/***/ 8476:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rectangle = void 0;
class Rectangle {
    constructor(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    contains(point) {
        return point.x >= this.x - this.width && point.x < this.x + this.width && point.y >= this.y - this.height && point.y < this.y + this.height;
    }
    intersects(range) {
        return !(range.x - range.width > this.x + this.width ||
            range.x + range.width < this.x - this.width ||
            range.y - range.height > this.y + this.height ||
            range.y + range.height < this.y - this.height);
    }
}
exports.Rectangle = Rectangle;


/***/ }),

/***/ 3352:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GameRestrictions = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
class GameRestrictions {
    static get canRun() {
        return this._canRun;
    }
    static get canSprint() {
        return this._canSprint;
    }
    static get canJump() {
        return this._canJump;
    }
    static get canCombatStage() {
        return this._canCombatStage;
    }
    static get canSneaking() {
        return this._canSneaking;
    }
    static set canRun(toggle) {
        this._canRun = toggle;
    }
    static set canSprint(toggle) {
        this._canSprint = toggle;
    }
    static set canJump(toggle) {
        this._canJump = toggle;
    }
    static set canSneaking(toggle) {
        this._canSneaking = toggle;
        if (this._canSneaking) {
            skyrimPlatform_1.Game.enablePlayerControls(true, true, true, true, true, true, true, true, 0);
        }
        else {
            skyrimPlatform_1.Game.disablePlayerControls(false, false, false, false, true, false, false, false, 0);
        }
    }
    static set canCombatStage(toggle) {
        this._canCombatStage = toggle;
        (0, skyrimPlatform_1.once)('update', () => {
            skyrimPlatform_1.Debug.sendAnimationEvent(Player_1.localPlayer.actor, 'Unequip');
        });
    }
    static initAnimationsHook() {
        skyrimPlatform_1.hooks.sendAnimationEvent.add({
            enter: ctx => {
                if (ctx.animEventName === 'SprintStart' && !this._canSprint) {
                    ctx.animEventName = '';
                    return;
                }
                if (ctx.animEventName === 'WeapEquip' && !this._canCombatStage) {
                    ctx.animEventName = '';
                    return;
                }
            },
            leave: ctx => { },
        }, 0x14, 0x14);
    }
}
exports.GameRestrictions = GameRestrictions;
GameRestrictions._canRun = true;
GameRestrictions._canSprint = true;
GameRestrictions._canJump = true;
GameRestrictions._canCombatStage = true;
GameRestrictions._canSneaking = true;


/***/ }),

/***/ 7596:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Lable = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const formView_1 = __webpack_require__(3770);
class Lable {
    constructor(id, text, color, drawDistance, position, cellOrWorld) {
        this.id = id;
        this.position = position;
        this.text = text;
        this.color = color;
        this.drawDistance = drawDistance;
        this.cellOrWorld = cellOrWorld;
    }
    drawLable() {
        const resolution = (0, formView_1.getScreenResolution)();
        const textXPos = Math.round(this.position.x * resolution.width);
        const textYPos = Math.round((1 - this.position.y) * resolution.height);
        this.textId = (0, skyrimPlatform_1.createText)(textXPos, textYPos, `${this.text}`, this.color);
        (0, skyrimPlatform_1.setTextString)(this.textId, `${this.text}`);
        (0, skyrimPlatform_1.setTextPos)(this.textId, textXPos, textYPos);
    }
    destroyLable() {
        (0, skyrimPlatform_1.destroyText)(this.textId);
        this.textId = undefined;
    }
}
exports.Lable = Lable;


/***/ }),

/***/ 497:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LablesHandler = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Lable_1 = __webpack_require__(7596);
const objectReferenceEx_1 = __webpack_require__(7564);
const Vector3_1 = __webpack_require__(2233);
const Utils_1 = __webpack_require__(2453);
class LablesHandler {
    static init() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.checkLabels();
        }, 'Lables'));
    }
    static createLable(id, text, color, drawDistance, position, cellOrWorld) {
        if (this.storage.has(id)) {
            return;
        }
        const lable = new Lable_1.Lable(id, text, color, drawDistance, position, cellOrWorld);
        this.storage.set(id, lable);
    }
    static destroyLable(id) {
        if (!this.storage.has(id)) {
            return;
        }
        const lable = this.storage.get(id);
        lable === null || lable === void 0 ? void 0 : lable.destroyLable();
        this.storage.delete(id);
    }
    static checkLabels() {
        if (this.storage.size <= 0) {
            return;
        }
        const actor = skyrimPlatform_1.Game.getPlayer();
        if (!actor) {
            return;
        }
        const actorPosition = (0, Vector3_1.toVector3)(actor.getPositionX(), actor.getPositionY(), actor.getPositionZ());
        const worldOrCell = objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(actor);
        const lables = [...this.storage.values()];
        lables.forEach(lable => {
            if (actorPosition.dist(lable.position) <= lable.drawDistance && worldOrCell === lable.cellOrWorld) {
                lable.drawLable();
            }
            else {
                lable.destroyLable();
            }
        });
    }
}
exports.LablesHandler = LablesHandler;
LablesHandler.storage = new Map();


/***/ }),

/***/ 7577:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Npc = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Vector3_1 = __webpack_require__(2233);
const Player_1 = __webpack_require__(5456);
const appearanceSync_1 = __webpack_require__(282);
const spawnProcess_1 = __webpack_require__(8943);
const NpcConfig_1 = __webpack_require__(7144);
const worldCleanerService_1 = __webpack_require__(4434);
const spApiInteraction_1 = __webpack_require__(3331);
const MAX_DISTANCE_FROM_THE_PRIMARY_POINT = 100;
const MIN_TIME_TO_MOVE = 10 * 1000;
const MIN_TIME_BETWEEN_APPLY_APPEARANCE = 5 * 1000;
class Npc {
    constructor(npcHash, position, rotation, cellOrWorld) {
        var _a, _b;
        const config = NpcConfig_1.NpcConfig[npcHash];
        this.npcHash = npcHash;
        this.position = new Vector3_1.Vector3(position.x, position.y, position.z);
        this.rotation = new Vector3_1.Vector3(rotation.x, rotation.y, rotation.z);
        this.cellOrWorld = cellOrWorld;
        this.appearance = config.appearance;
        this.clothes = config.clothes;
        this.weapons = config.weapon;
        this.lastMoveNpc = Date.now();
        this.lastApplyAppearance = Date.now();
        this.baseActor = skyrimPlatform_1.TESModPlatform.createNpc();
        this.formId = (_a = this.baseActor) === null || _a === void 0 ? void 0 : _a.getFormID();
        this.form = skyrimPlatform_1.Game.getFormEx(this.formId);
        this.objectReference = Player_1.localPlayer.actor.placeAtMe(this.form, 1, true, true);
        this.actor = skyrimPlatform_1.Actor.from(this.objectReference);
        this.refrId = this.actor.getFormID();
        spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(worldCleanerService_1.WorldCleanerService).modWcProtection(this.objectReference.getFormID(), 1);
        new spawnProcess_1.SpawnProcess(this.appearance, [this.position.x, this.position.y, this.position.z], this.refrId, () => { });
        (_b = this.actor) === null || _b === void 0 ? void 0 : _b.setAngle(this.rotation.x, this.rotation.y, this.rotation.z);
        appearanceSync_1.AppearanceSync.applyAppearanceCommon(this.appearance, skyrimPlatform_1.ActorBase.from((this.actor).getBaseObject()));
        appearanceSync_1.AppearanceSync.applyTints(this.actor, this.appearance.tints, true);
        skyrimPlatform_1.TESModPlatform.setNpcSkinColor(this.baseActor, this.appearance.skinColor);
        skyrimPlatform_1.TESModPlatform.moveRefrToPosition(this.actor, skyrimPlatform_1.Cell.from(skyrimPlatform_1.Game.getFormEx(this.cellOrWorld)), skyrimPlatform_1.WorldSpace.from(skyrimPlatform_1.Game.getFormEx(this.cellOrWorld)), this.position.x, this.position.y, this.position.z, this.rotation.x, this.rotation.y, this.rotation.z);
        this.actor.enableAI(true);
        this.objectReference.blockActivation(true);
        this.actor.queueNiNodeUpdate();
        this.actor.resurrect();
        this.applyClothes();
        this.applyWeapon();
    }
    checker() {
        var _a;
        const actor = skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) ? skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) : this.actor;
        if (!actor) {
            return;
        }
        actor.startDeferredKill();
        actor.forceActorValue('health', 100000);
        actor.setDontMove(true);
        const position = new Vector3_1.Vector3(actor.getPositionX(), actor.getPositionY(), actor.getPositionZ());
        if (position.dist(this.position) >= MAX_DISTANCE_FROM_THE_PRIMARY_POINT && Date.now() - this.lastMoveNpc >= MIN_TIME_TO_MOVE) {
            this.lastMoveNpc = Date.now();
            this.moveNpc();
        }
        if (Date.now() - this.lastApplyAppearance >= MIN_TIME_BETWEEN_APPLY_APPEARANCE) {
            this.lastApplyAppearance = Date.now();
            if (!appearanceSync_1.AppearanceSync.compareAppearance(this.appearance, appearanceSync_1.AppearanceSync.getAppearance(actor) ||
                !appearanceSync_1.AppearanceSync.compareAppearance(NpcConfig_1.NpcConfig[this.npcHash].appearance, appearanceSync_1.AppearanceSync.getAppearance(actor)))) {
                appearanceSync_1.AppearanceSync.applyAppearanceCommon(this.appearance, skyrimPlatform_1.ActorBase.from((actor).getBaseObject()));
                appearanceSync_1.AppearanceSync.applyTints(actor, this.appearance.tints, true);
                skyrimPlatform_1.TESModPlatform.setNpcSkinColor(skyrimPlatform_1.ActorBase.from(actor.getBaseObject()), this.appearance.skinColor);
            }
            if (appearanceSync_1.AppearanceSync.compareAppearance(NpcConfig_1.NpcConfig[this.npcHash].appearance, appearanceSync_1.AppearanceSync.getAppearance(actor))) {
                this.appearance = NpcConfig_1.NpcConfig[this.npcHash].appearance;
            }
            this.applyClothes();
            this.applyWeapon();
            this.refrId = actor === null || actor === void 0 ? void 0 : actor.getFormID();
            this.formId = (_a = skyrimPlatform_1.ActorBase.from((actor).getBaseObject())) === null || _a === void 0 ? void 0 : _a.getFormID();
            this.actor = actor;
        }
    }
    applyClothes() {
        const actor = skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) ? skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) : this.actor;
        if (!actor) {
            return;
        }
        actor.unequipAll();
        this.clothes.forEach(_itemId => {
            const itemId = parseInt(_itemId, 16);
            const armorItem = skyrimPlatform_1.Armor.from(skyrimPlatform_1.Game.getFormEx(itemId));
            actor.equipItem(armorItem, true, true);
        });
    }
    applyWeapon() {
        const actor = skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) ? skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) : this.actor;
        if (!actor) {
            return;
        }
        actor.unequipAll();
        this.weapons.forEach(_itemId => {
            const itemId = parseInt(_itemId, 16);
            const weaponItem = skyrimPlatform_1.Weapon.from(skyrimPlatform_1.Game.getFormEx(itemId));
            actor.equipItem(weaponItem, true, true);
        });
    }
    moveNpc() {
        const actor = skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) ? skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game === null || skyrimPlatform_1.Game === void 0 ? void 0 : skyrimPlatform_1.Game.getFormEx(this === null || this === void 0 ? void 0 : this.refrId)) : this.actor;
        skyrimPlatform_1.TESModPlatform.moveRefrToPosition(actor, skyrimPlatform_1.Cell.from(skyrimPlatform_1.Game.getFormEx(this.cellOrWorld)), skyrimPlatform_1.WorldSpace.from(skyrimPlatform_1.Game.getFormEx(this.cellOrWorld)), this.position.x, this.position.y, this.position.z, this.rotation.x, this.rotation.y, this.rotation.z);
    }
}
exports.Npc = Npc;


/***/ }),

/***/ 5977:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NpcHandler = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const npcEnums_1 = __webpack_require__(1020);
const Npc_1 = __webpack_require__(7577);
const Utils_1 = __webpack_require__(2453);
class NpcHandler {
    static init() {
        Object.values(npcEnums_1.NpcHash).forEach(hash => {
            NpcHandler.storage.set(hash, []);
        });
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.checkerPosition();
        }, 'NPC'));
    }
    static addNpc(npcHash, position, rotation, cellOrWorld) {
        (0, skyrimPlatform_1.once)('update', () => {
            const npc = new Npc_1.Npc(npcHash, position, rotation, cellOrWorld);
            let npcs = this.storage.get(npcHash);
            if (!npcs) {
                npcs = [];
            }
            npcs.push(npc);
            this.storage.set(npcHash, npcs);
        });
    }
    static checkerPosition() {
        try {
        }
        catch (error) {
        }
    }
}
exports.NpcHandler = NpcHandler;
NpcHandler.storage = new Map();


/***/ }),

/***/ 1033:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientPolygonHandler = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
const Utils_1 = __webpack_require__(2453);
const events_1 = __webpack_require__(6406);
const config_1 = __webpack_require__(3725);
const events_2 = __webpack_require__(6007);
class ClientPolygonHandler {
    constructor() {
        this.currentZones = new Set();
        this.zonesConfig = {};
        this.lastPosition = null;
        this.lastCellOrlWorld = 60;
        this.distanceThreshold = 50;
        Object.keys(config_1.ZoneConfig).forEach(zoneType => {
            this.zonesConfig[zoneType] = config_1.ZoneConfig[zoneType].filter(zone => zone.clientCheck);
        });
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            const playerPosition = this.getPlayerPosition();
            if (playerPosition) {
                this.updatePlayerPosition(playerPosition);
            }
            if (this.lastCellOrlWorld === Player_1.localPlayer.cell) {
                return;
            }
            else {
                if (Player_1.localPlayer.cell !== 60) {
                    (0, Utils_1.sendEventToServer)(events_2.GreenZoneEvent.PlayerEnter);
                }
                this.lastCellOrlWorld = Player_1.localPlayer.cell;
            }
        }, 'Polygon'));
    }
    getPlayerPosition() {
        return Player_1.localPlayer.position;
    }
    updatePlayerPosition(playerPosition) {
        if (this.lastPosition && !this.hasMovedBeyondThreshold(playerPosition)) {
            return;
        }
        const newZones = new Set();
        Object.values(this.zonesConfig).forEach(zoneList => {
            zoneList.forEach(zone => {
                if (this.isPointInsidePolygon(playerPosition, zone.polygon)) {
                    newZones.add(zone.hash);
                }
            });
        });
        this.handleZoneChanges(newZones);
        this.currentZones = newZones;
        this.lastPosition = playerPosition;
    }
    hasMovedBeyondThreshold(newPosition) {
        if (!this.lastPosition) {
            return true;
        }
        const dx = newPosition.x - this.lastPosition.x;
        const dy = newPosition.y - this.lastPosition.y;
        const dz = newPosition.z - this.lastPosition.z;
        const distanceSquared = dx * dx + dy * dy + dz * dz;
        return distanceSquared > this.distanceThreshold * this.distanceThreshold;
    }
    isPointInsidePolygon(point, polygon) {
        let inside = false;
        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
            const xi = polygon[i].x, yi = polygon[i].y;
            const xj = polygon[j].x, yj = polygon[j].y;
            const intersect = yi > point.y !== yj > point.y && point.x < ((xj - xi) * (point.y - yi)) / (yj - yi) + xi;
            if (intersect) {
                inside = !inside;
            }
        }
        return inside;
    }
    handleZoneChanges(newZones) {
        newZones.forEach(zone => {
            if (!this.currentZones.has(zone)) {
                (0, Utils_1.sendEventToServer)(events_2.GreenZoneEvent.PlayerEnter);
            }
        });
        this.currentZones.forEach(zone => {
            if (!newZones.has(zone)) {
                if (Player_1.localPlayer.cell !== 60) {
                    return;
                }
                (0, Utils_1.sendEventToServer)(events_2.GreenZoneEvent.PlayerExit);
            }
        });
    }
    triggerZoneEnterEvent(zone) {
        (0, Utils_1.sendEventToServer)(events_1.PolygonEvents.PlayerEnterZone, {
            polygonHash: zone,
        });
    }
    triggerZoneExitEvent(zone) {
        (0, Utils_1.sendEventToServer)(events_1.PolygonEvents.PlayerExitZone, {
            polygonHash: zone,
        });
    }
}
exports.ClientPolygonHandler = ClientPolygonHandler;


/***/ }),

/***/ 4801:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Recon = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const worldViewMisc_1 = __webpack_require__(9885);
const spApiInteraction_1 = __webpack_require__(3331);
const remoteServer_1 = __webpack_require__(8986);
const Utils_1 = __webpack_require__(2453);
const events_1 = __webpack_require__(5578);
class Recon {
    static get isStarted() {
        return this._isStarted;
    }
    static get targetFormId() {
        return this._targetFormId;
    }
    static init() {
        (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
            this.checkReconCondition();
            this.checkFormIdExist();
        }, 'Recon'));
        spApiInteraction_1.SpApiInteraction.getControllerInstance().emitter.on('reconMoveMessage', e => this.moveActor(e));
        spApiInteraction_1.SpApiInteraction.getControllerInstance().emitter.on('reconDetachMessage', e => this.detach(e));
    }
    static moveActor(event) {
        const msg = event.message;
        const controller = spApiInteraction_1.SpApiInteraction.getControllerInstance();
        (0, skyrimPlatform_1.once)('update', () => {
            const id = 'idx' in msg && typeof msg.idx === 'number'
                ? controller.lookupListener(remoteServer_1.RemoteServer).getIdManager().getId(msg.idx)
                : controller.lookupListener(remoteServer_1.RemoteServer).getMyActorIndex();
            const objectRef = id === controller.lookupListener(remoteServer_1.RemoteServer).getMyActorIndex() ? skyrimPlatform_1.Game.getPlayer() : (0, worldViewMisc_1.getObjectReference)(id);
            if (!objectRef) {
                return;
            }
            objectRef.translateTo(msg.pos[0], msg.pos[1], msg.pos[2], msg.rot[0], msg.rot[1], msg.rot[2], 1000, 0);
        });
    }
    static detach(event) {
        (0, Utils_1.sendEventToServer)(events_1.ReconSystemEvents.StopFromClient);
    }
    static start(serverFormId) {
        this._targetFormId = serverFormId;
        this._isStarted = true;
    }
    static attachCamera() {
        (0, skyrimPlatform_1.once)('update', () => {
            if (this._targetFormId == null) {
                this._isStarted = false;
                (0, Utils_1.sendEventToServer)(events_1.ReconSystemEvents.StopFromClient);
                return;
            }
            const localFormId = (0, worldViewMisc_1.remoteIdToLocalId)(this._targetFormId);
            if (!localFormId) {
                return;
            }
            (0, skyrimPlatform_1.cameraAttach)(localFormId);
        });
    }
    static stop() {
        (0, skyrimPlatform_1.once)('update', () => {
            this._isStarted = false;
            this._targetFormId = undefined;
            (0, skyrimPlatform_1.cameraDetach)();
        });
    }
    static checkReconCondition() {
        if (!this._isStarted) {
            return;
        }
        if (!(0, skyrimPlatform_1.cameraTargetExists)()) {
            (0, skyrimPlatform_1.cameraAttach)(0x14);
        }
    }
    static checkFormIdExist() {
        if (!this._isStarted || this._targetFormId == null) {
            return;
        }
        const localFormId = (0, worldViewMisc_1.remoteIdToLocalId)(this._targetFormId);
        if (!localFormId) {
            return;
        }
        const actor = skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game.getFormEx(localFormId));
        if (!actor) {
            return;
        }
        else {
            this.attachCamera();
        }
    }
}
exports.Recon = Recon;
Recon._isStarted = false;
Recon._targetFormId = undefined;


/***/ }),

/***/ 2453:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.profile = exports.closeUiAfterDead = exports.equipItems = exports.sendEventToServer = exports.freezePlayer = exports.getLocalBaseActor = exports.getLocalActor = void 0;
const sp = __webpack_require__(2112);
const messages = __webpack_require__(3740);
const Player_1 = __webpack_require__(5456);
const Animations_1 = __webpack_require__(7442);
const EscapeMenu_1 = __webpack_require__(8428);
const RadialMenu_1 = __webpack_require__(1828);
const CharacterMenuHandler_1 = __webpack_require__(1851);
function getLocalActor() {
    const actor = sp.Actor.from(sp.Game.getPlayer());
    return actor ? actor : null;
}
exports.getLocalActor = getLocalActor;
function getLocalBaseActor() {
    const actor = getLocalActor();
    if (!actor) {
        return null;
    }
    return sp.ActorBase.from(actor.getBaseObject());
}
exports.getLocalBaseActor = getLocalBaseActor;
function freezePlayer(toggle) {
    sp.once('update', () => {
        sp.Game.getPlayer().setDontMove(toggle);
    });
}
exports.freezePlayer = freezePlayer;
function sendEventToServer(customPacketType, data = null) {
    sp.once('update', () => {
        sp.mpClientPlugin.send(JSON.stringify({
            t: messages.MsgType.CustomPacket,
            content: {
                customPacketType,
                data,
            },
        }), true);
    });
}
exports.sendEventToServer = sendEventToServer;
function equipItems(items) {
    sp.once('update', () => __awaiter(this, void 0, void 0, function* () {
        items.forEach(clothes => {
            const armorItem = sp.Armor.from(sp.Game.getFormEx(parseInt(clothes, 16)));
            Player_1.localPlayer.actor.equipItem(armorItem, false, false);
        });
    }));
}
exports.equipItems = equipItems;
function closeUiAfterDead() {
    Animations_1.AnimationsMenu.closeAnimationMenu();
    CharacterMenuHandler_1.CharacterMenuHandler.close();
    EscapeMenu_1.EscapeMenu.closeMenu();
    RadialMenu_1.RadialMenu.close();
}
exports.closeUiAfterDead = closeUiAfterDead;
const MAX_TIME_FOR_WARNING = 1;
function profile(func, description = '<anonymous>') {
    const isProfilingEnabled = "false" === 'true';
    if (!isProfilingEnabled) {
        return func;
    }
    const wrapper = (...args) => {
        const start = Date.now();
        const result = func(...args);
        const duration = +Date.now() - start;
        if (duration >= MAX_TIME_FOR_WARNING) {
            sp.printConsole(`[${description}] ${func.name || '<anonymous>'} executed in ${duration.toFixed(2)} ms`);
        }
        return result;
    };
    return wrapper;
}
exports.profile = profile;


/***/ }),

/***/ 4024:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EventEmitterFactory = void 0;
const eventemitter3_1 = __webpack_require__(6729);
class EventEmitterFactory {
    static makeEventEmitter() {
        return new eventemitter3_1.EventEmitter();
    }
}
exports.EventEmitterFactory = EventEmitterFactory;


/***/ }),

/***/ 8548:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActivationService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
const playerCharacterDataHolder_1 = __webpack_require__(3590);
const Utils_1 = __webpack_require__(2453);
class ActivationService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'ActivationService'));
    }
    onUpdate() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
        const targetRefrId = playerCharacterDataHolder_1.PlayerCharacterDataHolder.getCrosshairRefId();
        const targetObject = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(targetRefrId));
        if (!targetObject) {
            return;
        }
        if (((_a = targetObject.getBaseObject()) === null || _a === void 0 ? void 0 : _a.getType()) === 28 ||
            ((_b = targetObject.getBaseObject()) === null || _b === void 0 ? void 0 : _b.getType()) === 43 ||
            ((_c = targetObject.getBaseObject()) === null || _c === void 0 ? void 0 : _c.getType()) === 39 ||
            ((_d = targetObject.getBaseObject()) === null || _d === void 0 ? void 0 : _d.getType()) === 41 ||
            ((_e = targetObject.getBaseObject()) === null || _e === void 0 ? void 0 : _e.getType()) === 32 ||
            ((_f = targetObject.getBaseObject()) === null || _f === void 0 ? void 0 : _f.getType()) === 26 ||
            ((_g = targetObject.getBaseObject()) === null || _g === void 0 ? void 0 : _g.getType()) === 42 ||
            ((_h = targetObject.getBaseObject()) === null || _h === void 0 ? void 0 : _h.getType()) === 30 ||
            ((_j = targetObject.getBaseObject()) === null || _j === void 0 ? void 0 : _j.getType()) === 38 ||
            ((_k = targetObject.getBaseObject()) === null || _k === void 0 ? void 0 : _k.getType()) === 64 ||
            ((_l = targetObject.getBaseObject()) === null || _l === void 0 ? void 0 : _l.getType()) === 27 ||
            ((_m = targetObject.getBaseObject()) === null || _m === void 0 ? void 0 : _m.getType()) === 36 ||
            ((_o = targetObject.getBaseObject()) === null || _o === void 0 ? void 0 : _o.getType()) === 35 ||
            ((_p = targetObject.getBaseObject()) === null || _p === void 0 ? void 0 : _p.getType()) === 52 ||
            ((_q = targetObject.getBaseObject()) === null || _q === void 0 ? void 0 : _q.getType()) === 84 ||
            ((_r = targetObject.getBaseObject()) === null || _r === void 0 ? void 0 : _r.getType()) === 46 ||
            ((_s = targetObject.getBaseObject()) === null || _s === void 0 ? void 0 : _s.getType()) === 45 ||
            ((_t = targetObject.getBaseObject()) === null || _t === void 0 ? void 0 : _t.getType()) === 25 ||
            ((_u = targetObject.getBaseObject()) === null || _u === void 0 ? void 0 : _u.getType()) === 118 ||
            ((_v = targetObject.getBaseObject()) === null || _v === void 0 ? void 0 : _v.getType()) === 23) {
            targetObject.blockActivation(true);
        }
    }
}
exports.ActivationService = ActivationService;


/***/ }),

/***/ 7172:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimDebugService = void 0;
const clientListener_1 = __webpack_require__(2166);
const playerId = 0x14;
const animationSucceededTextColor = [255, 255, 255, 1];
const animationNotSucceededTextColor = [255, 0, 0, 1];
class AnimQueueCollection {
    constructor(sp, settings) {
        var _a, _b, _c, _d, _e, _f;
        this.sp = sp;
        const arrayLength = (_b = (_a = settings === null || settings === void 0 ? void 0 : settings.textOutput) === null || _a === void 0 ? void 0 : _a.itemCount) !== null && _b !== void 0 ? _b : 5;
        const startPos = (_d = (_c = settings === null || settings === void 0 ? void 0 : settings.textOutput) === null || _c === void 0 ? void 0 : _c.startPos) !== null && _d !== void 0 ? _d : { x: 650, y: 600 };
        ;
        const yPosDelta = (_f = (_e = settings === null || settings === void 0 ? void 0 : settings.textOutput) === null || _e === void 0 ? void 0 : _e.yPosDelta) !== null && _f !== void 0 ? _f : 32;
        let y = startPos.y;
        this.list = new Array(arrayLength);
        for (let idx = 0; idx < arrayLength; ++idx) {
            this.list[idx] = { name: "", textId: sp.createText(startPos.x, y, "", animationSucceededTextColor), color: animationSucceededTextColor };
            y += yPosDelta;
        }
    }
    clearSPText() {
        if (this.list.length === 0) {
            return;
        }
        this.list.forEach(item => this.sp.destroyText(item.textId));
    }
    push(animName, color) {
        let prevItem = null;
        for (let idx = this.list.length - 1; idx >= 0; --idx) {
            const item = this.list[idx];
            prevItem = Object.assign({}, item);
            item.name = animName;
            item.color = color;
            this.sp.setTextString(item.textId, item.name);
            this.sp.setTextColor(item.textId, item.color);
            animName = prevItem.name;
            color = prevItem.color;
        }
    }
}
AnimQueueCollection.Name = "AnimQueueCollection";
class AnimDebugService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        var _a;
        super();
        this.sp = sp;
        this.controller = controller;
        this.settings = undefined;
        if (this.sp.storage[AnimQueueCollection.Name] && this.sp.storage[AnimQueueCollection.Name].clearSPText) {
            try {
                this.sp.storage[AnimQueueCollection.Name].clearSPText();
            }
            catch (e) { }
        }
        if (!this.settings || !this.settings.isActive) {
            return;
        }
        if ((_a = this.settings.textOutput) === null || _a === void 0 ? void 0 : _a.isActive) {
            this.queue = new AnimQueueCollection(this.sp, this.settings);
            this.sp.storage[AnimQueueCollection.name] = this.queue;
            this.sp.hooks.sendAnimationEvent.add({
                enter: (_ctx) => { },
                leave: (ctx) => {
                    this.onSendAnimationEventLeave(ctx);
                }
            }, playerId, playerId);
        }
        if (this.settings.animKeys) {
            this.controller.on("buttonEvent", (e) => this.onButtonEvent(e));
        }
    }
    onSendAnimationEventLeave(ctx) {
        if (this.queue === undefined) {
            return;
        }
        this.queue.push(ctx.animEventName, ctx.animationSucceeded ? animationSucceededTextColor : animationNotSucceededTextColor);
    }
    onButtonEvent(e) {
        if (e.isUp && this.settings && this.settings.animKeys[e.code]) {
            this.sp.Debug.sendAnimationEvent(this.sp.Game.getPlayer(), this.settings.animKeys[e.code]);
        }
    }
}
exports.AnimDebugService = AnimDebugService;


/***/ }),

/***/ 8622:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockMenuService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
class BlockMenuService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.blockMenus = [
            "BarterMenu",
            "Console",
            "Console Native UI Menu",
            "ContainerMenu",
            "Crafting Menu",
            "Debug Text Menu",
            "FavoritesMenu",
            "InventoryMenu",
        ];
        this.controller.on('menuOpen', (e) => this.menuOpen(e));
    }
    menuOpen(e) {
        if (this.blockMenus.includes(e.name)) {
            skyrimPlatform_1.Ui.invokeString('HUD Menu', '_global.skse.CloseMenu', e.name);
        }
    }
}
exports.BlockMenuService = BlockMenuService;


/***/ }),

/***/ 7265:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockPapyrusEventsService = void 0;
const clientListener_1 = __webpack_require__(2166);
class BlockPapyrusEventsService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.once('tick', () => this.onceTick());
        this.controller.once('update', () => this.onceUpdate());
    }
    onceTick() {
        this.sp.blockPapyrusEvents(true);
    }
    onceUpdate() {
        ;
        this.sp.TESModPlatform.blockPapyrusEvents(true);
    }
}
exports.BlockPapyrusEventsService = BlockPapyrusEventsService;


/***/ }),

/***/ 5499:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlockedAnimationsService = void 0;
const clientListener_1 = __webpack_require__(2166);
class BlockedAnimationsService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        const blockedAnims = [
            'IdleNocturnal*',
            'IdleCarryBucketFillEnter',
            'IdleGreybeardMeditateEnter',
            'IdleWriteTableChairEnterInstant',
        ];
        blockedAnims.forEach(blockedAnim => {
            this.sp.hooks.sendAnimationEvent.add({
                enter(ctx) {
                    ctx.animEventName = '';
                },
                leave() { },
            }, 0x14, 0x14, blockedAnim);
        });
    }
}
exports.BlockedAnimationsService = BlockedAnimationsService;


/***/ }),

/***/ 5472:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
const Binder_1 = __webpack_require__(9132);
const BrowserEventsHandler_1 = __webpack_require__(3551);
const binder_1 = __webpack_require__(1220);
const formView_1 = __webpack_require__(3770);
const Animations_1 = __webpack_require__(7442);
const ArmorShop_1 = __webpack_require__(7418);
const BrowserEventsServer_1 = __webpack_require__(43);
const controller_1 = __webpack_require__(1113);
const CharacterMenuHandler_1 = __webpack_require__(1851);
const controller_2 = __webpack_require__(6291);
const EscapeMenu_1 = __webpack_require__(8428);
const Familiars_1 = __webpack_require__(3246);
const Hud_1 = __webpack_require__(9720);
const RadialMenu_1 = __webpack_require__(1828);
const settings_1 = __webpack_require__(5427);
const controller_3 = __webpack_require__(6241);
const StartLoadingScreen_1 = __webpack_require__(4763);
const AnimationsHandler_1 = __webpack_require__(3947);
const serverEvents_1 = __webpack_require__(593);
class BrowserService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.isBrowserLoaded = false;
        this.isCursorMenuOpened = false;
        this.sp.browser.setVisible(false);
        this.controller.once('update', () => this.onceUpdate());
        this.controller.on('browserMessage', e => this.onBrowserMessage(e));
        this.controller.on('menuOpen', (e) => this.menuOpen(e));
        this.controller.on('menuClose', (e) => this.menuClose(e));
        this.bindKeys();
        this.initOtherBrowserEvents();
        this.keepCursorMenuOpenedWhenBrowserFocused();
        BrowserEventsHandler_1.BrowserEventsHandler.get('browser:setFocus').addHandler(this.toggleFocus.bind(this));
        StartLoadingScreen_1.StartLoadingScreen.init();
        BrowserEventsHandler_1.BrowserEventsHandler.get(serverEvents_1.CursorEvents.Close).addHandler(this.toggleFocus.bind(this));
    }
    executeBrowser(methodName, data, focused = null) {
        (0, skyrimPlatform_1.once)('update', () => {
            if (!this.isBrowserLoaded) {
                (0, skyrimPlatform_1.printConsole)('[Browser]: browser is not ready');
                return;
            }
            if (data) {
                skyrimPlatform_1.browser.executeJavaScript(`window.disp('${methodName}', ${JSON.stringify(data)})`);
            }
            else {
                skyrimPlatform_1.browser.executeJavaScript(`window.disp('${methodName}')`);
            }
            if (focused === true) {
                (0, skyrimPlatform_1.once)('update', () => {
                    skyrimPlatform_1.browser.setFocused(true);
                });
            }
            else if (focused === false) {
                (0, skyrimPlatform_1.once)('update', () => {
                    skyrimPlatform_1.browser.setFocused(false);
                });
            }
        });
    }
    toggleFocus() {
        skyrimPlatform_1.browser.setFocused(!skyrimPlatform_1.browser.isFocused());
    }
    bindKeys() {
        Binder_1.Binder.bind(binder_1.BinderHash.Nicknames, () => (formView_1.FormView.isDisplayingNicknames = !formView_1.FormView.isDisplayingNicknames));
        Binder_1.Binder.bind(binder_1.BinderHash.Cursor, this.toggleFocus.bind(this));
    }
    onceUpdate() {
        this.sp.browser.setVisible(true);
    }
    onBrowserMessage(e) {
        const args = e.arguments[0];
        if (!args || !args.eventName) {
            return;
        }
        if (!args.data) {
            args.data = null;
        }
        this.browserMessage(args.eventName, args.data);
    }
    browserMessage(eventName, data) {
        if (!this.isBrowserLoaded) {
            return;
        }
        (0, skyrimPlatform_1.once)('update', () => {
            BrowserEventsHandler_1.BrowserEventsHandler.get(eventName).executeHandlers(data, eventName);
        });
    }
    menuOpen(e) {
        if (e.name === "Cursor Menu") {
            this.isCursorMenuOpened = true;
        }
    }
    menuClose(e) {
        if (e.name === "Cursor Menu") {
            this.isCursorMenuOpened = false;
        }
    }
    keepCursorMenuOpenedWhenBrowserFocused() {
        (0, skyrimPlatform_1.once)('update', () => {
            if (skyrimPlatform_1.browser.isFocused() && !this.isCursorMenuOpened) {
                skyrimPlatform_1.browser.setFocused(false);
                (0, skyrimPlatform_1.once)('update', () => {
                    skyrimPlatform_1.browser.setFocused(true);
                    (0, skyrimPlatform_1.once)('update', () => this.keepCursorMenuOpenedWhenBrowserFocused());
                });
            }
            else {
                this.keepCursorMenuOpenedWhenBrowserFocused();
            }
        });
    }
    initOtherBrowserEvents() {
        EscapeMenu_1.EscapeMenu.init();
        Binder_1.Binder.init();
        ArmorShop_1.ArmorShop.init();
        (0, controller_2.initSelectorBrowserEvents)();
        (0, controller_1.initCharacterEditorBrowserEvents)();
        (0, controller_3.initSpawnSelectorEvents)();
        BrowserEventsServer_1.BrowserEventsServer.initEvents();
        Hud_1.Hud.init();
        RadialMenu_1.RadialMenu.init();
        Animations_1.AnimationsMenu.init();
        settings_1.Settings.initCefEvents();
        Familiars_1.FamiliarsHandler.init();
        CharacterMenuHandler_1.CharacterMenuHandler.init();
        AnimationsHandler_1.AnimationsHandler.init();
        this.isBrowserLoaded = true;
    }
}
exports.BrowserService = BrowserService;


/***/ }),

/***/ 2166:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientListener = void 0;
;
class ClientListener {
    constructor() {
        this._nonEmptyClassMark = '';
    }
    executeBrowser(arg0, arg1, arg2) {
        throw new Error('Method not implemented.');
    }
}
exports.ClientListener = ClientListener;


/***/ }),

/***/ 8666:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleCommandsService = void 0;
const messages_1 = __webpack_require__(3740);
const worldViewMisc_1 = __webpack_require__(9885);
const clientListener_1 = __webpack_require__(2166);
var CmdArgument;
(function (CmdArgument) {
    CmdArgument[CmdArgument["ObjectReference"] = 0] = "ObjectReference";
    CmdArgument[CmdArgument["BaseForm"] = 1] = "BaseForm";
    CmdArgument[CmdArgument["Int"] = 2] = "Int";
    CmdArgument[CmdArgument["String"] = 3] = "String";
})(CmdArgument || (CmdArgument = {}));
class ConsoleCommandsService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.immuneSchema = ["mp"];
        this.nonVanilaCommands = ["mp"];
        this.schemas = ConsoleCommandsService.createSchemas();
        this.setupMpCommand();
        this.setupVanilaCommands();
    }
    static createSchemas() {
        const schemas = new Map();
        schemas.set("additem", [CmdArgument.ObjectReference, CmdArgument.BaseForm, CmdArgument.Int]);
        schemas.set("placeatme", [CmdArgument.ObjectReference, CmdArgument.BaseForm]);
        schemas.set("disable", [CmdArgument.ObjectReference]);
        schemas.set("mp", [CmdArgument.ObjectReference, CmdArgument.String]);
        return schemas;
    }
    setupMpCommand() {
        const command = this.sp.findConsoleCommand(" ConfigureUM") || this.sp.findConsoleCommand("test");
        if (command === null) {
            return;
        }
        command.shortName = "mp";
        command.execute = this.getCommandExecutor("mp");
    }
    setupVanilaCommands() {
        this.schemas.forEach((_, commandName) => {
            const command = this.sp.findConsoleCommand(commandName);
            if (command === null) {
                return;
            }
            if (this.nonVanilaCommands.includes(commandName)) {
                return;
            }
            command.execute = this.getCommandExecutor(commandName);
        });
    }
    getCommandExecutor(commandName) {
        return (...args) => {
            const schema = this.schemas.get(commandName);
            if (schema === undefined) {
                return false;
            }
            if (args.length !== schema.length && !this.immuneSchema.includes(commandName)) {
                return false;
            }
            for (let i = 0; i < args.length; ++i) {
                switch (schema[i]) {
                    case CmdArgument.ObjectReference:
                        args[i] = (0, worldViewMisc_1.localIdToRemoteId)(parseInt(`${args[i]}`));
                        break;
                }
            }
            this.controller.emitter.emit("sendMessage", {
                message: {
                    t: messages_1.MsgType.ConsoleCommand,
                    data: {
                        commandName,
                        args
                    }
                },
                reliability: "reliable"
            });
            return false;
        };
    }
}
exports.ConsoleCommandsService = ConsoleCommandsService;


/***/ }),

/***/ 4314:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeathService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
const errors_1 = __webpack_require__(8286);
const animation_1 = __webpack_require__(933);
const ragdollService_1 = __webpack_require__(5062);
class DeathService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.applyDeathState = (actor, isDead) => {
            if (actor.isDead() === isDead && this.isPlayer(actor) === false) {
                return;
            }
            if (isDead === true) {
                this.killActor(actor, null);
            }
            else {
                this.resurrectActor(actor);
            }
        };
        this.killActor = (actor, killer = null) => {
            if (this.isPlayer(actor) === true) {
                this.playerDead = true;
                this.busyForOtherReasonsCounter++;
                this.sp.Utility.wait(7.5).then(() => this.busyForOtherReasonsCounter--);
                this.allowedPlayerAnimations = [];
                actor.setDontMove(true);
                this.killWithPush(actor);
            }
            else {
                actor.endDeferredKill();
                actor.kill(killer);
            }
        };
        this.resurrectActor = (actor) => {
            if (this.isPlayer(actor) === true) {
                this.playerDead = false;
                this.busyForOtherReasonsCounter++;
                this.sp.Utility.wait(7.5).then(() => this.busyForOtherReasonsCounter--);
                this.allowedPlayerAnimations = null;
                actor.setDontMove(false);
                this.ressurectWithPushKill(actor);
            }
            else {
                throw new errors_1.RespawnNeededError('needs to be respawned');
            }
        };
        this.killWithPush = (actor) => {
            var _a;
            (_a = this.allowedPlayerAnimations) === null || _a === void 0 ? void 0 : _a.push(animation_1.AnimationEventName.Ragdoll);
            actor.pushActorAway(actor, 0);
        };
        this.ressurectWithPushKill = (act) => {
            const formId = act.getFormID();
            const ragdollService = this.controller.lookupListener(ragdollService_1.RagdollService);
            ragdollService.safeRemoveRagdollFromWorld(act, () => {
                const actor = skyrimPlatform_1.Actor.from(this.sp.Game.getFormEx(formId));
                if (!actor) {
                    return;
                }
                this.sp.Game.getPlayer().setAnimationVariableInt('iGetUpType', 1);
                this.sp.Debug.sendAnimationEvent(actor, animation_1.AnimationEventName.GetUpBegin);
            });
        };
        this.isPlayer = (actor) => {
            return actor.getFormID() === this.playerActorId;
        };
        this.allowedPlayerAnimations = null;
        this.playerActorId = 0x14;
        this.playerDead = false;
        this.busyForOtherReasonsCounter = 0;
        controller.once('update', () => this.onceUpdate());
        controller.emitter.on('applyDeathStateEvent', e => this.onApplyDeathState(e));
        this.hookDisableKillMoves();
        this.hookDisableStagger();
        this.hookDisableBlockedAnims();
    }
    isBusy() {
        return this.playerDead || this.busyForOtherReasonsCounter > 0;
    }
    onceUpdate() {
        const player = this.sp.Game.getPlayer();
        player === null || player === void 0 ? void 0 : player.startDeferredKill();
    }
    onApplyDeathState(e) {
        this.applyDeathState(e.actor, e.isDead);
    }
    hookDisableKillMoves() {
        this.sp.hooks.sendAnimationEvent.add({
            enter(ctx) {
                ctx.animEventName = '';
            },
            leave() { },
        }, 0xff000000, 0xffffffff, 'KillMove*');
    }
    hookDisableStagger() {
        this.sp.hooks.sendAnimationEvent.add({
            enter(ctx) {
                ctx.animEventName = '';
            },
            leave() { },
        }, 0xff000000, 0xffffffff, 'staggerStart');
    }
    hookDisableBlockedAnims() {
        this.sp.hooks.sendAnimationEvent.add({
            enter: ctx => {
                if (this.allowedPlayerAnimations === null) {
                    return;
                }
                if (!this.allowedPlayerAnimations.includes(ctx.animEventName)) {
                    ctx.animEventName = '';
                }
            },
            leave() { },
        }, this.playerActorId, this.playerActorId);
    }
}
exports.DeathService = DeathService;


/***/ }),

/***/ 5724:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisableDifficultySelectionService = void 0;
const Utils_1 = __webpack_require__(2453);
const clientListener_1 = __webpack_require__(2166);
class DisableDifficultySelectionService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.difficulty = 5;
        this.counter = 0;
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'DisableDifficultySelectionService'));
    }
    onUpdate() {
        this.counter++;
        if (this.counter >= 60) {
            this.counter = 0;
            this.sp.Utility.setINIInt('iDifficulty:GamePlay', this.difficulty);
        }
    }
}
exports.DisableDifficultySelectionService = DisableDifficultySelectionService;


/***/ }),

/***/ 618:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisableFastTravelService = void 0;
const Utils_1 = __webpack_require__(2453);
const clientListener_1 = __webpack_require__(2166);
class DisableFastTravelService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'DisableFastTravelService'));
    }
    onUpdate() {
        this.sp.Game.enableFastTravel(false);
    }
}
exports.DisableFastTravelService = DisableFastTravelService;


/***/ }),

/***/ 2875:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisableSkillAdvanceService = void 0;
const clientListener_1 = __webpack_require__(2166);
class DisableSkillAdvanceService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.once('update', () => this.onceUpdate());
    }
    onceUpdate() {
        this.sp.Game.setGameSettingFloat('fXPPerSkillRank', 0);
        this.turnOffSkillLocalExp(18);
        this.turnOffSkillLocalExp(19);
        this.turnOffSkillLocalExp(20);
        this.turnOffSkillLocalExp(21);
        this.turnOffSkillLocalExp(22);
        this.turnOffSkillLocalExp(23);
        this.turnOffSkillLocalExp(6);
        this.turnOffSkillLocalExp(7);
        this.turnOffSkillLocalExp(8);
        this.turnOffSkillLocalExp(9);
        this.turnOffSkillLocalExp(10);
        this.turnOffSkillLocalExp(11);
        this.turnOffSkillLocalExp(12);
        this.turnOffSkillLocalExp(13);
        this.turnOffSkillLocalExp(14);
        this.turnOffSkillLocalExp(15);
        this.turnOffSkillLocalExp(16);
        this.turnOffSkillLocalExp(17);
    }
    turnOffSkillLocalExp(av) {
        const avi = this.sp.ActorValueInfo.getActorValueInfoByID(av);
        if (avi === null) {
            return;
        }
        avi.setSkillUseMult(0);
        avi.setSkillOffsetMult(0);
    }
}
exports.DisableSkillAdvanceService = DisableSkillAdvanceService;


/***/ }),

/***/ 4013:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnforceLimitationsService = void 0;
const clientListener_1 = __webpack_require__(2166);
class EnforceLimitationsService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        controller.once("update", () => this.onceUpdate());
        controller.emitter.on("gameLoad", (e) => this.onGameLoad(e));
    }
    onceUpdate() {
        this.sp.Game.setInChargen(true, true, false);
    }
    onGameLoad(_event) {
        this.sp.Game.setInChargen(true, true, false);
    }
}
exports.EnforceLimitationsService = EnforceLimitationsService;


/***/ }),

/***/ 313:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GamemodeEventSourceService = void 0;
const worldViewMisc_1 = __webpack_require__(9885);
const clientListener_1 = __webpack_require__(2166);
const messages_1 = __webpack_require__(3740);
const skyrimPlatform = __webpack_require__(2112);
const skyrimPlatform_1 = __webpack_require__(2112);
class GamemodeEventSourceService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.setupEventSource = (ctx) => {
            this.controller.once('update', () => {
                try {
                    ctx._fn(ctx);
                }
                catch (e) {
                    (0, skyrimPlatform_1.printConsole)(`'eventSources - ${e}`);
                }
            });
        };
        if (Array.isArray(this.sp.storage['eventSourceContexts'])) {
            this.sp.storage['eventSourceContexts'] = this.sp.storage['eventSourceContexts'].filter((ctx) => !ctx._expired);
            this.sp.storage['eventSourceContexts'].forEach((ctx) => {
                this.setupEventSource(ctx);
            });
        }
        this.controller.emitter.on("updateGamemodeDataMessage", (e) => this.onUpdateGamemodeDataMessage(e));
    }
    onUpdateGamemodeDataMessage(event) {
        if (!Array.isArray(this.sp.storage['eventSourceContexts'])) {
            this.sp.storage['eventSourceContexts'] = [];
        }
        else {
            this.sp.storage['eventSourceContexts'].forEach((ctx) => {
                ctx.sendEvent = () => { };
                ctx._expired = true;
            });
        }
        let eventNames = Object.keys(event.message.eventSources);
        const blockedEventSources = undefined;
        if (Array.isArray(blockedEventSources)) {
            blockedEventSources.forEach((blockedEventSource) => {
                eventNames = eventNames.filter((eventName) => eventName !== blockedEventSource);
            });
        }
        eventNames.forEach((eventName) => {
            try {
                const fn = new Function('ctx', event.message.eventSources[eventName]);
                const ctx = {
                    refr: undefined,
                    value: undefined,
                    _model: undefined,
                    _view: undefined,
                    i: -1,
                    get: (_propName) => {
                        throw new Error("ctx.get can't be used in event source");
                    },
                    respawn() {
                        throw new Error("ctx.respawn can't be used in event source");
                    },
                    sp: skyrimPlatform,
                    sendEvent: (...args) => {
                        const message = {
                            t: messages_1.MsgType.CustomEvent,
                            args,
                            eventName
                        };
                        this.controller.emitter.emit("sendMessage", {
                            message: message,
                            reliability: "reliable"
                        });
                    },
                    getFormIdInServerFormat: (clientsideFormId) => {
                        return (0, worldViewMisc_1.localIdToRemoteId)(clientsideFormId);
                    },
                    getFormIdInClientFormat: (serversideFormId) => {
                        return (0, worldViewMisc_1.remoteIdToLocalId)(serversideFormId);
                    },
                    _fn: fn,
                    _eventName: eventName,
                    state: {},
                };
                this.sp.storage['eventSourceContexts'].push(ctx);
                this.setupEventSource(ctx);
            }
            catch (e) {
                (0, skyrimPlatform_1.printConsole)(`'eventSources ${eventName} - ${e}`);
            }
        });
    }
}
exports.GamemodeEventSourceService = GamemodeEventSourceService;
;


/***/ }),

/***/ 9759:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GamemodeUpdateService = void 0;
const clientListener_1 = __webpack_require__(2166);
const remoteServer_1 = __webpack_require__(8986);
const worldViewMisc_1 = __webpack_require__(9885);
const skyrimPlatform = __webpack_require__(2112);
const Utils_1 = __webpack_require__(2453);
class GamemodeUpdateService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.emitter.on('updateGamemodeDataMessage', e => this.onUpdateGamemodeDataMessage(e));
        this.controller.emitter.on('createActorMessage', e => this.onCreateActorMessage(e));
        this.controller.on('tick', () => this.onTick());
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'GamemodeUpdateService'));
        this.updateOwnerCtx = {
            sp: skyrimPlatform,
            refr: undefined,
            value: undefined,
            _model: undefined,
            getFormIdInServerFormat: (clientsideFormId) => {
                return (0, worldViewMisc_1.localIdToRemoteId)(clientsideFormId);
            },
            getFormIdInClientFormat: (serversideFormId) => {
                return (0, worldViewMisc_1.remoteIdToLocalId)(serversideFormId);
            },
            get(propName) {
                return this._model[propName];
            },
            state: {},
            _view: undefined,
            i: -1,
            respawn: () => {
                throw new Error('ctx.respawn is not available for updateOwner');
            },
        };
        this.updateNeighborCtx = {
            refr: undefined,
            value: undefined,
            _model: undefined,
            sp: skyrimPlatform,
            state: undefined,
            _view: undefined,
            i: -1,
            getFormIdInServerFormat: (clientsideFormId) => {
                return (0, worldViewMisc_1.localIdToRemoteId)(clientsideFormId);
            },
            getFormIdInClientFormat: (serversideFormId) => {
                return (0, worldViewMisc_1.remoteIdToLocalId)(serversideFormId);
            },
            get(propName) {
                return this._model[propName];
            },
            respawn() {
                this._view.destroyForm(this.i);
            },
        };
        this.updateNeighborFunctionsKeys = [];
        this.updateNeighborFunctions = {};
    }
    setFormViewArray(formViewArray) {
        this.updateNeighborCtx._view = formViewArray;
    }
    setI(i) {
        this.updateNeighborCtx.i = i;
    }
    updateNeighbor(refr, model, state) {
    }
    onUpdateGamemodeDataMessage(event) {
        this.sp.storage['updateNeighborFunctions'] = undefined;
        this.sp.storage['updateOwnerFunctions'] = undefined;
        this.updateGamemodeUpdateFunctions('updateNeighborFunctions', event.message.updateNeighborFunctions || {});
        this.updateGamemodeUpdateFunctions('updateOwnerFunctions', event.message.updateOwnerFunctions || {});
    }
    onCreateActorMessage(event) {
        if (!event.message.isMe) {
            return;
        }
        this.controller.once('tick', () => {
            const remoteServer = this.controller.lookupListener(remoteServer_1.RemoteServer);
            const worldModel = remoteServer.getWorldModel();
            const myFormModel = worldModel.forms[worldModel.playerCharacterFormIdx];
            if (!myFormModel) {
                return;
            }
            this.setOwnerModel(myFormModel);
        });
    }
    onTick() {
        const keys = this.sp.storage['updateNeighborFunctions_keys'];
        if (keys && Array.isArray(keys)) {
            this.updateNeighborFunctionsKeys = keys;
        }
        else {
            this.updateNeighborFunctionsKeys = [];
        }
        this.updateNeighborFunctions = this.sp.storage['updateNeighborFunctions'];
    }
    onUpdate() {
        const playerRef = this.sp.ObjectReference.from(this.sp.Game.getPlayer());
        let keys = this.sp.storage['updateOwnerFunctions_keys'];
        if (!keys || !Array.isArray(keys)) {
            keys = [];
        }
        const funcs = this.sp.storage['updateOwnerFunctions'];
        if (this.sp.storage['ownerModelSet'] !== true) {
            return;
        }
        const ownerModel = this.sp.storage['ownerModel'];
        for (const propName of keys) {
            const f = funcs[propName];
            if (!f) {
                continue;
            }
            this.updateOwnerCtx._model = ownerModel;
            if (!this.updateOwnerCtx._model) {
                continue;
            }
            this.updateOwnerCtx.value = this.updateOwnerCtx._model[propName];
            if (this.updateOwnerCtx.value === undefined) {
                continue;
            }
            this.updateOwnerCtx.refr = playerRef;
            this.updateOwnerCtx._model = ownerModel;
            try {
                if (f) {
                    f(this.updateOwnerCtx);
                }
            }
            catch (e) {
            }
        }
    }
    setOwnerModel(ownerModel) {
        this.sp.storage['ownerModel'] = ownerModel;
        this.sp.storage['ownerModelSet'] = true;
    }
    updateGamemodeUpdateFunctions(storageVar, functionSources) {
        this.sp.storage[storageVar] = JSON.parse(JSON.stringify(functionSources));
        for (const propName of Object.keys(functionSources)) {
            try {
                ;
                this.sp.storage[storageVar][propName] = new Function('ctx', this.sp.storage[storageVar][propName]);
                const emptyFunction = functionSources[propName] === '';
                if (emptyFunction) {
                    delete this.sp.storage[storageVar][propName];
                }
            }
            catch (e) {
            }
        }
        this.sp.storage[`${storageVar}_keys`] = Object.keys(this.sp.storage[storageVar]);
    }
}
exports.GamemodeUpdateService = GamemodeUpdateService;


/***/ }),

/***/ 9153:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HealthArmorBarService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
const remoteServer_1 = __webpack_require__(8986);
const Vector3_1 = __webpack_require__(2233);
const Player_1 = __webpack_require__(5456);
const formView_1 = __webpack_require__(3770);
const worldViewMisc_1 = __webpack_require__(9885);
const Utils_1 = __webpack_require__(2453);
class HealthArmorBarService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.headPart = 'NPC Head [Head]';
        this.healthArmorId = undefined;
        this.controller.on('update', (0, Utils_1.profile)(this.onUpdate.bind(this), 'HealthArmorBarService'));
    }
    onUpdate() {
        const targetObject = skyrimPlatform_1.Game.getCurrentCrosshairRef();
        if (!targetObject) {
            this.removeHelpText();
            return;
        }
        const targetActor = skyrimPlatform_1.Actor.from(targetObject);
        if (!targetActor) {
            this.removeHelpText();
            return;
        }
        if (!Player_1.localPlayer.actor.hasLOS(targetActor)) {
            this.removeHelpText();
            return;
        }
        const remoteServer = this.controller.lookupListener(remoteServer_1.RemoteServer);
        const worlds = remoteServer.getWorldModel();
        const form = worlds.forms.find(v => (v === null || v === void 0 ? void 0 : v.refrId) === (0, worldViewMisc_1.localIdToRemoteId)(targetActor.getFormID()));
        const targetServerId = form === null || form === void 0 ? void 0 : form.playerDynamicId;
        const targetHealth = form === null || form === void 0 ? void 0 : form.playerHealth;
        const targetArmor = form === null || form === void 0 ? void 0 : form.playerArmor;
        if (targetServerId == null || targetHealth == null || targetArmor == null) {
            this.removeHelpText();
            return;
        }
        if (targetArmor == null || targetHealth == null) {
            this.removeHelpText();
            return;
        }
        const playerPosition = new Vector3_1.Vector3(Player_1.localPlayer.actor.getPositionX(), Player_1.localPlayer.actor.getPositionY(), Player_1.localPlayer.actor.getPositionZ());
        const targetPosition = new Vector3_1.Vector3(targetActor.getPositionX(), targetActor.getPositionY(), targetActor.getPositionZ());
        const distance = playerPosition.dist(targetPosition);
        if (distance >= formView_1.MAX_NICKNAME_VISIBLE) {
            this.removeHelpText();
            return;
        }
        this.addHelpText(targetObject, distance, targetHealth, targetArmor);
    }
    addHelpText(targetObject, distance, targetHealth, targetArmor) {
        const headScreenPos = (0, skyrimPlatform_1.worldPointToScreenPoint)([
            skyrimPlatform_1.NetImmerse.getNodeWorldPositionX(targetObject, this.headPart, false),
            skyrimPlatform_1.NetImmerse.getNodeWorldPositionY(targetObject, this.headPart, false),
            skyrimPlatform_1.NetImmerse.getNodeWorldPositionZ(targetObject, this.headPart, false) + 25,
        ])[0];
        const resolution = (0, formView_1.getScreenResolution)();
        const textXPos = Math.round(headScreenPos[0] * resolution.width);
        const textYPos = Math.round((1 - headScreenPos[1]) * resolution.height);
        if (!this.healthArmorId) {
            this.healthArmorId = (0, skyrimPlatform_1.createHealth)(textXPos, textYPos, targetHealth, targetArmor);
            (0, skyrimPlatform_1.setHealthSize)(this.healthArmorId, this.calculateTextSize(distance));
            (0, skyrimPlatform_1.setHealthShieldIndex)(this.healthArmorId, this.getArmorQualityType(targetArmor));
        }
        else {
            (0, skyrimPlatform_1.setHealthSize)(this.healthArmorId, this.calculateTextSize(distance));
            (0, skyrimPlatform_1.setHealthPos)(this.healthArmorId, textXPos, textYPos);
            const currentHealth = (0, skyrimPlatform_1.getHealthPercentage)(this.healthArmorId);
            const interpolatedHealth = this.healthLerp(currentHealth, targetHealth);
            (0, skyrimPlatform_1.setHealthPercentage)(this.healthArmorId, interpolatedHealth);
            (0, skyrimPlatform_1.setHealthArmor)(this.healthArmorId, targetArmor);
            (0, skyrimPlatform_1.setHealthShieldIndex)(this.healthArmorId, this.getArmorQualityType(targetArmor));
        }
    }
    removeHelpText() {
        if (this.healthArmorId) {
            (0, skyrimPlatform_1.destroyHealth)(this.healthArmorId);
            this.healthArmorId = undefined;
        }
    }
    calculateTextSize(distance) {
        const minTextSize = 0.2;
        const maxTextSize = 0.6;
        const textSize = minTextSize + (maxTextSize - minTextSize) * (1 - distance / formView_1.MAX_NICKNAME_VISIBLE);
        return Math.max(minTextSize, Math.min(textSize, maxTextSize));
    }
    getArmorQualityType(armor) {
        let armorType = 0;
        const armorStatusLimits = [
            { Min: 0, Max: 59 },
            { Min: 60, Max: 119 },
            { Min: 120, Max: 179 },
            { Min: 180, Max: 239 },
            { Min: 240, Max: 300 },
        ];
        armorStatusLimits.forEach((limits, index) => {
            if (armor >= limits.Min && armor <= limits.Max) {
                armorType = index;
            }
        });
        return armorType;
    }
    healthLerp(lastHealth, currentHealth) {
        const lerpFactor = 0.1;
        return lastHealth + (currentHealth - lastHealth) * lerpFactor;
    }
}
exports.HealthArmorBarService = HealthArmorBarService;


/***/ }),

/***/ 6689:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HitService = void 0;
const worldViewMisc_1 = __webpack_require__(9885);
const clientListener_1 = __webpack_require__(2166);
const Utils_1 = __webpack_require__(2453);
const events_1 = __webpack_require__(9776);
const remoteServer_1 = __webpack_require__(8986);
class HitService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.playerFormId = 0x14;
        controller.on('hit', (e) => this.onHit(e));
    }
    onHit(e) {
        var _a;
        if (e.target.getFormID() === this.playerFormId) {
            return;
        }
        if (e.aggressor.getFormID() !== this.playerFormId) {
            return;
        }
        const remoteServer = this.controller.lookupListener(remoteServer_1.RemoteServer);
        const worlds = remoteServer.getWorldModel();
        const targetServerId = (_a = worlds.forms.find(v => (v === null || v === void 0 ? void 0 : v.refrId) === (0, worldViewMisc_1.localIdToRemoteId)(e.target.getFormID()))) === null || _a === void 0 ? void 0 : _a.playerDynamicId;
        const weaponId = e.source ? e.source.getFormID() : 0;
        if (isNaN(targetServerId)) {
            return;
        }
        (0, Utils_1.sendEventToServer)(events_1.DamageSystemEvents.HIT, {
            targetId: targetServerId,
            weaponId: weaponId,
            isBashAttack: e.isBashAttack,
            isHitBlocked: e.isHitBlocked,
            isPowerAttack: e.isPowerAttack,
            isSneakAttack: e.isSneakAttack,
            projectile: e.projectile
        });
    }
}
exports.HitService = HitService;


/***/ }),

/***/ 2744:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LastInvService = void 0;
const clientListener_1 = __webpack_require__(2166);
class LastInvService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
    }
    get lastInv() {
        return this._lastInv;
    }
    set lastInv(newValue) {
        this._lastInv = newValue;
    }
}
exports.LastInvService = LastInvService;


/***/ }),

/***/ 2041:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LauncherService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
const timersService_1 = __webpack_require__(8031);
const Utils_1 = __webpack_require__(2453);
const spApiInteraction_1 = __webpack_require__(3331);
const browserService_1 = __webpack_require__(5472);
const InterfacesName_1 = __webpack_require__(3638);
const FunctionName_1 = __webpack_require__(9865);
const networkingService_1 = __webpack_require__(3054);
const remoteServer_1 = __webpack_require__(8986);
const CONNECTION_ERROR = 'Could not establish connection';
class LauncherService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.authToken = '';
        this.login = '';
        this.launcherIsRunning = false;
        this.launcherUrl = 'localhost';
        this.apiKey = '4d23bed5-75c2-4833-bb60-4b6f26907988';
        this.launcherQuery = {
            Check: '/check',
            Ping: '/ping',
            Token: '/token',
            AccountLogin: '/id',
        };
        this.httpClient = new skyrimPlatform_1.HttpClient(this.launcherUrl);
        this.controller.once('tick', this.start.bind(this));
    }
    start() {
        this.httpClient = new skyrimPlatform_1.HttpClient(this.launcherUrl);
        this.controller.lookupListener(timersService_1.TimersService).setInterval(() => {
            this.checkConnection();
        }, 5 * 1000);
        this.loadTokenAndLogin();
    }
    checkConnection() {
        this.httpClient
            .get(this.launcherQuery.Ping, {
            headers: { 'API-Key': this.apiKey },
        })
            .then((data) => {
            if (data.error === CONNECTION_ERROR) {
                return this.quitFromGame('Лаунчер не запущен');
            }
            const response = JSON.parse(data.body);
            if (!response.pong) {
                return this.quitFromGame('Лаунчер не запущен');
            }
        })
            .catch((_error) => {
            this.quitFromGame('Лаунчер не запущен');
        });
        this.httpClient
            .get(this.launcherQuery.Check, {
            headers: { 'API-Key': this.apiKey },
        })
            .then((data) => {
            if (data.error === CONNECTION_ERROR) {
                return this.quitFromGame('Лаунчер не запущен');
            }
            const response = JSON.parse(data.body);
            if (response.isRunning && !response.isRunningFromLauncher) {
                return this.quitFromGame('Игра запущена не из лаунчера');
            }
            this.launcherIsRunning = response.isRunningFromLauncher;
        })
            .catch((_error) => {
            this.quitFromGame('Лаунчер не запущен');
        });
    }
    loadTokenAndLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            const responseToken = yield this.httpClient.get(this.launcherQuery.Token, {
                headers: { 'API-Key': this.apiKey },
            });
            const responseLogin = yield this.httpClient.get(this.launcherQuery.AccountLogin, {
                headers: { 'API-Key': this.apiKey },
            });
            this.authToken = JSON.parse(responseToken.body).token;
            this.login = JSON.parse(responseLogin.body).nickname;
        });
    }
    sendTokenAndLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.authToken && !this.login) {
                yield this.loadTokenAndLogin();
            }
            (0, Utils_1.sendEventToServer)('auth:connected', {
                login: this.login,
                token: this.authToken,
            });
        });
    }
    quitFromGame(reason, adminName = '', timeout = 10) {
        if (reason.length > 0) {
            this.showKickMessage(reason, adminName);
        }
        this.controller.lookupListener(networkingService_1.NetworkingService).close();
        this.controller.lookupListener(timersService_1.TimersService).setTimeout(() => {
            (0, skyrimPlatform_1.once)('update', () => {
                skyrimPlatform_1.Debug.quitGame();
            });
        }, timeout * 1000);
    }
    showKickMessage(reason, adminName) {
        (0, skyrimPlatform_1.once)('update', () => {
            var _a, _b;
            const remoteServer = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer);
            const worlds = remoteServer.getWorldModel();
            const playerName = (_b = (_a = worlds.forms.find(v => v === null || v === void 0 ? void 0 : v.isMyClone)) === null || _a === void 0 ? void 0 : _a.appearance) === null || _b === void 0 ? void 0 : _b.name;
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.KickInfo}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.KickInfo].SetInfo}`, {
                name: playerName,
                type: 'Кик',
                admin: adminName,
                reason: reason,
            });
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(browserService_1.BrowserService)
                .executeBrowser(`${InterfacesName_1.BrowserInterfacesName.KickInfo}/${FunctionName_1.BrowserFunctionName[InterfacesName_1.BrowserInterfacesName.KickInfo].Show}`, null, true);
        });
    }
}
exports.LauncherService = LauncherService;


/***/ }),

/***/ 1127:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoadGameService = void 0;
const CharacterEditorService_1 = __webpack_require__(5637);
const clientListener_1 = __webpack_require__(2166);
class LoadGameService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this._isCausedBySkyrimPlatform = false;
        this.controller.on('loadGame', () => this.onLoadGame());
        this.controller.once('tick', () => {
            this.loadGame([CharacterEditorService_1.CharacterLocation.position.x, CharacterEditorService_1.CharacterLocation.position.y, CharacterEditorService_1.CharacterLocation.position.z], [CharacterEditorService_1.CharacterLocation.rotation.x, CharacterEditorService_1.CharacterLocation.rotation.y, CharacterEditorService_1.CharacterLocation.rotation.z], CharacterEditorService_1.CharacterLocation.cellOrWorld);
        });
    }
    loadGame(pos, rot, worldOrCell, changeFormNpc, loadOrder, time) {
        try {
            this.sp.loadGame(pos, rot, worldOrCell, changeFormNpc, loadOrder, time);
        }
        catch (e) {
            this.sp.loadGame(pos, rot, worldOrCell, undefined, loadOrder, time);
        }
        this._isCausedBySkyrimPlatform = true;
    }
    onLoadGame() {
        try {
            const gameLoadEvent = {
                isCausedBySkyrimPlatform: this._isCausedBySkyrimPlatform,
            };
            this.controller.emitter.emit('gameLoad', gameLoadEvent);
        }
        catch (e) {
            this.controller.once('tick', () => {
                this._isCausedBySkyrimPlatform = false;
            });
            throw e;
        }
        this.controller.once('tick', () => {
            this._isCausedBySkyrimPlatform = false;
        });
    }
}
exports.LoadGameService = LoadGameService;


/***/ }),

/***/ 1249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LoadOrderVerificationService = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const formView_1 = __webpack_require__(3770);
const clientListener_1 = __webpack_require__(2166);
const STATE_KEY = 'loadOrderCheckState';
class LoadOrderVerificationService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
    }
    verifyLoadOrder(manifest) {
        try {
            this.resetText();
            const clientMods = this.getClientMods();
            const serverMods = manifest.mods;
            if (clientMods.length < serverMods.length) {
            }
            if (clientMods.length > serverMods.length) {
            }
            const fail = [];
            for (let i = 0; i < serverMods.length; ++i) {
                if (clientMods[i].filename.toLowerCase() !== serverMods[i].filename.toLowerCase() ||
                    clientMods[i].size !== serverMods[i].size ||
                    clientMods[i].crc32 !== serverMods[i].crc32) {
                    fail.push(i);
                    (0, skyrimPlatform_1.printConsole)(`${i}-th mod (numbered from 0) does not match.`);
                    (0, skyrimPlatform_1.printConsole)(`Server has ${JSON.stringify(serverMods[i])}`);
                    (0, skyrimPlatform_1.printConsole)(`We have ${JSON.stringify(clientMods[i])}`);
                }
            }
            if (fail.length !== 0) {
            }
        }
        catch (error) {
            (0, skyrimPlatform_1.printConsole)(error);
        }
    }
    getState() {
        if (typeof this.sp.storage[STATE_KEY] !== 'object') {
            return {};
        }
        return this.sp.storage[STATE_KEY];
    }
    setState(replacement) {
        const oldState = (this.sp.storage[STATE_KEY] = this.getState());
        for (const [k, v] of Object.entries(replacement)) {
            ;
            oldState[k] = v;
        }
    }
    resetText() {
        let { statusTextId } = this.getState();
        if (statusTextId) {
            this.sp.destroyText(statusTextId);
            statusTextId = undefined;
            this.setState({ statusTextId });
        }
    }
    updateText(text, color, clearDelay) {
        const { width, height } = (0, formView_1.getScreenResolution)();
        this.resetText();
        const statusTextId = (0, skyrimPlatform_1.createText)(width / 2, height / 2, text, color);
        this.setState({ statusTextId });
        if (clearDelay) {
            skyrimPlatform_1.Utility.wait(clearDelay).then(() => this.resetText());
        }
    }
    enumerateClientMods(getCount, getAt) {
        const result = [];
        for (let i = 0; i < getCount(); ++i) {
            const filename = getAt(i);
            const { crc32, size } = this.sp.getFileInfo(filename);
            result.push({ filename, crc32, size });
        }
        return result;
    }
    getClientMods() {
        return this.enumerateClientMods(skyrimPlatform_1.Game.getModCount, skyrimPlatform_1.Game.getModName);
    }
}
exports.LoadOrderVerificationService = LoadOrderVerificationService;


/***/ }),

/***/ 7332:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MagicSyncService = void 0;
const worldViewMisc_1 = __webpack_require__(9885);
const skyrimPlatform_1 = __webpack_require__(2112);
const clientListener_1 = __webpack_require__(2166);
const messages_1 = __webpack_require__(3740);
const Utils_1 = __webpack_require__(2453);
class MagicSyncService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.playerId = 0x14;
        this.sendUpdateAnimationVariablesRateMs = 500;
        this.lastSpellCastEventMsg = null;
        this.lastSendUpdateAnimationVariables = 0;
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'MagicSyncService'));
        this.controller.on('spellCast', e => this.onSpellCast(e));
        const self = this;
        this.sp.hooks.sendAnimationEvent.add({
            enter: ctx => { },
            leave: ctx => {
                self.onSendAnimationEventLeave(ctx);
            },
        }, this.playerId, this.playerId);
    }
    onUpdate() {
        if (this.isAnyMagicStuffEquiped() === false) {
            return;
        }
        if (Date.now() - this.lastSendUpdateAnimationVariables <= this.sendUpdateAnimationVariablesRateMs) {
            return;
        }
        this.lastSendUpdateAnimationVariables = Date.now();
        this.controller.once('update', () => {
            const ac = skyrimPlatform_1.Game.getPlayer();
            if (!ac) {
                return;
            }
            const animVariables = (0, skyrimPlatform_1.getAnimationVariablesFromActor)(ac.getFormID());
            this.controller.emitter.emit('sendMessage', {
                message: { t: messages_1.MsgType.UpdateAnimVariables, data: this.getUpdateAnimVariablesEventData(ac, animVariables) },
                reliability: 'reliable',
            });
        });
    }
    onSpellCast(event) {
        const isInterruptCast = false;
        const msg = this.getSpellCastEventData(event, isInterruptCast);
        this.controller.emitter.emit('sendMessage', {
            message: { t: messages_1.MsgType.SpellCast, data: msg },
            reliability: 'reliable',
        });
        this.lastSpellCastEventMsg = msg;
    }
    onSendAnimationEventLeave(ctx) {
        if (!this.lastSpellCastEventMsg || !this.isInteraptSpellCastAnim(ctx.animEventName)) {
            return;
        }
        this.controller.once('update', () => {
            if (!this.lastSpellCastEventMsg || this.lastSpellCastEventMsg.interruptCast) {
                return;
            }
            const msg = this.lastSpellCastEventMsg;
            msg.interruptCast = true;
            msg.actorAnimationVariables = (0, skyrimPlatform_1.getAnimationVariablesFromActor)((0, worldViewMisc_1.remoteIdToLocalId)(this.lastSpellCastEventMsg.caster));
            this.controller.emitter.emit('sendMessage', {
                message: { t: messages_1.MsgType.SpellCast, data: msg },
                reliability: 'reliable',
            });
        });
    }
    getSpellCastEventData(e, isInterruptCast) {
        const spellCastData = {
            caster: (0, worldViewMisc_1.localIdToRemoteId)(e.caster.getFormID(), true),
            target: e.target ? (0, worldViewMisc_1.localIdToRemoteId)(e.target.getFormID(), true) : 0,
            spell: e.spell ? e.spell.getFormID() : 0,
            interruptCast: isInterruptCast,
            isDualCasting: e.isDualCasting,
            castingSource: e.castingSource,
            aimAngle: e.aimAngle,
            aimHeading: e.aimHeading,
            actorAnimationVariables: (0, skyrimPlatform_1.getAnimationVariablesFromActor)(e.caster.getFormID()),
        };
        return spellCastData;
    }
    getUpdateAnimVariablesEventData(ac, animVariables) {
        const animVarsData = {
            actorRemoteId: (0, worldViewMisc_1.localIdToRemoteId)(ac.getFormID(), true),
            actorAnimationVariables: animVariables,
        };
        return animVarsData;
    }
    isInteraptSpellCastAnim(animEventName) {
        const eventName = animEventName.toLowerCase();
        return eventName === 'mlh_equipped_event' || eventName === 'mrh_equipped_event';
    }
    isSpellCastAnim(animEventName) {
        const eventName = animEventName.toLowerCase();
        const isSpellCastAnimForLeftHand = eventName === 'mlh_spellaimedconcentrationstart' ||
            eventName === 'mlh_spellaimedstart' ||
            eventName === 'mlh_spellready_event' ||
            eventName === 'mlh_spellrelease_event' ||
            eventName === 'mlh_equipped_event';
        const isSpellCastAnimForRightHand = eventName === 'mrh_spellaimedconcentrationstart' ||
            eventName === 'mrh_spellaimedstart' ||
            eventName === 'mrh_spellready_event' ||
            eventName === 'mrh_spellrelease_event' ||
            eventName === 'mrh_equipped_event';
        return isSpellCastAnimForLeftHand || isSpellCastAnimForRightHand;
    }
    isAnyMagicStuffEquiped() {
        const ac = skyrimPlatform_1.Game.getPlayer();
        if (!ac) {
            return false;
        }
        if (ac.getEquippedSpell(0) || ac.getEquippedSpell(1)) {
            return true;
        }
        if (ac.getEquippedSpell(2) || ac.getEquippedSpell(3)) {
            return true;
        }
        const leftHandEquipmentType = ac.getEquippedItemType(1);
        const rightHandEquipmentType = ac.getEquippedItemType(2);
        if (leftHandEquipmentType === 9 ||
            leftHandEquipmentType === 8 ||
            rightHandEquipmentType === 9 ||
            rightHandEquipmentType === 8) {
            return true;
        }
        return false;
    }
}
exports.MagicSyncService = MagicSyncService;


/***/ }),

/***/ 3054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NetworkingService = void 0;
const errors_1 = __webpack_require__(8286);
const messages_1 = __webpack_require__(3740);
const clientListener_1 = __webpack_require__(2166);
const launcherService_1 = __webpack_require__(2041);
const remoteServer_1 = __webpack_require__(8986);
class NetworkingService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.on('tick', () => this.onTick());
        this.controller.emitter.on('sendMessage', e => this.onSendMessage(e));
        this.controller.emitter.on('sendMessageWithRefrId', e => this.onSendMessageWithRefrId(e));
    }
    onSendMessage(e) {
        this.sp.mpClientPlugin.send(JSON.stringify(e.message), this.isReliable(e.reliability));
    }
    onSendMessageWithRefrId(e) {
        const refrId = e.message._refrId;
        const remoteServer = this.controller.lookupListener(remoteServer_1.RemoteServer);
        const idxInModel = refrId
            ? remoteServer.getWorldModel().forms.findIndex(f => f && f.refrId === refrId)
            : remoteServer.getWorldModel().playerCharacterFormIdx;
        if (!remoteServer.getWorldModel().forms[idxInModel]) {
            return;
        }
        e.message.idx = remoteServer.getWorldModel().forms[idxInModel].idx;
        delete e.message._refrId;
        this.sp.mpClientPlugin.send(JSON.stringify(e.message), this.isReliable(e.reliability));
    }
    connect(hostName, port, password) {
        this.serverAddress = { hostName, port, password };
        this.createClientSafe();
    }
    reconnect() {
        this.controller.lookupListener(launcherService_1.LauncherService).quitFromGame('Потеряно соединение с сервером перезайдите', 'Skyrim Role Play');
        this.createClientSafe();
    }
    close() {
        this.sp.mpClientPlugin.destroyClient();
    }
    isConnected() {
        return this.sp.mpClientPlugin.isConnected();
    }
    onTick() {
        this.sp.mpClientPlugin.tick((packetType, jsonContent, error) => {
            switch (packetType) {
                case 'connectionAccepted':
                    this.controller.emitter.emit('connectionAccepted', {});
                    break;
                case 'connectionDenied':
                    this.controller.emitter.emit('connectionDenied', { error });
                    this.reconnect();
                    break;
                case 'connectionFailed':
                    this.controller.emitter.emit('connectionFailed', {});
                    this.reconnect();
                    break;
                case 'disconnect':
                    this.controller.emitter.emit('connectionDisconnect', {});
                    this.reconnect();
                    break;
                case 'message':
                    const msgAny = JSON.parse(jsonContent);
                    if ('type' in msgAny) {
                        if (msgAny.type === 'createActor') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('createActorMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'customPacket') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('customPacketMessage2', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'destroyActor') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('destroyActorMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'hostStart') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('hostStartMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'hostStop') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('hostStopMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'setInventory') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('setInventoryMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'setRaceMenuOpen') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('setRaceMenuOpenMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'spSnippet') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('spSnippetMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'updateGamemodeData') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('updateGamemodeDataMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.type === 'teleport') {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('teleportMessage2', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else {
                            throw new errors_1.NeverError(msgAny);
                        }
                    }
                    else {
                        if (msgAny.t === messages_1.MsgType.OpenContainer) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('openContainerMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.UpdateMovement) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('updateMovementMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.UpdateAnimation) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('updateAnimationMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.UpdateEquipment) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('updateEquipmentMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.ChangeValues) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('changeValuesMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.UpdateAppearance) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('updateAppearanceMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.Teleport) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('teleportMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.UpdateProperty) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('updatePropertyMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.DeathStateContainer) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('deathStateContainerMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.ReconMoveMessage) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('reconMoveMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                        else if (msgAny.t === messages_1.MsgType.ReconDetachMessage) {
                            const event = { message: msgAny };
                            this.controller.emitter.emit('reconDetachMessage', event);
                            this.controller.emitter.emit('anyMessage', event);
                        }
                    }
                    break;
            }
        });
    }
    createClientSafe() {
        const { hostName, port, password } = this.serverAddress;
        if (this.serverAddress.hostName !== '' && this.serverAddress.port !== 0) {
            this.sp.mpClientPlugin.createClient(hostName, port, password);
        }
    }
    get serverAddress() {
        const res = this.sp.storage.serverAddress;
        if (typeof res === 'object') {
            const result = res;
            if (typeof result.hostName === 'string' && typeof result.port === 'number') {
                return result;
            }
        }
        return { hostName: '', port: 0, password: '' };
    }
    set serverAddress(newValue) {
        this.sp.storage.serverAddress = newValue;
    }
    isReliable(reliability) {
        switch (reliability) {
            case 'reliable':
                return true;
            case 'unreliable':
                return false;
            default:
                throw new errors_1.NeverError(reliability);
        }
    }
}
exports.NetworkingService = NetworkingService;


/***/ }),

/***/ 7366:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlayerBowShotService = void 0;
const clientListener_1 = __webpack_require__(2166);
const messages_1 = __webpack_require__(3740);
class PlayerBowShotService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.score = 0;
        this.inventoryUnblockMoment = 0;
        this.controller.emitter.on('queryBlockSetInventoryEvent', e => this.onQueryBlockSetInventoryEvent(e));
        this.controller.on('playerBowShot', e => this.onPlayerBowShot(e));
        const _this = this;
        const eventPatterns = ['attackRelease', 'crossbowAttackStart'];
        eventPatterns.forEach(eventPattern => {
            this.sp.hooks.sendAnimationEvent.add({
                enter(ctx) { },
                leave(ctx) {
                    if (!ctx.animationSucceeded) {
                        return;
                    }
                    if (ctx.animEventName === 'crossbowAttackStart') {
                        _this.score = 1;
                    }
                    else if (ctx.animEventName === 'attackRelease') {
                        if (_this.score === 1) {
                            _this.controller.once('update', () => {
                                _this.onPlayerCrossbowShot();
                            });
                            _this.score = 0;
                        }
                    }
                    else {
                        _this.score = 0;
                    }
                },
            }, 0x14, 0x14, eventPattern);
        });
    }
    onQueryBlockSetInventoryEvent(e) {
        if (Date.now() < this.inventoryUnblockMoment) {
            e.block();
        }
    }
    onPlayerBowShot(e) {
        this.controller.emitter.emit('sendMessage', {
            message: {
                t: messages_1.MsgType.PlayerBowShot,
                weaponId: e.weapon.getFormID(),
                ammoId: e.ammo.getFormID(),
                power: e.power,
                isSunGazing: e.isSunGazing || false,
            },
            reliability: 'unreliable',
        });
    }
    onPlayerCrossbowShot() {
        const actor = this.sp.Game.getPlayer();
        if (actor === null) {
            return;
        }
        const crossbow = actor.getEquippedWeapon(false);
        if (crossbow === null) {
            return;
        }
        const weaponType = crossbow.getWeaponType();
        if (weaponType !== 9) {
            return;
        }
        this.controller.emitter.emit('sendMessage', {
            message: {
                t: messages_1.MsgType.PlayerBowShot,
                weaponId: crossbow.getFormID(),
                ammoId: 0,
                isSunGazing: false,
                power: 1.0,
            },
            reliability: 'unreliable',
        });
        this.inventoryUnblockMoment = Date.now() + 5 * 1000;
    }
}
exports.PlayerBowShotService = PlayerBowShotService;


/***/ }),

/***/ 5062:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RagdollService = void 0;
const clientListener_1 = __webpack_require__(2166);
class RagdollService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.safeRemoveRagdollFromWorld = (actor, afterRemoveCallback) => {
            this.setLocalDamageMult(0);
            actor.forceRemoveRagdollFromWorld().then(() => {
                this.controller.once("update", () => {
                    this.setLocalDamageMult(this.defaultLocalDamageMult);
                    afterRemoveCallback();
                });
            });
        };
        this.defaultLocalDamageMult = 0;
        this.controller.once("update", () => this.onceUpdate());
    }
    onceUpdate() {
        this.setLocalDamageMult(this.defaultLocalDamageMult);
    }
    setLocalDamageMult(damageMult) {
        this.sp.Game.setGameSettingFloat("fDiffMultHPToPCE", damageMult);
        this.sp.Game.setGameSettingFloat("fDiffMultHPToPCH", damageMult);
        this.sp.Game.setGameSettingFloat("fDiffMultHPToPCL", damageMult);
        this.sp.Game.setGameSettingFloat("fDiffMultHPToPCN", damageMult);
        this.sp.Game.setGameSettingFloat("fDiffMultHPToPCVE", damageMult);
        this.sp.Game.setGameSettingFloat("fDiffMultHPToPCVH", damageMult);
    }
}
exports.RagdollService = RagdollService;


/***/ }),

/***/ 8986:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RemoteServer = exports.getPcInventory = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const skyrimPlatform_2 = __webpack_require__(2112);
const objectReferenceEx_1 = __webpack_require__(7564);
const idManager_1 = __webpack_require__(6433);
const nameof_1 = __webpack_require__(4755);
const actorvalues_1 = __webpack_require__(9714);
const equipment_1 = __webpack_require__(1697);
const inventory_1 = __webpack_require__(2552);
const spell_1 = __webpack_require__(1882);
const modelApplyUtils_1 = __webpack_require__(3745);
const loadGameService_1 = __webpack_require__(1127);
const ragdollService_1 = __webpack_require__(5062);
const errors_1 = __webpack_require__(8286);
const networkingService_1 = __webpack_require__(3054);
const clientListener_1 = __webpack_require__(2166);
const worldViewMisc_1 = __webpack_require__(9885);
const timeService_1 = __webpack_require__(39);
const appearanceSync_1 = __webpack_require__(282);
const Familiars_1 = __webpack_require__(3246);
const HealthControlHandler_1 = __webpack_require__(7340);
const Restrictions_1 = __webpack_require__(9210);
const StaminaHudState_1 = __webpack_require__(3687);
const Animations_1 = __webpack_require__(7442);
const controller_1 = __webpack_require__(6955);
const controller_2 = __webpack_require__(1113);
const controller_3 = __webpack_require__(6291);
const EscapeMenu_1 = __webpack_require__(8428);
const Hud_1 = __webpack_require__(9720);
const notifications_1 = __webpack_require__(7460);
const Player_1 = __webpack_require__(5456);
const controller_4 = __webpack_require__(9527);
const controller_5 = __webpack_require__(6241);
const ColshapesHandler_1 = __webpack_require__(9978);
const LablesHandler_1 = __webpack_require__(497);
const Utils_1 = __webpack_require__(2453);
const events_1 = __webpack_require__(980);
const events_2 = __webpack_require__(919);
const PersonHealth_1 = __webpack_require__(2182);
const PersonRestrictions_1 = __webpack_require__(9713);
const PersonStamina_1 = __webpack_require__(3072);
const events_3 = __webpack_require__(9609);
const events_4 = __webpack_require__(265);
const events_5 = __webpack_require__(9110);
const events_6 = __webpack_require__(8939);
const serverEvents_1 = __webpack_require__(593);
const events_7 = __webpack_require__(9321);
const GameRestrictions_1 = __webpack_require__(3352);
const events_8 = __webpack_require__(8007);
const spApiInteraction_1 = __webpack_require__(3331);
const launcherService_1 = __webpack_require__(2041);
const events_9 = __webpack_require__(2416);
const events_10 = __webpack_require__(911);
const ArmorShop_1 = __webpack_require__(7418);
const WeaponShop_1 = __webpack_require__(7683);
const events_11 = __webpack_require__(2334);
const FishingWork_1 = __webpack_require__(1508);
const browserService_1 = __webpack_require__(5472);
const loadOrderVerificationService_1 = __webpack_require__(1249);
const AnimationsHandler_1 = __webpack_require__(3947);
const NotificationsHandler_1 = __webpack_require__(5807);
const events_12 = __webpack_require__(2266);
const Recon_1 = __webpack_require__(4801);
const events_13 = __webpack_require__(5578);
const BanEvents_1 = __webpack_require__(2957);
const BansSystem_1 = __webpack_require__(2892);
const PickupItem_1 = __webpack_require__(7005);
const getPcInventory = () => {
    const res = skyrimPlatform_2.storage['pcInv'];
    if (typeof res === 'object' && res['entries']) {
        return res;
    }
    return undefined;
};
exports.getPcInventory = getPcInventory;
const setPcInventory = (inv) => {
    skyrimPlatform_2.storage['pcInv'] = inv;
};
let pcInvLastApply = 0;
(0, skyrimPlatform_2.on)('update', () => {
    if ((0, equipment_1.isBadMenuShown)()) {
        return;
    }
    if (Date.now() - pcInvLastApply > 5000) {
        pcInvLastApply = Date.now();
        const pcInv = (0, exports.getPcInventory)();
        if (pcInv) {
            (0, inventory_1.applyInventory)(skyrimPlatform_2.Game.getPlayer(), pcInv, false, true);
        }
    }
});
const unequipIronHelmet = () => {
    const ironHelment = skyrimPlatform_2.Armor.from(skyrimPlatform_2.Game.getFormEx(0x00012e4d));
    const pl = skyrimPlatform_2.Game.getPlayer();
    if (pl) {
        pl.unequipItem(ironHelment, false, true);
    }
};
class RemoteServer extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.teleportAfterAuth = false;
        this.countTeleport = 0;
        this.loggingStartMoment = 0;
        this.backupAnimation = new Map();
        this.controller.on('tick', () => this.onTick());
        this.controller.emitter.on('setInventoryMessage', e => this.onSetInventoryMessage(e));
        this.controller.emitter.on('updateMovementMessage', e => this.onUpdateMovementMessage(e));
        this.controller.emitter.on('updateAnimationMessage', e => this.onUpdateAnimationMessage(e));
        this.controller.emitter.on('updateOtherAnimationMessage', e => this.onUpdateOtherAnimationMessage(e));
        this.controller.emitter.on('updateEquipmentMessage', e => this.onUpdateEquipmentMessage(e));
        this.controller.emitter.on('changeValuesMessage', e => this.onChangeValuesMessage(e));
        this.controller.emitter.on('updateAppearanceMessage', e => this.onUpdateAppearanceMessage(e));
        this.controller.emitter.on('teleportMessage', e => this.onTeleportMessage(e));
        this.controller.emitter.on('teleportMessage2', e => this.onTeleportMessage(e));
        this.controller.emitter.on('createActorMessage', e => this.onCreateActorMessage(e));
        this.controller.emitter.on('customPacketMessage2', e => this.onCustomPacketMessage2(e));
        this.controller.emitter.on('destroyActorMessage', e => this.onDestroyActorMessage(e));
        this.controller.emitter.on('setRaceMenuOpenMessage', e => this.onSetRaceMenuOpenMessage(e));
        this.controller.emitter.on('updatePropertyMessage', e => this.onUpdatePropertyMessage(e));
        this.controller.emitter.on('deathStateContainerMessage', e => this.onDeathStateContainerMessage(e));
        this.controller.emitter.on('connectionAccepted', () => this.handleConnectionAccepted());
    }
    onTick() {
        const maxLoggingDelay = 15000;
        if (this.loggingStartMoment && Date.now() - this.loggingStartMoment > maxLoggingDelay) {
            this.showConnectionError();
            this.controller.lookupListener(networkingService_1.NetworkingService).reconnect();
            this.loggingStartMoment = 0;
        }
    }
    onSetInventoryMessage(event) {
        const msg = event.message;
        (0, skyrimPlatform_2.once)('update', () => {
            setPcInventory(msg.inventory);
            let blocked = false;
            this.controller.emitter.emit('queryBlockSetInventoryEvent', {
                block: () => (blocked = true),
            });
            if (!blocked) {
                pcInvLastApply = 0;
            }
        });
    }
    onTeleportMessage(event) {
        const msg = event.message;
        (0, skyrimPlatform_2.once)('update', () => {
            if (!this.teleportAfterAuth && this.countTeleport > 2) {
                return;
            }
            this.countTeleport++;
            const id = 'idx' in msg && typeof msg.idx === 'number' ? this.getIdManager().getId(msg.idx) : this.getMyActorIndex();
            const refr = id === this.getMyActorIndex() ? skyrimPlatform_2.Game.getPlayer() : (0, worldViewMisc_1.getObjectReference)(id);
            const ragdollService = this.controller.lookupListener(ragdollService_1.RagdollService);
            const refrId = refr === null || refr === void 0 ? void 0 : refr.getFormID();
            const removeRagdollCallback = () => {
                skyrimPlatform_2.TESModPlatform.moveRefrToPosition(skyrimPlatform_2.ObjectReference.from(skyrimPlatform_2.Game.getFormEx(refrId || 0)), skyrimPlatform_2.Cell.from(skyrimPlatform_2.Game.getFormEx(msg.worldOrCell)), skyrimPlatform_2.WorldSpace.from(skyrimPlatform_2.Game.getFormEx(msg.worldOrCell)), msg.pos[0], msg.pos[1], msg.pos[2], msg.rot[0], msg.rot[1], msg.rot[2]);
            };
            const actor = skyrimPlatform_1.Actor.from(refr);
            if (actor) {
                ragdollService.safeRemoveRagdollFromWorld(actor, removeRagdollCallback);
            }
            else {
                removeRagdollCallback();
            }
        });
    }
    onCreateActorMessage(event) {
        var _a, _b, _c, _d;
        const msg = event.message;
        if (this.skipFormViewCreation(msg)) {
            const refrId = msg.refrId;
            this.onceLoad(refrId, (refr) => {
                var _a;
                if (refr) {
                    objectReferenceEx_1.ObjectReferenceEx.dealWithRef(refr, refr.getBaseObject());
                    if (msg.props) {
                        if (msg.props.inventory) {
                            modelApplyUtils_1.ModelApplyUtils.applyModelInventory(refr, msg.props.inventory);
                        }
                        modelApplyUtils_1.ModelApplyUtils.applyModelIsOpen(refr, !!msg.props['isOpen']);
                        modelApplyUtils_1.ModelApplyUtils.applyModelIsHarvested(refr, !!msg.props['isHarvested']);
                        if (msg.props.setNodeScale) {
                            const setNodeScale = msg.props.setNodeScale;
                            for (const key in setNodeScale) {
                                const scale = setNodeScale[key];
                                const firstPerson = false;
                                this.sp.NetImmerse.setNodeScale(refr, key, scale, firstPerson);
                            }
                        }
                        if (msg.props.setNodeTextureSet) {
                            const setNodeTextureSet = msg.props.setNodeTextureSet;
                            for (const key in setNodeTextureSet) {
                                const textureSetId = setNodeTextureSet[key];
                                const firstPerson = false;
                                const textureSet = skyrimPlatform_1.TextureSet.from(skyrimPlatform_2.Game.getFormEx(textureSetId));
                                if (textureSet !== null) {
                                    this.sp.NetImmerse.setNodeTextureSet(refr, key, textureSet, firstPerson);
                                }
                            }
                        }
                        modelApplyUtils_1.ModelApplyUtils.applyModelIsDisabled(refr, !!msg.props['disabled']);
                        const animation = msg.props.lastAnimation;
                        if (typeof animation === 'string') {
                            const refrid = refr.getFormID();
                            (() => __awaiter(this, void 0, void 0, function* () {
                                var _b;
                                for (let i = 0; i < 5; i++) {
                                    const res2 = (_b = skyrimPlatform_2.ObjectReference.from(skyrimPlatform_2.Game.getFormEx(refrid))) === null || _b === void 0 ? void 0 : _b.playAnimation(animation);
                                    if (res2) {
                                        break;
                                    }
                                    yield skyrimPlatform_2.Utility.wait(2);
                                }
                            }))();
                        }
                        let displayName = msg.props.displayName;
                        if (typeof displayName === 'string') {
                            const replaceValue = (_a = refr.getBaseObject()) === null || _a === void 0 ? void 0 : _a.getName();
                            if (replaceValue !== undefined) {
                                displayName = displayName.replace(/%original_name%/g, replaceValue);
                            }
                            refr.setDisplayName(displayName, true);
                        }
                    }
                }
            });
            return;
        }
        this.loggingStartMoment = 0;
        const i = this.getIdManager().allocateIdFor(msg.idx);
        if (this.worldModel.forms.length <= i) {
            this.worldModel.forms.length = i + 1;
        }
        let movement = undefined;
        if (msg.refrId !== undefined && msg.refrId >= 0xff000000) {
            movement = {
                pos: msg.transform.pos,
                rot: msg.transform.rot,
                worldOrCell: msg.transform.worldOrCell,
                runMode: 'Standing',
                direction: 0,
                isInJumpState: false,
                isSneaking: false,
                isBlocking: false,
                isWeapDrawn: false,
                isDead: false,
                healthPercentage: 1.0,
                speed: 0,
            };
        }
        const form = {
            idx: msg.idx,
            movement,
            numMovementChanges: 0,
            numAppearanceChanges: 0,
            baseId: msg.baseId,
            refrId: msg.refrId,
            isMyClone: msg.isMe,
        };
        this.worldModel.forms[i] = form;
        if (msg.appearance) {
            form.appearance = msg.appearance;
        }
        if (msg.equipment) {
            form.equipment = msg.equipment;
        }
        if (msg.isDead) {
            form.isDead = msg.isDead;
        }
        if (((_a = msg.props) === null || _a === void 0 ? void 0 : _a.playerDynamicId) != null) {
            if (this.backupAnimation.has((_b = msg.props) === null || _b === void 0 ? void 0 : _b.playerDynamicId)) {
                form.animation = this.backupAnimation.get((_c = msg.props) === null || _c === void 0 ? void 0 : _c.playerDynamicId);
            }
        }
        if (msg.animation) {
            form.animation = msg.animation;
        }
        if (msg.props) {
            for (const propName in msg.props) {
                ;
                form[propName] = msg.props[propName];
            }
        }
        if (msg.isMe) {
            this.worldModel.playerCharacterFormIdx = i;
            this.worldModel.playerCharacterRefrId = msg.refrId || 0;
        }
        if (msg.props && msg.props.isRaceMenuOpen && msg.isMe) {
            this.onSetRaceMenuOpenMessage({
                message: { type: 'setRaceMenuOpen', open: true },
            });
        }
        const applyPcInv = () => {
            if (msg.equipment) {
                const localActor = skyrimPlatform_2.Game.getPlayer();
                (0, skyrimPlatform_1.setInventory)(localActor.getFormID(), msg.equipment.armor, msg.equipment.weaponLeft, msg.equipment.weaponRight);
            }
            if (msg.props && msg.props.inventory) {
                this.onSetInventoryMessage({
                    message: {
                        type: 'setInventory',
                        inventory: msg.props.inventory,
                    },
                });
            }
        };
        if (msg.isMe && msg.props && msg.props.learnedSpells) {
            const learnedSpells = msg.props.learnedSpells;
            (0, skyrimPlatform_2.once)('update', () => {
                skyrimPlatform_2.Utility.wait(1).then(() => {
                    const player = skyrimPlatform_2.Game.getPlayer();
                    if (player) {
                        (0, spell_1.removeAllSpells)(player);
                        (0, spell_1.learnSpells)(player, learnedSpells);
                    }
                });
            });
        }
        if (msg.isMe) {
            if ((_d = msg.props) === null || _d === void 0 ? void 0 : _d.isDead) {
                (0, skyrimPlatform_2.once)('update', () => {
                    this.controller.emitter.emit('applyDeathStateEvent', {
                        actor: skyrimPlatform_2.Game.getPlayer(),
                        isDead: true,
                    });
                });
            }
        }
        if (msg.isMe) {
            const spawnTask = { running: false };
            (0, skyrimPlatform_2.once)('update', () => {
                if (!spawnTask.running) {
                    spawnTask.running = true;
                    (() => __awaiter(this, void 0, void 0, function* () {
                        while (true) {
                            skyrimPlatform_2.TESModPlatform.moveRefrToPosition(skyrimPlatform_2.Game.getPlayer(), skyrimPlatform_2.Cell.from(skyrimPlatform_2.Game.getFormEx(msg.transform.worldOrCell)), skyrimPlatform_2.WorldSpace.from(skyrimPlatform_2.Game.getFormEx(msg.transform.worldOrCell)), msg.transform.pos[0], msg.transform.pos[1], msg.transform.pos[2], msg.transform.rot[0], msg.transform.rot[1], msg.transform.rot[2]);
                            yield skyrimPlatform_2.Utility.wait(1);
                            const pl = skyrimPlatform_2.Game.getPlayer();
                            if (!pl) {
                                break;
                            }
                            const pos = [pl.getPositionX(), pl.getPositionY(), pl.getPositionZ()];
                            const sqr = (x) => x * x;
                            const distance = Math.sqrt(sqr(pos[0] - msg.transform.pos[0]) + sqr(pos[1] - msg.transform.pos[1]));
                            if (distance < 256) {
                                break;
                            }
                        }
                    }))();
                    skyrimPlatform_2.Utility.wait(1).then(applyPcInv);
                    skyrimPlatform_2.Utility.wait(1.3).then(applyPcInv);
                    if (msg.appearance) {
                        appearanceSync_1.AppearanceSync.applyAppearanceToPlayer(msg.appearance);
                    }
                }
                if (msg.props) {
                    const baseActorValues = new Map([
                        ['magickaRate', msg.props.magickaRate],
                        ['magickaRateMult', msg.props.magickaRateMult],
                        ['magicka', msg.props.magicka],
                        ['staminaRate', msg.props.staminaRate],
                        ['staminaRateMult', msg.props.staminaRateMult],
                        ['stamina', msg.props.stamina],
                        ['staminaPercentage', msg.props.staminaPercentage],
                        ['magickaPercentage', msg.props.magickaPercentage],
                    ]);
                    const player = skyrimPlatform_2.Game.getPlayer();
                    if (player) {
                        baseActorValues.forEach((value, key) => {
                            if (typeof value === 'number') {
                                if (key.includes('Percentage')) {
                                    const subKey = key.replace('Percentage', '');
                                    const subValue = baseActorValues.get(subKey);
                                    if (typeof subValue === 'number') {
                                        (0, actorvalues_1.setActorValuePercentage)(player, subKey, value);
                                    }
                                }
                                else {
                                    player.setActorValue(key, value);
                                }
                            }
                        });
                    }
                }
            });
            (0, skyrimPlatform_2.once)('tick', () => {
                (0, skyrimPlatform_2.once)('tick', () => {
                    if (!spawnTask.running) {
                        spawnTask.running = true;
                        const loadOrder = new Array();
                        for (let i = 0; i < this.sp.Game.getModCount(); ++i) {
                            loadOrder.push(this.sp.Game.getModName(i));
                        }
                        const loadGameService = this.controller.lookupListener(loadGameService_1.LoadGameService);
                        loadGameService.loadGame(msg.transform.pos, msg.transform.rot, msg.transform.worldOrCell, msg.appearance
                            ? {
                                name: msg.appearance.name,
                                raceId: msg.appearance.raceId,
                                isFemale: msg.appearance.isFemale,
                                face: {
                                    hairColor: msg.appearance.hairColor,
                                    bodySkinColor: msg.appearance.skinColor,
                                    headTextureSetId: msg.appearance.headTextureSetId,
                                    headPartIds: msg.appearance.headpartIds,
                                    presets: msg.appearance.presets,
                                },
                            }
                            : undefined, loadOrder, { minutes: 0, seconds: 0, hours: this.controller.lookupListener(timeService_1.TimeService).getTime().newGameHourValue });
                        (0, skyrimPlatform_2.once)('update', () => {
                            applyPcInv();
                            skyrimPlatform_2.Utility.wait(0.3).then(applyPcInv);
                            if (msg.appearance) {
                                appearanceSync_1.AppearanceSync.applyAppearanceToPlayer(msg.appearance);
                            }
                        });
                    }
                });
            });
        }
    }
    onDestroyActorMessage(event) {
        var _a;
        const msg = event.message;
        const i = this.getIdManager().getId(msg.idx);
        this.worldModel.forms[i] = undefined;
        (_a = (0, worldViewMisc_1.getViewFromStorage)()) === null || _a === void 0 ? void 0 : _a.syncFormArray(this.worldModel);
        while (1) {
            const length = this.worldModel.forms.length;
            if (!length) {
                break;
            }
            if (this.worldModel.forms[length - 1]) {
                break;
            }
            this.worldModel.forms.length = length - 1;
        }
        if (this.worldModel.playerCharacterFormIdx === i) {
            this.worldModel.playerCharacterFormIdx = -1;
            this.worldModel.playerCharacterRefrId = 0;
            (0, skyrimPlatform_2.once)('update', () => skyrimPlatform_2.Game.quitToMainMenu());
        }
        this.getIdManager().freeIdFor(msg.idx);
    }
    onUpdateMovementMessage(event) {
        const msg = event.message;
        const i = this.getIdManager().getId(msg.idx);
        const form = this.worldModel.forms[i];
        if (form === undefined) {
            return;
        }
        form.movement = msg.data;
        if (!form.numMovementChanges) {
            form.numMovementChanges = 0;
        }
        form.numMovementChanges++;
    }
    onUpdateAnimationMessage(event) {
        const msg = event.message;
        const i = this.getIdManager().getId(msg.idx);
        const form = this.worldModel.forms[i];
        if (form === undefined) {
            return;
        }
        if (form.playerDynamicId != null) {
            this.backupAnimation.delete(form.playerDynamicId);
        }
        form.animation = msg.data;
    }
    onUpdateOtherAnimationMessage(event) {
        const msg = event.message;
        const form = this.worldModel.forms.find(v => (v === null || v === void 0 ? void 0 : v.playerDynamicId) === msg.idx);
        this.backupAnimation.set(msg.idx, msg.data);
        if (form === undefined) {
            return;
        }
        form.animation = msg.data;
    }
    onUpdateAppearanceMessage(event) {
        const msg = event.message;
        const i = this.getIdManager().getId(msg.idx);
        const form = this.worldModel.forms[i];
        if (form === undefined) {
            return;
        }
        form.appearance = msg.data || undefined;
        if (!form.numAppearanceChanges) {
            form.numAppearanceChanges = 0;
        }
        form.numAppearanceChanges++;
        const newAppearance = msg.data;
        if (i === this.getMyActorIndex() && newAppearance) {
            this.controller.once('update', () => {
                appearanceSync_1.AppearanceSync.applyAppearanceToPlayer(newAppearance);
            });
        }
    }
    onUpdateEquipmentMessage(event) {
        (0, skyrimPlatform_2.once)('update', () => {
            var _a;
            const msg = event.message;
            const id = this.getIdManager().getId(msg.idx);
            const form = this.worldModel.forms[id];
            if (form === undefined) {
                return;
            }
            const actor = id === this.getWorldModel().playerCharacterFormIdx
                ? skyrimPlatform_2.Game.getPlayer()
                : skyrimPlatform_1.Actor.from(skyrimPlatform_2.Game.getFormEx((0, worldViewMisc_1.remoteIdToLocalId)((_a = form.refrId) !== null && _a !== void 0 ? _a : 0)));
            if (actor) {
                actor.unequipAll();
                actor.removeAllItems(null, false, true);
                (0, skyrimPlatform_1.setInventory)(actor.getFormID(), msg.data.armor, msg.data.weaponLeft, msg.data.weaponRight);
            }
            form.equipment = msg.data;
        });
    }
    onUpdatePropertyMessage(event) {
        const msg = event.message;
        if (this.skipFormViewCreation(msg)) {
            const refrId = msg.refrId;
            (0, skyrimPlatform_2.once)('update', () => {
                const refr = skyrimPlatform_2.ObjectReference.from(skyrimPlatform_2.Game.getFormEx(refrId));
                if (!refr) {
                    return;
                }
                if (msg.propName === 'inventory') {
                    modelApplyUtils_1.ModelApplyUtils.applyModelInventory(refr, msg.data);
                }
                else if (msg.propName === 'isOpen') {
                    modelApplyUtils_1.ModelApplyUtils.applyModelIsOpen(refr, !!msg.data);
                }
                else if (msg.propName === 'isHarvested') {
                    modelApplyUtils_1.ModelApplyUtils.applyModelIsHarvested(refr, !!msg.data);
                }
                else if (msg.propName === 'disabled') {
                    modelApplyUtils_1.ModelApplyUtils.applyModelIsDisabled(refr, !!msg.data);
                }
            });
            return;
        }
        const i = this.getIdManager().getId(msg.idx);
        const form = this.worldModel.forms[i];
        if (form != null) {
            if (form[msg.propName] != null) {
                ;
                form[msg.propName] = msg.data;
            }
            else {
                ;
                form[msg.propName] = 0;
            }
        }
    }
    onDeathStateContainerMessage(event) {
        const msg = event.message;
        const id = this.getIdManager().getId(msg.tIsDead.idx);
        const form = this.worldModel.forms[id];
        if (form === undefined) {
            return;
        }
        if (msg.tIsDead.propName !== (0, nameof_1.nameof)('isDead') || typeof msg.tIsDead.data !== 'boolean') {
            return;
        }
        if (msg.tChangeValues) {
            this.onChangeValuesMessage({ message: msg.tChangeValues });
        }
        (0, skyrimPlatform_2.once)('update', () => this.onUpdatePropertyMessage({ message: msg.tIsDead }));
        if (msg.tTeleport) {
            this.onTeleportMessage({ message: msg.tTeleport });
        }
        (0, skyrimPlatform_2.once)('update', () => {
            var _a;
            const actor = id === this.getWorldModel().playerCharacterFormIdx
                ? skyrimPlatform_2.Game.getPlayer()
                : skyrimPlatform_1.Actor.from(skyrimPlatform_2.Game.getFormEx((0, worldViewMisc_1.remoteIdToLocalId)((_a = form.refrId) !== null && _a !== void 0 ? _a : 0)));
            if (actor) {
                try {
                    this.controller.emitter.emit('applyDeathStateEvent', {
                        actor: actor,
                        isDead: msg.tIsDead.data,
                    });
                }
                catch (e) {
                    if (e instanceof errors_1.RespawnNeededError) {
                        actor.disableNoWait(false);
                        actor.delete();
                    }
                    else {
                        throw e;
                    }
                }
            }
        });
    }
    handleConnectionAccepted() {
        this.worldModel.forms = [];
        this.worldModel.playerCharacterFormIdx = -1;
        this.worldModel.playerCharacterRefrId = 0;
        this.controller.lookupListener(launcherService_1.LauncherService).sendTokenAndLogin();
    }
    onChangeValuesMessage(event) {
        const msg = event.message;
        (0, skyrimPlatform_2.once)('update', () => {
            const id = this.getIdManager().getId(msg.idx);
            const refr = id === this.getMyActorIndex() ? skyrimPlatform_2.Game.getPlayer() : (0, worldViewMisc_1.getObjectReference)(id);
            const ac = skyrimPlatform_1.Actor.from(refr);
            if (!ac) {
                return;
            }
            (0, actorvalues_1.setActorValuePercentage)(ac, 'health', msg.data.health);
            (0, actorvalues_1.setActorValuePercentage)(ac, 'stamina', msg.data.stamina);
            (0, actorvalues_1.setActorValuePercentage)(ac, 'magicka', msg.data.magicka);
        });
    }
    onSetRaceMenuOpenMessage(event) {
        const msg = event.message;
        if (msg.open) {
            (0, skyrimPlatform_2.once)('update', () => skyrimPlatform_2.Utility.wait(0.3).then(() => {
                (0, controller_3.unequipAll)();
            }));
        }
        else {
        }
    }
    onCustomPacketMessage2(event) {
        const msg = event.message;
        switch (msg.content.customPacketType) {
            case 'auth:success':
                spApiInteraction_1.SpApiInteraction.getControllerInstance()
                    .lookupListener(loadOrderVerificationService_1.LoadOrderVerificationService)
                    .verifyLoadOrder(msg.content.data);
                break;
            case events_12.NotificationEvents.Send:
                const notifyData = msg.content.data;
                NotificationsHandler_1.NotificationsHandler.send(notifyData.text, notifyData.type, notifyData.position, notifyData.duration);
                break;
            case events_12.NotificationEvents.SendTemplate:
                const notifyTemplateData = msg.content.data;
                NotificationsHandler_1.NotificationsHandler.sendTemplate(notifyTemplateData.template, notifyTemplateData.params, notifyTemplateData.type, notifyTemplateData.position, notifyTemplateData.duration);
                break;
            case 'utils:quitGame':
                const quitData = msg.content.data;
                spApiInteraction_1.SpApiInteraction.getControllerInstance()
                    .lookupListener(launcherService_1.LauncherService)
                    .quitFromGame(quitData.reason, quitData.adminName, quitData.timeout);
                break;
            case 'auth:error':
                const authErrorData = msg.content.data;
                (0, notifications_1.authError)(authErrorData.id, authErrorData.text);
                break;
            case 'charEditor:init':
                (0, controller_2.onCharacterEditorInit)();
                break;
            case 'charSelector:load':
                const data = msg.content.data;
                (0, controller_3.showCharacterSelector)(data.characters, data.slotCost);
                break;
            case 'charSelector:hide':
                (0, controller_3.hideCharacterSelector)();
                break;
            case 'charEditor:destroy':
                (0, controller_2.onCharacterEditorDestroy)();
                break;
            case 'spawnSelector:show':
                (0, controller_5.showSpawnSelector)(msg.content.data);
                break;
            case 'chartSelector:loadAppearance':
                (0, controller_3.loadAppearance)(msg.content.data);
                break;
            case 'player:finalAuth':
                (0, controller_5.finalAuth)();
                break;
            case 'charSelector:unequipall':
                (0, controller_3.unequipAll)();
                break;
            case 'hud:setId':
                Hud_1.Hud.setPlayerId(msg.content.data);
                break;
            case 'executeBrowser':
                const browserData = msg.content.data;
                this.controller.lookupListener(browserService_1.BrowserService).executeBrowser(browserData.name, browserData.data, browserData === null || browserData === void 0 ? void 0 : browserData.focused);
                break;
            case 'radial:setConfig':
                const radialData = msg.content.data;
                if (radialData.configName === 'animations') {
                    Animations_1.AnimationsMenu.setFavoritesAnimation(radialData.items);
                }
                break;
            case events_7.AnimationsEvents.Play:
                const animData = msg.content.data;
                if (animData.fromRadial) {
                    Animations_1.AnimationsMenu.playAnimationFromRadial({ animationId: animData.animationHash });
                }
                else {
                    AnimationsHandler_1.AnimationsHandler.play(animData.animationHash);
                }
                break;
            case events_7.AnimationsEvents.Stop:
                AnimationsHandler_1.AnimationsHandler.stop();
                break;
            case 'equipItems':
                const items = msg.content.data;
                (0, Utils_1.equipItems)(items);
                break;
            case events_1.ColshapeEvents.create:
                const colshape = msg.content.data;
                ColshapesHandler_1.ColshapesHandler.createColshape(colshape.id, colshape.position, colshape.radius, colshape.cellOrWorld, colshape.dimension, colshape === null || colshape === void 0 ? void 0 : colshape.text, colshape === null || colshape === void 0 ? void 0 : colshape.createMarker, colshape === null || colshape === void 0 ? void 0 : colshape.isInteraction, colshape === null || colshape === void 0 ? void 0 : colshape.blip, colshape === null || colshape === void 0 ? void 0 : colshape.npc);
                break;
            case events_1.ColshapeEvents.destroy:
                const colshapeId = msg.content.data;
                ColshapesHandler_1.ColshapesHandler.destroyColshape(colshapeId);
                break;
            case events_5.LableEvents.create:
                const lable = msg.content.data;
                LablesHandler_1.LablesHandler.createLable(lable.id, lable.text, lable.color, lable.drawDistance, lable.position, lable.cellOrWorld);
                break;
            case events_5.LableEvents.destroy:
                const lableId = msg.content.data;
                LablesHandler_1.LablesHandler.destroyLable(lableId);
                break;
            case PersonHealth_1.PersonHealthEvent.CheckClientHealth:
                const serverHealth = msg.content.data;
                HealthControlHandler_1.HealthControlHandler.checkClientPlayerHealth(serverHealth);
                break;
            case PersonHealth_1.PersonHealthEvent.SetClientHealth:
                const health = msg.content.data;
                HealthControlHandler_1.HealthControlHandler.setClientPlayerHealth(health);
                break;
            case PersonHealth_1.PersonHealthEvent.StartDeathStage:
                HealthControlHandler_1.HealthControlHandler.startDeathStageForPlayer();
                break;
            case PersonHealth_1.PersonHealthEvent.EndDeathStage:
                HealthControlHandler_1.HealthControlHandler.endDeathStageForPlayer();
                break;
            case events_3.UtilsEvents.SetPlayerFreeze:
                const freezeToggle = msg.content.data;
                (0, Utils_1.freezePlayer)(freezeToggle);
                break;
            case events_3.UtilsEvents.SetLocalAlpha:
                const alpha = msg.content.data;
                Player_1.localPlayer.alpha = alpha;
                break;
            case events_4.BinderEvents.UpdateServerBinds:
                const bindHashes = msg.content.data;
                (0, controller_1.updateServerBinds)(bindHashes);
                break;
            case events_6.SettingsEvents.Init:
                const dataSettingsInit = msg.content.data;
                (0, controller_4.handleSettingsInit)(dataSettingsInit.settings, dataSettingsInit.enabled);
                break;
            case events_6.SettingsEvents.Update:
                const dataSettingsUpdate = msg.content.data;
                (0, controller_4.handleServerUpdateSettings)(dataSettingsUpdate);
                break;
            case events_6.EscMenuClientEvents.OpenMap:
                EscapeMenu_1.EscapeMenu.openMap();
                break;
            case events_6.EscMenuClientEvents.ExitGame:
                EscapeMenu_1.EscapeMenu.exitGame(msg.content.data);
                break;
            case PersonStamina_1.PersonStaminaEvent.SetClientStamina:
                StaminaHudState_1.StaminaHudState.setStamin(msg.content.data);
                break;
            case events_2.FamiliarsEvents.addFamiliar:
                Familiars_1.FamiliarsHandler.addFamiliar(msg.content.data);
                break;
            case events_2.FamiliarsEvents.addFamiliars:
                Familiars_1.FamiliarsHandler.addFamiliars(msg.content.data);
                break;
            case PersonRestrictions_1.PersonRestrictionsEvents.SetRestrictions:
                Restrictions_1.Restrictions.setRestriction(msg.content.data);
                break;
            case serverEvents_1.ServerUtilsEvents.GameRestriction:
                const gameRestriction = msg.content.data;
                GameRestrictions_1.GameRestrictions.canSprint = gameRestriction.CanSprint != null ? gameRestriction.CanSprint : GameRestrictions_1.GameRestrictions.canSprint;
                GameRestrictions_1.GameRestrictions.canJump = gameRestriction.CanJump != null ? gameRestriction.CanJump : GameRestrictions_1.GameRestrictions.canJump;
                GameRestrictions_1.GameRestrictions.canCombatStage =
                    gameRestriction.CanCombatStage != null ? gameRestriction.CanCombatStage : GameRestrictions_1.GameRestrictions.canCombatStage;
                break;
            case serverEvents_1.ServerUtilsEvents.Teleport:
                const teleportData = msg.content.data;
                Player_1.localPlayer.setPosition(teleportData.position, teleportData.rotation, teleportData.cellOrWorld);
                break;
            case events_7.AnimationSyncEvents.SendDataAnimation:
                const event = { message: msg.content.data };
                this.controller.emitter.emit('updateOtherAnimationMessage', event);
                break;
            case events_9.CharEditorEvents.ResponseCheckName:
                const response = msg.content.data;
                (0, controller_2.CharacterEditorOnCharacterSave)(response);
                break;
            case events_10.ArmorWeaponEvents.OpenArmor:
                const armorShopDto = msg.content.data;
                ArmorShop_1.ArmorShop.playerOpenedShop(armorShopDto);
                break;
            case events_10.ArmorWeaponEvents.OpenWeapon:
                const weaponShopDto = msg.content.data;
                WeaponShop_1.WeaponShop.playerOpenedShop(weaponShopDto);
                break;
            case events_11.FishingWorkEvents.StartFishing:
                FishingWork_1.FishingWork.startFishing();
                break;
            case events_11.FishingWorkEvents.StopFishing:
                FishingWork_1.FishingWork.stopFishing();
                break;
            case serverEvents_1.ServerEvents.PlayerDeath:
                (0, Utils_1.closeUiAfterDead)();
                break;
            case events_13.ReconSystemEvents.Start:
                Recon_1.Recon.start(msg.content.data);
                break;
            case events_13.ReconSystemEvents.Stop:
                Recon_1.Recon.stop();
                break;
            case BanEvents_1.BansEvents.showBans:
                const bansData = msg.content.data;
                BansSystem_1.BansSystem.show(bansData);
                break;
            case events_8.PickupItemEvents.SendItem:
                const itemOnGround = msg.content.data;
                PickupItem_1.PickupItem.addItemOnGround(itemOnGround);
                break;
            case events_8.PickupItemEvents.SendItems:
                const itemsOnGround = msg.content.data;
                PickupItem_1.PickupItem.addItemsOnGround(itemsOnGround);
                break;
            case events_8.PickupItemEvents.DeleteItem:
                const itemData = msg.content.data;
                PickupItem_1.PickupItem.deleteItemOnGround(itemData.itemId);
                break;
            case serverEvents_1.ServerEvents.CreatePayment:
                const paymentData = msg.content.data;
                skyrimPlatform_1.browser.loadBrowserUrl(paymentData.url);
                break;
            default:
                break;
        }
    }
    getWorldModel() {
        return this.worldModel;
    }
    getMyActorIndex() {
        return this.worldModel.playerCharacterFormIdx;
    }
    getMyRemoteRefrId() {
        return this.worldModel.playerCharacterRefrId;
    }
    getIdManager() {
        return this.idManager_;
    }
    get worldModel() {
        if (typeof skyrimPlatform_2.storage['worldModel'] === 'function') {
            skyrimPlatform_2.storage['worldModel'] = { forms: [], playerCharacterFormIdx: -1, playerCharacterRefrId: 0 };
        }
        return skyrimPlatform_2.storage['worldModel'];
    }
    get idManager_() {
        if (typeof skyrimPlatform_2.storage['idManager'] === 'function') {
            skyrimPlatform_2.storage['idManager'] = new idManager_1.IdManager();
        }
        return skyrimPlatform_2.storage['idManager'];
    }
    onceLoad(refrId, callback, maxAttempts = 120) {
        (0, skyrimPlatform_2.once)('update', () => {
            const refr = skyrimPlatform_2.ObjectReference.from(skyrimPlatform_2.Game.getFormEx(refrId));
            if (refr) {
                callback(refr);
            }
            else {
                maxAttempts--;
                if (maxAttempts > 0) {
                    (0, skyrimPlatform_2.once)('update', () => this.onceLoad(refrId, callback, maxAttempts));
                }
            }
        });
    }
    skipFormViewCreation(msg) {
        return msg.refrId && msg.refrId < 0xff000000 && msg.baseRecordType !== 'DOOR';
    }
    showConnectionError() {
    }
}
exports.RemoteServer = RemoteServer;


/***/ }),

/***/ 7483:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SendInputsService = void 0;
const clientListener_1 = __webpack_require__(2166);
const messages_1 = __webpack_require__(3740);
const movementGet_1 = __webpack_require__(9111);
const worldViewMisc = __webpack_require__(9885);
const animation_1 = __webpack_require__(933);
const actorvalues_1 = __webpack_require__(9714);
const remoteServer_1 = __webpack_require__(8986);
const deathService_1 = __webpack_require__(4314);
const appearanceSync_1 = __webpack_require__(282);
const Recon_1 = __webpack_require__(4801);
const Utils_1 = __webpack_require__(2453);
const playerFormId = 0x14;
class SendInputsService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.lastSendMovementMoment = new Map();
        this.playerAnimSource = new Map();
        this.lastAnimationSent = new Map();
        this.actorValuesNeedUpdate = false;
        this.isRaceSexMenuShown = false;
        this.equipmentChanged = false;
        this.numEquipmentChanges = 0;
        this.prevValues = { health: 0, stamina: 0, magicka: 0 };
        this.prevActorValuesUpdateTime = 0;
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'SendInputsService'));
        this.controller.on('unequip', e => this.onUnequip(e));
        this.controller.on('loadGame', () => this.onLoadGame());
    }
    onUpdate() {
        this.sendInputs();
    }
    onUnequip(event) {
        if (!event.actor || !event.baseObj) {
            return;
        }
        if (event.actor.getFormID() === playerFormId) {
            this.equipmentChanged = true;
        }
    }
    onLoadGame() {
        this.sp.Utility.wait(3).then(() => (this.equipmentChanged = true));
    }
    sendInputs() {
        const modelSource = this.controller.lookupListener(remoteServer_1.RemoteServer);
        const world = modelSource.getWorldModel();
        if (Recon_1.Recon.isStarted) {
            return;
        }
        const target = undefined;
        const targetFormModel = target ? this.getForm(target, world) : this.getForm(undefined, world);
        this.sendMovement(target, targetFormModel);
        this.sendAnimation(target);
        this.sendActorValuePercentage(target, targetFormModel);
    }
    sendMovement(_refrId, form) {
        const owner = this.getInputOwner(_refrId);
        if (!owner) {
            return;
        }
        const refrIdStr = `${_refrId}`;
        const sendMovementRateMs = 130;
        const now = Date.now();
        const last = this.lastSendMovementMoment.get(refrIdStr);
        if (!last || now - last > sendMovementRateMs) {
            const message = {
                t: messages_1.MsgType.UpdateMovement,
                data: (0, movementGet_1.getMovement)(owner, form),
                _refrId,
            };
            this.controller.emitter.emit('sendMessageWithRefrId', {
                message,
                reliability: 'unreliable',
            });
            this.lastSendMovementMoment.set(refrIdStr, now);
        }
    }
    sendActorValuePercentage(_refrId, form) {
        var _a;
        const canSend = form && ((_a = form.isDead) !== null && _a !== void 0 ? _a : false) === false;
        if (!canSend) {
            return;
        }
        const owner = this.getInputOwner(_refrId);
        if (!owner) {
            return;
        }
        const av = (0, actorvalues_1.getActorValues)(this.sp.Game.getPlayer());
        const currentTime = Date.now();
        if (this.actorValuesNeedUpdate === false &&
            this.prevValues.health === av.health &&
            this.prevValues.stamina === av.stamina &&
            this.prevValues.magicka === av.magicka) {
            return;
        }
        if (currentTime - this.prevActorValuesUpdateTime < 2000 && this.actorValuesNeedUpdate === false) {
            return;
        }
        const deathService = this.controller.lookupListener(deathService_1.DeathService);
        if (deathService.isBusy()) {
            return;
        }
        const message = {
            t: messages_1.MsgType.ChangeValues,
            data: av,
            _refrId,
        };
        this.controller.emitter.emit('sendMessageWithRefrId', {
            message,
            reliability: 'unreliable',
        });
        this.actorValuesNeedUpdate = false;
        this.prevValues = av;
        this.prevActorValuesUpdateTime = currentTime;
    }
    sendAnimation(_refrId) {
        const owner = this.getInputOwner(_refrId);
        if (!owner) {
            return;
        }
        const refrIdStr = owner.getFormID().toString(16);
        let animSource = this.playerAnimSource.get(refrIdStr);
        if (!animSource) {
            animSource = new animation_1.AnimationSource(owner);
            this.playerAnimSource.set(refrIdStr, animSource);
        }
        const anim = animSource.getAnimation();
        const lastAnimationSent = this.lastAnimationSent.get(refrIdStr);
        if (!lastAnimationSent || anim.numChanges !== lastAnimationSent.numChanges) {
            if (anim.animEventName !== '' && !anim.animEventName.startsWith('DrinkPotion_')) {
                this.lastAnimationSent.set(refrIdStr, anim);
                this.updateActorValuesAfterAnimation(anim.animEventName);
                const message = {
                    t: messages_1.MsgType.UpdateAnimation,
                    data: anim,
                    _refrId,
                };
                this.controller.emitter.emit('sendMessageWithRefrId', {
                    message,
                    reliability: 'unreliable',
                });
            }
        }
    }
    sendAppearance(_refrId) {
        if (_refrId) {
            return;
        }
        const appearance = appearanceSync_1.AppearanceSync.getAppearance(this.sp.Game.getPlayer());
        const message = {
            t: messages_1.MsgType.UpdateAppearance,
            data: appearance,
            _refrId,
        };
        this.controller.emitter.emit('sendMessageWithRefrId', {
            message,
            reliability: 'reliable',
        });
    }
    getInputOwner(_refrId) {
        return _refrId ? this.sp.Actor.from(this.sp.Game.getFormEx(worldViewMisc.remoteIdToLocalId(_refrId))) : this.sp.Game.getPlayer();
    }
    getForm(refrId, world) {
        const form = refrId ? world === null || world === void 0 ? void 0 : world.forms.find(f => (f === null || f === void 0 ? void 0 : f.refrId) === refrId) : world.forms[world.playerCharacterFormIdx];
        return form;
    }
    updateActorValuesAfterAnimation(animName) {
        if (animName === 'JumpLand' || animName === 'JumpLandDirectional' || animName === 'DeathAnim') {
            this.actorValuesNeedUpdate = true;
        }
    }
}
exports.SendInputsService = SendInputsService;


/***/ }),

/***/ 6959:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Client = exports.getServerIp = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const networking = __webpack_require__(3054);
const animation_1 = __webpack_require__(933);
const clientListener_1 = __webpack_require__(2166);
(0, skyrimPlatform_1.printConsole)('Skyrim RolePlay');
const targetIp = "26.72.161.60";
const targetPort = parseInt("7777", 10);
const serverPassword = "JrWwr4IwV92BfxD6Nx5EVrj8OHyxYFV0g6euMoxgAXgfvoj6sT";
const getServerIp = () => {
    return targetIp;
};
exports.getServerIp = getServerIp;
class Client extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.emitter.on('connectionFailed', e => this.onConnectionFailed(e));
        this.controller.emitter.on('connectionDenied', e => this.onConnectionDenied(e));
        this.controller.emitter.on('createActorMessage', e => this.onActorCreateMessage(e));
        this.startClient();
    }
    onActorCreateMessage(e) {
        if (e.message.isMe) {
            this.sp.browser.setVisible(true);
        }
    }
    onConnectionFailed(e) {
        this.disableAllSystem();
    }
    onConnectionDenied(e) {
        (0, skyrimPlatform_1.printConsole)(`Connection denied: ${e.error}`);
    }
    startClient() {
        this.controller.once('tick', () => this.establishConnectionConditional());
        this.ctor();
    }
    ctor() {
        (0, animation_1.setupHooks)();
    }
    establishConnectionConditional() {
        const isConnected = this.controller.lookupListener(networking.NetworkingService).isConnected();
        if (!isConnected || skyrimPlatform_1.storage.targetIp !== targetIp || skyrimPlatform_1.storage.targetPort !== targetPort) {
            skyrimPlatform_1.storage.targetIp = targetIp;
            skyrimPlatform_1.storage.targetPort = targetPort;
            this.controller.lookupListener(networking.NetworkingService).connect(targetIp, targetPort, serverPassword);
        }
    }
    disableAllSystem() {
        this.sp.browser.setFocused(false);
        this.sp.browser.setVisible(false);
    }
}
exports.Client = Client;


/***/ }),

/***/ 3936:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpSnippetService = void 0;
const messages_1 = __webpack_require__(3740);
const clientListener_1 = __webpack_require__(2166);
const worldViewMisc_1 = __webpack_require__(9885);
const worldView_1 = __webpack_require__(5400);
class SpSnippetService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.controller.emitter.on('spSnippetMessage', e => this.onSpSnippetMessage(e));
        this.spAny = sp;
    }
    onSpSnippetMessage(event) {
        const msg = event.message;
        this.controller.once('update', () => __awaiter(this, void 0, void 0, function* () {
            this.run(msg)
                .then(res => {
                const isNoResultSnippet = msg.snippetIdx === 0xffffffff;
                if (isNoResultSnippet) {
                    return;
                }
                if (res === undefined) {
                    res = null;
                }
                const message = {
                    t: messages_1.MsgType.FinishSpSnippet,
                    returnValue: res,
                    snippetIdx: msg.snippetIdx,
                };
                this.controller.emitter.emit('sendMessage', {
                    message: message,
                    reliability: 'reliable',
                });
            })
                .catch(e => { });
        }));
    }
    run(snippet) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const functionLowerCase = snippet.function.toLowerCase();
            const classLowerCase = snippet.class.toLowerCase();
            if (classLowerCase === 'objectreference') {
                if (functionLowerCase === 'setdisplayname') {
                    let newName = snippet.arguments[0];
                    if (typeof newName === 'string') {
                        const selfId = (0, worldViewMisc_1.remoteIdToLocalId)(snippet.selfId);
                        const self = this.sp.ObjectReference.from(this.sp.Game.getFormEx(selfId));
                        const replaceValue = (_a = self === null || self === void 0 ? void 0 : self.getBaseObject()) === null || _a === void 0 ? void 0 : _a.getName();
                        if (replaceValue !== undefined) {
                            newName = newName.replace(/%original_name%/g, replaceValue);
                            snippet.arguments[0] = newName;
                        }
                    }
                }
            }
            if (classLowerCase === 'game') {
                if (functionLowerCase === 'showracemenu' || functionLowerCase === 'showlimitedracemenu') {
                    const worldView = this.controller.lookupListener(worldView_1.WorldView);
                    worldView.setFormViewUpdateAllowed(false);
                    this.sp.Utility.wait(1.0).then(() => {
                        this.runStatic(snippet);
                        worldView.waitGameTimeAndAllowFormViewUpdate(1.0);
                    });
                    return;
                }
            }
            if (classLowerCase === 'skymphacks') {
                if (functionLowerCase === 'additem' || functionLowerCase === 'removeitem') {
                    const form = this.sp.Form.from(this.deserializeArg(snippet.arguments[0]));
                    if (form === null) {
                        return;
                    }
                    const sign = snippet.function === 'AddItem' ? '+' : '-';
                    const count = snippet.arguments[1];
                    let soundId = 0x334ab;
                    if (form.getFormID() !== 0xf) {
                        soundId = 0x14115;
                    }
                    const sound = this.sp.Sound.from(this.sp.Game.getFormEx(soundId));
                    if (sound !== null) {
                        const name = form.getName();
                        if (name.trim() !== '') {
                            sound.play(this.sp.Game.getPlayer());
                        }
                    }
                    if (count > 0) {
                        const name = form.getName();
                        if (name.trim() !== '') {
                            this.sp.Debug.notification(sign + ' ' + name + ' (' + count + ')');
                        }
                    }
                }
                else {
                    throw new Error('Unknown SkympHack - ' + snippet.function);
                }
                return;
            }
            return snippet.selfId ? this.runMethod(snippet) : this.runStatic(snippet);
        });
    }
    deserializeArg(arg) {
        if (typeof arg === 'object') {
            const formId = (0, worldViewMisc_1.remoteIdToLocalId)(arg.formId);
            const form = this.sp.Game.getFormEx(formId);
            const gameObject = this.spAny[arg.type].from(form);
            return gameObject;
        }
        return arg;
    }
    runMethod(snippet) {
        return __awaiter(this, void 0, void 0, function* () {
            const selfId = (0, worldViewMisc_1.remoteIdToLocalId)(snippet.selfId);
            const self = this.sp.Game.getFormEx(selfId);
            if (!self) {
                throw new Error(`Unable to find form with id ${selfId.toString(16)}`);
            }
            const selfCasted = this.spAny[snippet.class].from(self);
            if (!selfCasted) {
                throw new Error(`Form ${selfId.toString(16)} is not instance of ${snippet.class}, form type is ${self.getType()}`);
            }
            const f = selfCasted[snippet.function];
            return yield f.apply(selfCasted, snippet.arguments.map(arg => this.deserializeArg(arg)));
        });
    }
    runStatic(snippet) {
        return __awaiter(this, void 0, void 0, function* () {
            const papyrusClass = this.spAny[snippet.class];
            return yield papyrusClass[snippet.function](...snippet.arguments.map(arg => this.deserializeArg(arg)));
        });
    }
}
exports.SpSnippetService = SpSnippetService;


/***/ }),

/***/ 3737:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpVersionCheckService = void 0;
const Utils_1 = __webpack_require__(2453);
const version_1 = __webpack_require__(8412);
const clientListener_1 = __webpack_require__(2166);
class SpVersionCheckService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        controller.once('update', () => this.onceUpdate());
    }
    onceUpdate() {
        const realVersion = this.sp.getPlatformVersion();
        if (!version_1.requiredVersion.includes(realVersion)) {
            this.sp.Debug.messageBox(`You need to have on of those SkyrimPlatform versions ${JSON.stringify(version_1.requiredVersion)} to join this server. Your current version is ${realVersion}`);
            this.sp.Utility.waitMenuMode(0.5).then(() => {
                this.controller.on('update', (0, Utils_1.profile)(() => {
                    if (!this.sp.Ui.isMenuOpen('MessageBoxMenu')) {
                        this.sp.Game.quitToMainMenu();
                    }
                }, 'VersionCheckService'));
            });
        }
    }
}
exports.SpVersionCheckService = SpVersionCheckService;


/***/ }),

/***/ 39:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimeService = void 0;
const Utils_1 = __webpack_require__(2453);
const clientListener_1 = __webpack_require__(2166);
class TimeService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.lastTimeUpd = 0;
        controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'TimeService'));
    }
    getTime() {
        const hoursOffsetSetting = 0;
        const hoursOffset = typeof hoursOffsetSetting === 'number' ? hoursOffsetSetting : -3;
        const hoursOffsetMs = hoursOffset * 60 * 60 * 1000;
        const d = new Date(Date.now() + hoursOffsetMs);
        let newGameHourValue = 0;
        newGameHourValue += d.getUTCHours();
        newGameHourValue += d.getUTCMinutes() / 60;
        newGameHourValue += d.getUTCSeconds() / 60 / 60;
        newGameHourValue += d.getUTCMilliseconds() / 60 / 60 / 1000;
        return { newGameHourValue, date: d };
    }
    every2seconds() {
        const gameHourId = 0x38;
        const gameMonthId = 0x36;
        const gameDayId = 0x37;
        const gameYearId = 0x35;
        const timeScaleId = 0x3a;
        const gameHour = this.sp.GlobalVariable.from(this.sp.Game.getFormEx(gameHourId));
        const gameDay = this.sp.GlobalVariable.from(this.sp.Game.getFormEx(gameDayId));
        const gameMonth = this.sp.GlobalVariable.from(this.sp.Game.getFormEx(gameMonthId));
        const gameYear = this.sp.GlobalVariable.from(this.sp.Game.getFormEx(gameYearId));
        const timeScale = this.sp.GlobalVariable.from(this.sp.Game.getFormEx(timeScaleId));
        if (!gameHour || !gameDay || !gameMonth || !gameYear || !timeScale) {
            return;
        }
        const { newGameHourValue, date } = this.getTime();
        const diff = Math.abs(gameHour.getValue() - newGameHourValue);
        if (diff >= 1 / 60) {
            gameHour.setValue(newGameHourValue);
            gameDay.setValue(date.getUTCDate());
            gameMonth.setValue(date.getUTCMonth());
            gameYear.setValue(date.getUTCFullYear() - 2020 + 199);
        }
        timeScale.setValue(gameHour.getValue() > newGameHourValue ? 0.6 : 1.2);
    }
    onUpdate() {
        if (Date.now() - this.lastTimeUpd <= 2000) {
            return;
        }
        this.lastTimeUpd = Date.now();
        this.every2seconds();
    }
}
exports.TimeService = TimeService;


/***/ }),

/***/ 8031:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimersService = void 0;
const clientListener_1 = __webpack_require__(2166);
var ProcessMethodType;
(function (ProcessMethodType) {
    ProcessMethodType["update"] = "update";
    ProcessMethodType["tick"] = "tick";
})(ProcessMethodType || (ProcessMethodType = {}));
class TimersService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.timersArr = new Array();
        this.intervalsArr = new Array();
        this.lastCallTime = Date.now();
        this.processMethodTypeStorageKey = 'updateTypeStorageKey';
        const storageProcessMethod = sp.storage[this.processMethodTypeStorageKey];
        if (typeof storageProcessMethod !== 'function') {
            this.setProcessMethod(storageProcessMethod);
        }
        else {
            this.setProcessMethod(ProcessMethodType.tick);
        }
        this.controller.on('menuOpen', e => this.onMenuOpen(e));
        this.controller.on('preLoadGame', () => this.onPreLoadGame());
    }
    setTimeout(handler, timeout, ...args) {
        const timer = { handler, args, delayMs: timeout !== null && timeout !== void 0 ? timeout : 0, passedMs: 0 };
        for (let i = 0; i < this.timersArr.length; ++i) {
            if (!this.timersArr[i]) {
                this.timersArr[i] = timer;
                return i + 1;
            }
        }
        return this.timersArr.push(timer);
    }
    clearTimeout(id) {
        if (id === undefined) {
            this.timersArr = new Array();
            return;
        }
        if (id <= 0 || id > this.timersArr.length) {
            return;
        }
        this.timersArr[id - 1] = null;
        return;
    }
    setInterval(handler, timeout, ...args) {
        const timer = { handler, args, delayMs: timeout !== null && timeout !== void 0 ? timeout : 0, passedMs: 0 };
        for (let i = 0; i < this.intervalsArr.length; ++i) {
            if (!this.intervalsArr[i]) {
                this.intervalsArr[i] = timer;
                return i + 1;
            }
        }
        return this.intervalsArr.push(timer);
    }
    clearInterval(id) {
        if (id === undefined) {
            this.intervalsArr = new Array();
            return;
        }
        if (id <= 0 || id > this.intervalsArr.length) {
            return;
        }
        this.intervalsArr[id - 1] = null;
        return;
    }
    setProcessMethod(method) {
        switch (method) {
            case ProcessMethodType.tick:
                this.sp.storage[this.processMethodTypeStorageKey] = ProcessMethodType.tick;
                this.updateEventHandle = this.controller.on(ProcessMethodType.tick, () => this.processTimers());
                return;
            case ProcessMethodType.update:
                this.sp.storage[this.processMethodTypeStorageKey] = ProcessMethodType.update;
                this.updateEventHandle = this.controller.on(ProcessMethodType.update, () => this.processTimers());
                return;
            default:
                break;
        }
        try {
            if (this.sp.Game.getPlayer()) {
            }
            this.setProcessMethod(ProcessMethodType.update);
        }
        catch (_a) {
            this.setProcessMethod(ProcessMethodType.tick);
        }
    }
    processTimers() {
        const dt = Date.now() - this.lastCallTime;
        this.lastCallTime = Date.now();
        for (let i = 0; i < this.timersArr.length; ++i) {
            const timer = this.timersArr[i];
            if (timer) {
                timer.passedMs += dt;
                if (timer.passedMs >= timer.delayMs) {
                    this.timersArr[i] = null;
                    if (typeof timer.handler === 'function') {
                        timer.handler.call(this, timer.args);
                    }
                    else {
                        eval(timer.handler);
                    }
                }
            }
            else if (i === this.timersArr.length - 1) {
                this.timersArr.length -= 1;
            }
        }
        for (let i = 0; i < this.intervalsArr.length; ++i) {
            const interval = this.intervalsArr[i];
            if (interval) {
                interval.passedMs += dt;
                if (interval.passedMs >= interval.delayMs) {
                    interval.passedMs = 0;
                    if (typeof interval.handler === 'function') {
                        interval.handler.call(this, interval.args);
                    }
                    else {
                        eval(interval.handler);
                    }
                }
            }
            else if (i === this.intervalsArr.length - 1) {
                this.intervalsArr.length -= 1;
            }
        }
    }
    onMenuOpen(e) {
        if (e.name === "Main Menu") {
            if (this.updateEventHandle) {
                this.sp.unsubscribe(this.updateEventHandle);
            }
            this.setProcessMethod(ProcessMethodType.tick);
        }
    }
    onPreLoadGame() {
        if (this.updateEventHandle) {
            this.sp.unsubscribe(this.updateEventHandle);
        }
        this.setProcessMethod(ProcessMethodType.update);
    }
}
exports.TimersService = TimersService;


/***/ }),

/***/ 4434:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorldCleanerService = void 0;
const clientListener_1 = __webpack_require__(2166);
const objectReferenceEx_1 = __webpack_require__(7564);
const Utils_1 = __webpack_require__(2453);
class WorldCleanerService extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        this.protection = new Map();
        this.controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'WorldCleanerService'));
        this.controller.emitter.on('gameLoad', () => this.onGameLoad());
    }
    modWcProtection(actorId, mod) {
        const currentProtection = this.protection.get(actorId);
        this.protection.set(actorId, currentProtection ? currentProtection + mod : mod);
    }
    getWcProtection(actorId) {
        return this.protection.get(actorId) || 0;
    }
    onGameLoad() {
        const player = this.sp.Game.getPlayer();
        if (!player) {
            return;
        }
        this.initialPos = objectReferenceEx_1.ObjectReferenceEx.getPos(player);
        this.initialCellOrWorld = objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(player);
    }
    onUpdate() {
        this.processOneActor();
    }
    processOneActor() {
        var _a;
        const pc = this.sp.Game.getPlayer();
        if (pc === null) {
            return;
        }
        const actor = this.sp.Game.findRandomActor(pc.getPositionX(), pc.getPositionY(), pc.getPositionZ(), 8192);
        if (actor === null) {
            return;
        }
        const actorId = actor.getFormID();
        const currentProtection = this.protection.get(actorId) || 0;
        if (currentProtection > 0) {
            return;
        }
        if (actorId === 0x14 || actor.isDisabled() || actor.isDeleted()) {
            return;
        }
        if (this.isActorInDialogue(actor)) {
            actor.setPosition(0, 0, 0);
            actor.disableNoWait(true);
            return;
        }
        if (actor.isDead() && actorId < 0xff000000) {
            actor.blockActivation(true);
            return;
        }
        const pos = objectReferenceEx_1.ObjectReferenceEx.getPos(actor);
        const cellOrWorld = objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(actor);
        const chickenRace = 0xa919d;
        if (actorId < 0xff000000 && ((_a = actor.getRace()) === null || _a === void 0 ? void 0 : _a.getFormID()) === chickenRace) {
            if (this.initialPos && objectReferenceEx_1.ObjectReferenceEx.getDistanceNoZ(pos, this.initialPos) < 4096) {
                if (cellOrWorld === this.initialCellOrWorld) {
                    if (this.isActorInDialogue(actor)) {
                        return;
                    }
                    actor.killSilent(null);
                    actor.blockActivation(true);
                    actor.disableNoWait(false);
                    actor.setAlpha(0, false);
                    return;
                }
            }
        }
        actor.disable(false).then(() => {
            const ac = this.sp.Actor.from(this.sp.Game.getFormEx(actorId));
            if (!ac || this.isActorInDialogue(ac)) {
                return;
            }
            ac.delete();
        });
    }
    isActorInDialogue(ac) {
        return ac.isInDialogueWithPlayer() || ac.getDialogueTarget() !== null;
    }
}
exports.WorldCleanerService = WorldCleanerService;


/***/ }),

/***/ 3331:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpApiInteraction = void 0;
const events_1 = __webpack_require__(4024);
const sp = __webpack_require__(2112);
class SpApiInteraction {
    static setup(listeners) {
        listeners.forEach(listener => SpApiInteraction.registerListenerForLookup(listener.constructor, listener));
    }
    static getControllerInstance() {
        if (SpApiInteraction.controller) {
            return SpApiInteraction.controller;
        }
        SpApiInteraction.controller = {
            on: sp.on,
            once: sp.once,
            emitter: events_1.EventEmitterFactory.makeEventEmitter(),
            lookupListener(constructor) {
                const listener = SpApiInteraction.listenersForLookupByName.get(constructor);
                if (listener === undefined) {
                    throw new Error(`listener not found for name '${constructor.name}'`);
                }
                if (!(listener instanceof constructor)) {
                    throw new Error(`listener class mismatch for name '${constructor.name}'`);
                }
                return listener;
            },
        };
        return SpApiInteraction.controller;
    }
    static registerListenerForLookup(constructor, listener) {
        if (SpApiInteraction.listenersForLookupByName.has(constructor)) {
            throw new Error(`listener re-registration for name '${constructor}'`);
        }
        SpApiInteraction.listenersForLookupByName.set(constructor, listener);
    }
}
exports.SpApiInteraction = SpApiInteraction;
SpApiInteraction.listenersForLookupByName = new Map();


/***/ }),

/***/ 7212:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdBoardEvents = void 0;
var AdBoardEvents;
(function (AdBoardEvents) {
    AdBoardEvents["Exit"] = "adBoard:exit";
    AdBoardEvents["AddAd"] = "adBoard:addAd";
})(AdBoardEvents = exports.AdBoardEvents || (exports.AdBoardEvents = {}));


/***/ }),

/***/ 6334:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdminPanelHudEvents = void 0;
var AdminPanelHudEvents;
(function (AdminPanelHudEvents) {
    AdminPanelHudEvents["Close"] = "AdminPanelHud:close";
    AdminPanelHudEvents["ConfirmAction"] = "AdminPanelHud:confirmAction";
    AdminPanelHudEvents["ChangeElementPosition"] = "AdminPanelHud:changeElementPosition";
    AdminPanelHudEvents["OffEditMode"] = "AdminPanelHud:offEditMode";
    AdminPanelHudEvents["SaveEditMode"] = "AdminPanelHud:saveEditMode";
})(AdminPanelHudEvents = exports.AdminPanelHudEvents || (exports.AdminPanelHudEvents = {}));


/***/ }),

/***/ 5578:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReconSystemEvents = void 0;
var ReconSystemEvents;
(function (ReconSystemEvents) {
    ReconSystemEvents["Start"] = "recon:start";
    ReconSystemEvents["Stop"] = "recon:stop";
    ReconSystemEvents["StopFromClient"] = "recon:stopFromClient";
})(ReconSystemEvents = exports.ReconSystemEvents || (exports.ReconSystemEvents = {}));


/***/ }),

/***/ 1930:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AdminPanelEvents = void 0;
var AdminPanelEvents;
(function (AdminPanelEvents) {
    AdminPanelEvents["OpenSection"] = "AdminPanel:openSection";
    AdminPanelEvents["Close"] = "AdminPanel:close";
    AdminPanelEvents["ChangeSetting"] = "AdminPanel:changeSetting";
    AdminPanelEvents["RemovePunishment"] = "AdminPanel:removePunishment";
    AdminPanelEvents["SendTicketMessage"] = "AdminPanel:sendTicketMessage";
    AdminPanelEvents["ClickTicketSecondaryButton"] = "AdminPanel:clickTicketSecondaryButton";
    AdminPanelEvents["AddFastAnswer"] = "AdminPanel:addFastAnswer";
    AdminPanelEvents["DeleteFastAnswer"] = "AdminPanel:deleteFastAnswer";
    AdminPanelEvents["TakeTicket"] = "AdminPanel:takeTicket";
    AdminPanelEvents["OpenTicket"] = "AdminPanel:openTicket";
    AdminPanelEvents["GetStatByDate"] = "AdminPanel:getDateByDate";
    AdminPanelEvents["GetAdminStatByDate"] = "AdminPanel:getAdminStatByDate";
    AdminPanelEvents["SetIsReadForReport"] = "AdminPanel:setIsReadForReport";
})(AdminPanelEvents = exports.AdminPanelEvents || (exports.AdminPanelEvents = {}));


/***/ }),

/***/ 1435:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationEnum = void 0;
var AnimationEnum;
(function (AnimationEnum) {
    AnimationEnum["IdleStop"] = "IdleStop";
    AnimationEnum["IdleForceDefaultState"] = "IdleForceDefaultState";
    AnimationEnum["Pray"] = "pray";
    AnimationEnum["LayUnconscious"] = "lay_unconscious";
    AnimationEnum["Applaud2"] = "neutral_applaud";
    AnimationEnum["Applaud3"] = "condescending_applaud";
    AnimationEnum["Applaud4"] = "aggressive_applaud";
    AnimationEnum["Applaud5"] = "admiring_applaud";
    AnimationEnum["DialogueMovingTalkC"] = "explaining_something";
    AnimationEnum["DialogueMovingTalkD"] = "explaining_something_two";
    AnimationEnum["DialogueMovingTalkB"] = "asking_something";
    AnimationEnum["Laugh"] = "laughing";
    AnimationEnum["LookFar"] = "gazing_into_distance";
    AnimationEnum["SilentBow"] = "respectful_bow";
    AnimationEnum["Wounded_02"] = "lying_wounded";
    AnimationEnum["Wounded_03"] = "sitting_wounded_holding_stomach";
    AnimationEnum["Wounded_01"] = "sitting_wounded";
    AnimationEnum["HugA"] = "hug";
    AnimationEnum["KneelingEnter"] = "kneel_before_deceased";
    AnimationEnum["CiceroDance1"] = "mad_dance";
    AnimationEnum["CoffinEnter"] = "lying_in_coffin";
    AnimationEnum["GreybeardMeditateEnter"] = "meditating_sitting_on_knees";
    AnimationEnum["LayDownEnter"] = "lying_down_with_hands_behind_head";
    AnimationEnum["SitCrossLeggedEnter"] = "sitting_cross_legged";
    AnimationEnum["SitLedgeEnter"] = "sitting_with_legs_dangling";
    AnimationEnum["ChildSitOnKnees"] = "sitting_on_knees";
    AnimationEnum["ComeThisWay"] = "follow_me";
    AnimationEnum["GetAttention"] = "get_attention";
    AnimationEnum["MQ201ToastStart"] = "raise_a_toast";
    AnimationEnum["PointFar_02"] = "point_into_distance";
    AnimationEnum["RitualSkull3"] = "emotionally_gesturing";
    AnimationEnum["SleepNod"] = "tiredly_nodding";
    AnimationEnum["Surrender"] = "raise_hands_in_surrender";
    AnimationEnum["Wave"] = "waving";
    AnimationEnum["WipeBrow"] = "wiping_sweat_from_brow";
    AnimationEnum["CivilWarCheer"] = "battle_cry";
    AnimationEnum["CivilWarShieldCheer"] = "strike_shield";
    AnimationEnum["PointFar_01"] = "point_finger";
    AnimationEnum["ChildApologize"] = "awkwardly_apologize";
    AnimationEnum["ChildCryingStart"] = "crying";
    AnimationEnum["ChildShy"] = "feeling_embarrassed";
    AnimationEnum["ChildTaunt2"] = "enthusiastically_clap_knee";
    AnimationEnum["ChildTaunt3"] = "mockingly_nod_head";
    AnimationEnum["ChildTaunt4"] = "laughing_emotionally";
    AnimationEnum["ChildWhineKick"] = "discontentedly_kick_ground";
    AnimationEnum["CannibalFeedCrouching"] = "eating_with_hands_from_ground";
    AnimationEnum["CannibalFeedStanding_Loose"] = "eating_with_hands_from_table";
    AnimationEnum["HandCut"] = "bloodletting";
    AnimationEnum["LockPick"] = "lock_picking";
    AnimationEnum["MT_DoorBang"] = "persistently_banging_on_door";
    AnimationEnum["RitualSkull1"] = "ritually_raise_hands";
    AnimationEnum["SearchBody"] = "searching_corpse";
    AnimationEnum["SnowElfPrinceAscension"] = "divine_ascension";
    AnimationEnum["Take"] = "taking_something";
    AnimationEnum["UncontrollableCough"] = "painful_coughing";
    AnimationEnum["WarmArms"] = "warming_arms";
    AnimationEnum["WarmHands"] = "warming_hands_by_fire";
    AnimationEnum["Pickup_Ground"] = "picking_up_from_ground";
    AnimationEnum["T02AscendMale"] = "magical_ascension_male";
    AnimationEnum["T02AscendFemale"] = "magical_ascension_female";
    AnimationEnum["CoweringLoose"] = "kneeling_in_fear";
    AnimationEnum["Injured"] = "standing_injured";
    AnimationEnum["OffsetArmsCrossedStart"] = "standing_with_arms_crossed";
    AnimationEnum["Study"] = "pondering_stand";
    AnimationEnum["DrunkStart"] = "drunken_gait_broken";
    AnimationEnum["DrunkStop"] = "drunken_gait_classic";
    AnimationEnum["MQ201Drink"] = "walking_with_mug";
    AnimationEnum["MQ201HoldingDrinkTray"] = "walking_with_tray_and_drinks";
    AnimationEnum["BlowHornImperial"] = "blowing_horn_imperial";
    AnimationEnum["BlowHornStormcloak"] = "blowing_horn_stormcloak";
    AnimationEnum["DrinkingStandingStart"] = "drinking_from_mug";
    AnimationEnum["DrumStart"] = "playing_drum";
    AnimationEnum["DwemerExtractor"] = "taking_sample_with_dwarven_mechanism";
    AnimationEnum["EatingStandingStart"] = "eating_bread";
    AnimationEnum["FeedChickens"] = "scattering_flowers_from_basket";
    AnimationEnum["FluteStart"] = "playing_flute";
    AnimationEnum["LooseSweepingStart"] = "sweeping_floor";
    AnimationEnum["LuteStart"] = "playing_lute";
    AnimationEnum["NoteRead"] = "reading_letter";
    AnimationEnum["OffsetCarryPotServe"] = "serving_food_from_cauldron";
    AnimationEnum["Sell"] = "demonstrating_potion";
    AnimationEnum["WriteLedgerEnter"] = "holding_notebook_with_notes";
    AnimationEnum["WriteLedgerWrite"] = "writing_in_notebook";
    AnimationEnum["Book_Reading"] = "reading_book";
    AnimationEnum["DrinkPotion"] = "drinking_potion";
    AnimationEnum["ChildPlayDoll"] = "playing_with_doll";
    AnimationEnum["PickUpBeam"] = "pickUpBeam";
    AnimationEnum["IdleMerno"] = "idleMerno";
    AnimationEnum["SlashBeam"] = "slashBeam";
    AnimationEnum["PickHae"] = "pickHae";
    AnimationEnum["IdleHae"] = "idleHae";
    AnimationEnum["PickBar"] = "pickBar";
    AnimationEnum["IdleVedro"] = "idleVedro";
    AnimationEnum["FillWater"] = "fillWater";
    AnimationEnum["IdleFullVedro"] = "idleFullVedro";
    AnimationEnum["PourWater"] = "pourWater";
    AnimationEnum["SmelterShovel"] = "smelterShovel";
    AnimationEnum["IdleHoe"] = "idleHoe";
    AnimationEnum["PickHoney"] = "pickHoney";
    AnimationEnum["IdleHoney"] = "idleHoney";
    AnimationEnum["PickBarrel"] = "pickBarrel";
    AnimationEnum["IdleBarrel"] = "idleBarrel";
    AnimationEnum["Buther"] = "buther";
    AnimationEnum["Skining"] = "skining";
    AnimationEnum["Fishingidle"] = "fishingidle";
    AnimationEnum["OffsetBoundStandingStart"] = "offsetBoundStandingStart";
    AnimationEnum["IdleLockPick"] = "idleLockPick";
    AnimationEnum["IdlePickupGround"] = "idlePickup_Ground";
    AnimationEnum["PutDownBeam"] = "putDownBeam";
    AnimationEnum["ChairFrontEnter"] = "chairFrontEnter";
    AnimationEnum["TableEnter"] = "tableEnter";
    AnimationEnum["StoolEnter"] = "stoolEnter";
    AnimationEnum["OffSetApple"] = "offsetapple";
    AnimationEnum["AppleSet"] = "appleset";
    AnimationEnum["EatCookedBeef"] = "CookedBeef";
    AnimationEnum["EatBread"] = "Bread";
    AnimationEnum["DrinkNordMead"] = "DrinkNordMead";
    AnimationEnum["EatApple"] = "apple";
    AnimationEnum["EatPotato"] = "potato";
    AnimationEnum["EatTomato"] = "tomato";
    AnimationEnum["EatCabbage"] = "cabbage";
    AnimationEnum["EatVenison"] = "venison";
    AnimationEnum["EatRawRabbitLeg"] = "rawRabbitLeg";
    AnimationEnum["EatLeek"] = "leek";
    AnimationEnum["DrinkMatze"] = "matze";
    AnimationEnum["DrinkBottleOfWater"] = "bottleOfWater";
    AnimationEnum["EatEidarCheeseWedge"] = "eidarCheeseWedge";
    AnimationEnum["EatGrilledLeeks"] = "grilledLeeks";
    AnimationEnum["EatGrilledChickenBreast"] = "grilledChickenBreast";
    AnimationEnum["EatRabbitHaunch"] = "rabbitHaunch";
    AnimationEnum["EatVenisonStew"] = "venisonStew";
    AnimationEnum["EatBraidedBread"] = "braidedBread";
    AnimationEnum["EatChickenBreast"] = "chickenBreast";
    AnimationEnum["DrinkPotionOfTheKnight"] = "potionOfTheKnight";
    AnimationEnum["EatCabbagePotatoSoup"] = "cabbagePotatoSoup";
    AnimationEnum["EatTomatoSoup"] = "tomatoSoup";
    AnimationEnum["EatApplePie"] = "applePie";
    AnimationEnum["EatElsweyrFondue"] = "elsweyrFondue";
    AnimationEnum["EatSweetRoll"] = "sweetRoll";
    AnimationEnum["DrinkAle"] = "ale";
    AnimationEnum["DrinkWine"] = "wine";
    AnimationEnum["DrinkArgonianBloodwine"] = "argonianBloodwine";
    AnimationEnum["DrinkCyrodilicBrandy"] = "cyrodilicBrandy";
    AnimationEnum["DrinkJugOfMilk"] = "jugOfMilk";
    AnimationEnum["EatSkooma"] = "skooma";
    AnimationEnum["EatSackOfFlour"] = "sackOfFlour";
    AnimationEnum["idleWoodChopStart"] = "idleWoodChopStart";
})(AnimationEnum = exports.AnimationEnum || (exports.AnimationEnum = {}));


/***/ }),

/***/ 476:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ANIMATIONS_CONFIG = void 0;
const AnimationEnum_1 = __webpack_require__(1435);
exports.ANIMATIONS_CONFIG = {
    [AnimationEnum_1.AnimationEnum.Pray]: 'IdlePray',
    [AnimationEnum_1.AnimationEnum.LayUnconscious]: 'IdleAstrid',
    [AnimationEnum_1.AnimationEnum.Applaud2]: 'idleapplaud2',
    [AnimationEnum_1.AnimationEnum.Applaud3]: 'idleapplaud3',
    [AnimationEnum_1.AnimationEnum.Applaud4]: 'idleapplaud4',
    [AnimationEnum_1.AnimationEnum.Applaud5]: 'idleapplaud5',
    [AnimationEnum_1.AnimationEnum.DialogueMovingTalkC]: 'IdleDialogueMovingTalkC',
    [AnimationEnum_1.AnimationEnum.DialogueMovingTalkD]: 'IdleDialogueMovingTalkD',
    [AnimationEnum_1.AnimationEnum.DialogueMovingTalkB]: 'IdleDialogueMovingTalkB',
    [AnimationEnum_1.AnimationEnum.Laugh]: 'IdleLaugh',
    [AnimationEnum_1.AnimationEnum.LookFar]: 'IdleLookFar',
    [AnimationEnum_1.AnimationEnum.SilentBow]: 'IdleSilentBow',
    [AnimationEnum_1.AnimationEnum.Wounded_02]: 'IdleWounded_02',
    [AnimationEnum_1.AnimationEnum.Wounded_03]: 'IdleWounded_03',
    [AnimationEnum_1.AnimationEnum.Wounded_01]: 'IdleWounded_01',
    [AnimationEnum_1.AnimationEnum.HugA]: 'pa_HugA',
    [AnimationEnum_1.AnimationEnum.KneelingEnter]: 'IdleKneelingEnter',
    [AnimationEnum_1.AnimationEnum.CiceroDance1]: 'idleCiceroDance1',
    [AnimationEnum_1.AnimationEnum.CoffinEnter]: 'IdleCoffinEnter',
    [AnimationEnum_1.AnimationEnum.GreybeardMeditateEnter]: 'IdleGreybeardMeditateEnter',
    [AnimationEnum_1.AnimationEnum.LayDownEnter]: 'IdleLayDownEnter',
    [AnimationEnum_1.AnimationEnum.SitCrossLeggedEnter]: 'IdleSitCrossLeggedEnter',
    [AnimationEnum_1.AnimationEnum.SitLedgeEnter]: 'IdleSitLedgeEnter',
    [AnimationEnum_1.AnimationEnum.ChildSitOnKnees]: 'IdleChildSitOnKnees',
    [AnimationEnum_1.AnimationEnum.ComeThisWay]: 'IdleComeThisWay',
    [AnimationEnum_1.AnimationEnum.GetAttention]: 'IdleGetAttention',
    [AnimationEnum_1.AnimationEnum.MQ201ToastStart]: 'IdleMQ201ToastStart',
    [AnimationEnum_1.AnimationEnum.PointFar_02]: 'IdlePointFar_02',
    [AnimationEnum_1.AnimationEnum.RitualSkull3]: 'IdleRitualSkull3',
    [AnimationEnum_1.AnimationEnum.SleepNod]: 'IdleSleepNod',
    [AnimationEnum_1.AnimationEnum.Surrender]: 'IdleSurrender',
    [AnimationEnum_1.AnimationEnum.Wave]: 'IdleWave',
    [AnimationEnum_1.AnimationEnum.WipeBrow]: 'IdleWipeBrow',
    [AnimationEnum_1.AnimationEnum.CivilWarCheer]: 'IdleCivilWarCheer',
    [AnimationEnum_1.AnimationEnum.CivilWarShieldCheer]: 'IdleCivilWarShieldCheer',
    [AnimationEnum_1.AnimationEnum.PointFar_01]: 'IdlePointFar_01',
    [AnimationEnum_1.AnimationEnum.ChildApologize]: 'IdleChildApologize',
    [AnimationEnum_1.AnimationEnum.ChildCryingStart]: 'IdleChildCryingStart',
    [AnimationEnum_1.AnimationEnum.ChildShy]: 'IdleChildShy',
    [AnimationEnum_1.AnimationEnum.ChildTaunt2]: 'IdleChildTaunt2',
    [AnimationEnum_1.AnimationEnum.ChildTaunt3]: 'IdleChildTaunt3',
    [AnimationEnum_1.AnimationEnum.ChildTaunt4]: 'IdleChildTaunt4',
    [AnimationEnum_1.AnimationEnum.ChildWhineKick]: 'IdleChildWhineKick',
    [AnimationEnum_1.AnimationEnum.CannibalFeedCrouching]: 'idleCannibalFeedCrouching',
    [AnimationEnum_1.AnimationEnum.CannibalFeedStanding_Loose]: 'idleCannibalFeedStanding_Loose',
    [AnimationEnum_1.AnimationEnum.HandCut]: 'idleHandCut',
    [AnimationEnum_1.AnimationEnum.LockPick]: 'IdleLockPick',
    [AnimationEnum_1.AnimationEnum.MT_DoorBang]: 'IdleMT_DoorBang',
    [AnimationEnum_1.AnimationEnum.RitualSkull1]: 'IdleRitualSkull1',
    [AnimationEnum_1.AnimationEnum.SearchBody]: 'IdleSearchBody',
    [AnimationEnum_1.AnimationEnum.SnowElfPrinceAscension]: 'IdleSnowElfPrinceAscension',
    [AnimationEnum_1.AnimationEnum.Take]: 'IdleTake',
    [AnimationEnum_1.AnimationEnum.UncontrollableCough]: 'IdleUncontrollableCough',
    [AnimationEnum_1.AnimationEnum.WarmArms]: 'IdleWarmArms',
    [AnimationEnum_1.AnimationEnum.WarmHands]: 'IdleWarmHands',
    [AnimationEnum_1.AnimationEnum.Pickup_Ground]: 'IdlePickup_Ground',
    [AnimationEnum_1.AnimationEnum.T02AscendMale]: 'IdleT02AscendMale',
    [AnimationEnum_1.AnimationEnum.T02AscendFemale]: 'IdleT02AscendFemale',
    [AnimationEnum_1.AnimationEnum.CoweringLoose]: 'IdleCoweringLoose',
    [AnimationEnum_1.AnimationEnum.Injured]: 'IdleInjured',
    [AnimationEnum_1.AnimationEnum.OffsetArmsCrossedStart]: 'IdleOffsetArmsCrossedStart',
    [AnimationEnum_1.AnimationEnum.Study]: 'IdleStudy',
    [AnimationEnum_1.AnimationEnum.DrunkStart]: 'idleDrunkStart',
    [AnimationEnum_1.AnimationEnum.DrunkStop]: 'IdleDrunkStop',
    [AnimationEnum_1.AnimationEnum.MQ201Drink]: 'IdleMQ201Drink',
    [AnimationEnum_1.AnimationEnum.MQ201HoldingDrinkTray]: 'IdleMQ201HoldingDrinkTray',
    [AnimationEnum_1.AnimationEnum.BlowHornImperial]: 'idleBlowHornImperial',
    [AnimationEnum_1.AnimationEnum.BlowHornStormcloak]: 'idleBlowHornStormcloak',
    [AnimationEnum_1.AnimationEnum.DrinkingStandingStart]: 'idleDrinkingStandingStart',
    [AnimationEnum_1.AnimationEnum.DrumStart]: 'IdleDrumStart',
    [AnimationEnum_1.AnimationEnum.DwemerExtractor]: 'IdleDwemerExtractor',
    [AnimationEnum_1.AnimationEnum.EatingStandingStart]: 'IdleEatingStandingStart',
    [AnimationEnum_1.AnimationEnum.FeedChickens]: 'IdleFeedChickens',
    [AnimationEnum_1.AnimationEnum.FluteStart]: 'IdleFluteStart',
    [AnimationEnum_1.AnimationEnum.LooseSweepingStart]: 'IdleLooseSweepingStart',
    [AnimationEnum_1.AnimationEnum.LuteStart]: 'IdleLuteStart',
    [AnimationEnum_1.AnimationEnum.NoteRead]: 'IdleNoteRead',
    [AnimationEnum_1.AnimationEnum.OffsetCarryPotServe]: 'IdleOffsetCarryPotServe',
    [AnimationEnum_1.AnimationEnum.Sell]: 'IdleSell',
    [AnimationEnum_1.AnimationEnum.WriteLedgerEnter]: 'IdleWriteLedgerEnter',
    [AnimationEnum_1.AnimationEnum.WriteLedgerWrite]: 'IdleWriteLedgerWrite',
    [AnimationEnum_1.AnimationEnum.Book_Reading]: 'IdleBook_Reading',
    [AnimationEnum_1.AnimationEnum.DrinkPotion]: 'IdleDrinkPotion',
    [AnimationEnum_1.AnimationEnum.ChildPlayDoll]: 'IdleChildPlayDoll',
    [AnimationEnum_1.AnimationEnum.PickUpBeam]: 'pick_up_beam',
    [AnimationEnum_1.AnimationEnum.IdleMerno]: 'idle_merno',
    [AnimationEnum_1.AnimationEnum.SlashBeam]: 'slash_beam',
    [AnimationEnum_1.AnimationEnum.PickHae]: 'pick_hae',
    [AnimationEnum_1.AnimationEnum.IdleHae]: 'idle_hae',
    [AnimationEnum_1.AnimationEnum.PickBar]: 'pick_bar',
    [AnimationEnum_1.AnimationEnum.IdleVedro]: 'idle_vedro',
    [AnimationEnum_1.AnimationEnum.FillWater]: 'fill_water',
    [AnimationEnum_1.AnimationEnum.IdleFullVedro]: 'idle_full_vedro',
    [AnimationEnum_1.AnimationEnum.PourWater]: 'pour_water',
    [AnimationEnum_1.AnimationEnum.SmelterShovel]: 'smelter_shovel',
    [AnimationEnum_1.AnimationEnum.IdleHoe]: 'idlehoe',
    [AnimationEnum_1.AnimationEnum.PickHoney]: 'pick_honey',
    [AnimationEnum_1.AnimationEnum.IdleHoney]: 'idle_honey',
    [AnimationEnum_1.AnimationEnum.PickBarrel]: 'pick_barrel',
    [AnimationEnum_1.AnimationEnum.IdleBarrel]: 'idle_barrel',
    [AnimationEnum_1.AnimationEnum.Buther]: 'buther',
    [AnimationEnum_1.AnimationEnum.Skining]: 'skining',
    [AnimationEnum_1.AnimationEnum.Fishingidle]: 'fishingidle',
    [AnimationEnum_1.AnimationEnum.OffsetBoundStandingStart]: 'OffsetBoundStandingStart',
    [AnimationEnum_1.AnimationEnum.IdleLockPick]: 'IdleLockPick',
    [AnimationEnum_1.AnimationEnum.IdlePickupGround]: 'IdlePickup_Ground',
    [AnimationEnum_1.AnimationEnum.IdleStop]: 'IdleStop',
    [AnimationEnum_1.AnimationEnum.IdleForceDefaultState]: 'IdleForceDefaultState',
    [AnimationEnum_1.AnimationEnum.PutDownBeam]: 'put_down_beam',
    [AnimationEnum_1.AnimationEnum.ChairFrontEnter]: 'IdleChairFrontEnter',
    [AnimationEnum_1.AnimationEnum.TableEnter]: 'IdleTableEnterPlayer',
    [AnimationEnum_1.AnimationEnum.StoolEnter]: 'IdleStoolEnterPlayer',
    [AnimationEnum_1.AnimationEnum.OffSetApple]: 'offsetapple',
    [AnimationEnum_1.AnimationEnum.AppleSet]: 'appleset',
    [AnimationEnum_1.AnimationEnum.EatCookedBeef]: 'CookedBeef',
    [AnimationEnum_1.AnimationEnum.EatBread]: 'Bread',
    [AnimationEnum_1.AnimationEnum.DrinkNordMead]: 'NordMead',
    [AnimationEnum_1.AnimationEnum.EatApple]: 'RedApple',
    [AnimationEnum_1.AnimationEnum.EatPotato]: 'Potato',
    [AnimationEnum_1.AnimationEnum.EatTomato]: 'Tomato',
    [AnimationEnum_1.AnimationEnum.EatCabbage]: 'Cabbage',
    [AnimationEnum_1.AnimationEnum.EatVenison]: 'Venison',
    [AnimationEnum_1.AnimationEnum.EatRawRabbitLeg]: 'RawRabbitLeg',
    [AnimationEnum_1.AnimationEnum.EatLeek]: 'Leek',
    [AnimationEnum_1.AnimationEnum.DrinkMatze]: 'Matze',
    [AnimationEnum_1.AnimationEnum.DrinkBottleOfWater]: 'Matze',
    [AnimationEnum_1.AnimationEnum.EatEidarCheeseWedge]: 'EidarCheeseWedge',
    [AnimationEnum_1.AnimationEnum.EatGrilledLeeks]: 'GrilledLeeks',
    [AnimationEnum_1.AnimationEnum.EatGrilledChickenBreast]: 'GrilledChickenBreast',
    [AnimationEnum_1.AnimationEnum.EatRabbitHaunch]: 'RabbitHaunch',
    [AnimationEnum_1.AnimationEnum.EatVenisonStew]: 'VenisonStew',
    [AnimationEnum_1.AnimationEnum.EatBraidedBread]: 'BraidedBread',
    [AnimationEnum_1.AnimationEnum.EatChickenBreast]: 'ChickenBreast',
    [AnimationEnum_1.AnimationEnum.DrinkPotionOfTheKnight]: 'Potato',
    [AnimationEnum_1.AnimationEnum.EatCabbagePotatoSoup]: 'CabbagePotatoSoup',
    [AnimationEnum_1.AnimationEnum.EatTomatoSoup]: 'TomatoSoup',
    [AnimationEnum_1.AnimationEnum.EatApplePie]: 'ApplePie',
    [AnimationEnum_1.AnimationEnum.EatElsweyrFondue]: 'ElsweyrFondue',
    [AnimationEnum_1.AnimationEnum.EatSweetRoll]: 'SweetRoll',
    [AnimationEnum_1.AnimationEnum.DrinkAle]: 'Ale',
    [AnimationEnum_1.AnimationEnum.DrinkWine]: 'Wine',
    [AnimationEnum_1.AnimationEnum.DrinkArgonianBloodwine]: 'ArgonianBloodWine',
    [AnimationEnum_1.AnimationEnum.DrinkCyrodilicBrandy]: 'CyrodilicBrandy',
    [AnimationEnum_1.AnimationEnum.DrinkJugOfMilk]: 'jugOfMilk',
    [AnimationEnum_1.AnimationEnum.EatSkooma]: 'skooma',
    [AnimationEnum_1.AnimationEnum.EatSackOfFlour]: 'SackOfFlour',
    [AnimationEnum_1.AnimationEnum.idleWoodChopStart]: 'idleWoodChopStart',
};


/***/ }),

/***/ 9321:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationSyncEvents = exports.AnimationsEvents = exports.AnimationsMenuEvents = void 0;
var AnimationsMenuEvents;
(function (AnimationsMenuEvents) {
    AnimationsMenuEvents["Exit"] = "animationsMenu:exit";
    AnimationsMenuEvents["Set"] = "animationsMenu:set";
    AnimationsMenuEvents["Play"] = "animationsMenu:play";
    AnimationsMenuEvents["PlayFromRadial"] = "animationsMenu:playFromRadial";
    AnimationsMenuEvents["SetIsFavorite"] = "animationsMenu:setIsFavorite";
    AnimationsMenuEvents["Remove"] = "animationsMenu:remove";
})(AnimationsMenuEvents = exports.AnimationsMenuEvents || (exports.AnimationsMenuEvents = {}));
var AnimationsEvents;
(function (AnimationsEvents) {
    AnimationsEvents["Play"] = "animations:play";
    AnimationsEvents["PlayTwo"] = "animations:playTwo";
    AnimationsEvents["Stop"] = "animations:stop";
})(AnimationsEvents = exports.AnimationsEvents || (exports.AnimationsEvents = {}));
var AnimationSyncEvents;
(function (AnimationSyncEvents) {
    AnimationSyncEvents["SyncAnim"] = "animations:syncAnim";
    AnimationSyncEvents["SendDataAnimation"] = "animations:sendDataAnimation";
})(AnimationSyncEvents = exports.AnimationSyncEvents || (exports.AnimationSyncEvents = {}));


/***/ }),

/***/ 911:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArmorWeaponEvents = exports.ArmorStoreEvents = void 0;
var ArmorStoreEvents;
(function (ArmorStoreEvents) {
    ArmorStoreEvents["Close"] = "armorStore:close";
    ArmorStoreEvents["SetActiveProduct"] = "armorStore:setActiveProduct";
    ArmorStoreEvents["BuyProduct"] = "armorStore:buyProduct";
})(ArmorStoreEvents = exports.ArmorStoreEvents || (exports.ArmorStoreEvents = {}));
var ArmorWeaponEvents;
(function (ArmorWeaponEvents) {
    ArmorWeaponEvents["OpenArmor"] = "armorWeapon:openArmor";
    ArmorWeaponEvents["OpenWeapon"] = "armorWeapon:openWeapon";
})(ArmorWeaponEvents = exports.ArmorWeaponEvents || (exports.ArmorWeaponEvents = {}));


/***/ }),

/***/ 7624:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArmorConfig = void 0;
const ItemHashes_1 = __webpack_require__(2388);
exports.ArmorConfig = {
    [ItemHashes_1.ItemHashes.LEATHER_HELMET]: {
        physical: 12,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.LEATHER_ARMOR]: {
        physical: 26,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.LEATHER_BRACERS]: {
        physical: 7,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.LEATHER_BOOTS]: {
        physical: 7,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.HIDE_HELMET]: {
        physical: 10,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.HIDE_ARMOR]: {
        physical: 20,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.HIDE_BRACERS]: {
        physical: 5,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.HIDE_BOOTS]: {
        physical: 5,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.HIDE_SHIELD]: {
        physical: 15,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ELVEN_HELMET]: {
        physical: 13,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ELVEN_ARMOR]: {
        physical: 29,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ELVEN_BRACERS]: {
        physical: 8,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ELVEN_BOOTS]: {
        physical: 8,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ELVEN_SHIELD]: {
        physical: 21,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.SCALED_HELMET]: {
        physical: 14,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.SCALED_ARMOR]: {
        physical: 22,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.SCALED_BRACERS]: {
        physical: 9,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.SCALED_BOOTS]: {
        physical: 9,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.GLASS_HELMET]: {
        physical: 16,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.GLASS_ARMOR]: {
        physical: 38,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.GLASS_BRACERS]: {
        physical: 16,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.GLASS_BOOTS]: {
        physical: 16,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.GLASS_SHIELD]: {
        physical: 27,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONSCALE_HELMET]: {
        physical: 17,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONSCALE_ARMOR]: {
        physical: 41,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONSCALE_BRACERS]: {
        physical: 12,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONSCALE_BOOTS]: {
        physical: 12,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONSCALE_SHIELD]: {
        physical: 29,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.IRON_HELMET]: {
        physical: 15,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.IRON_ARMOR]: {
        physical: 25,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.IRON_BRACERS]: {
        physical: 10,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.IRON_BOOTS]: {
        physical: 10,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.IRON_SHIELD]: {
        physical: 20,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.STEEL_HELMET]: {
        physical: 17,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.STEEL_ARMOR]: {
        physical: 31,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.STEEL_BRACERS]: {
        physical: 12,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.STEEL_BOOTS]: {
        physical: 12,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.STEEL_SHIELD]: {
        physical: 24,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ORCISH_HELMET]: {
        physical: 20,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ORCISH_ARMOR]: {
        physical: 40,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ORCISH_BRACERS]: {
        physical: 15,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ORCISH_BOOTS]: {
        physical: 15,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.ORCISH_SHIELD]: {
        physical: 30,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DWARVEN_HELMET]: {
        physical: 18,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DWARVEN_ARMOR]: {
        physical: 34,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DWARVEN_BRACERS]: {
        physical: 13,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DWARVEN_BOOTS]: {
        physical: 13,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DWARVEN_SHIELD]: {
        physical: 26,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.EBONY_HELMET]: {
        physical: 21,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.EBONY_ARMOR]: {
        physical: 43,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.EBONY_BRACERS]: {
        physical: 16,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.EBONY_BOOTS]: {
        physical: 16,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.EBONY_SHIELD]: {
        physical: 32,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_HELMET]: {
        physical: 23,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_ARMOR]: {
        physical: 49,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_BRACERS]: {
        physical: 18,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_BOOTS]: {
        physical: 18,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_SHIELD]: {
        physical: 36,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONPLATE_HELMET]: {
        physical: 22,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONPLATE_ARMOR]: {
        physical: 46,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONPLATE_BRACERS]: {
        physical: 17,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONPLATE_BOOTS]: {
        physical: 17,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.DRAGONPLATE_SHIELD]: {
        physical: 34,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.NORDIC_CARVED_HELMET]: {
        physical: 2,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.NORDIC_CARVED_ARMOR]: {
        physical: 43,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.NORDIC_CARVED_BRACERS]: {
        physical: 15,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.NORDIC_CARVED_BOOTS]: {
        physical: 15,
        magic: 0
    },
    [ItemHashes_1.ItemHashes.NORDIC_CARVED_SHIELD]: {
        physical: 27,
        magic: 0
    },
};


/***/ }),

/***/ 1855:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AuctionEvents = void 0;
var AuctionEvents;
(function (AuctionEvents) {
    AuctionEvents["CloseRequest"] = "auction:closeRequest";
    AuctionEvents["PointRequest"] = "auction:pointRequest";
    AuctionEvents["CreateBet"] = "auction:createBet";
    AuctionEvents["CreateLot"] = "auction:createLot";
    AuctionEvents["ToggleFavoriteLot"] = "auction:toggleFavoriteLot";
})(AuctionEvents = exports.AuctionEvents || (exports.AuctionEvents = {}));


/***/ }),

/***/ 4457:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BankEvents = void 0;
var BankEvents;
(function (BankEvents) {
    BankEvents["Close"] = "bank:close";
    BankEvents["Replenish"] = "bank:replenish";
    BankEvents["Withdraw"] = "bank:withdraw";
    BankEvents["PayRentHouse"] = "bank:payRentHouse";
    BankEvents["PayRentBusiness"] = "bank:payRentBusiness";
    BankEvents["WithdrawFaction"] = "bank:withdrawFaction";
    BankEvents["BusinessWithdraw"] = "bank:businessWithdraw";
    BankEvents["BusinessReplenish"] = "bank:businessReplenish";
})(BankEvents = exports.BankEvents || (exports.BankEvents = {}));


/***/ }),

/***/ 2957:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BansEvents = void 0;
var BansEvents;
(function (BansEvents) {
    BansEvents["showBans"] = "bans:show";
})(BansEvents = exports.BansEvents || (exports.BansEvents = {}));


/***/ }),

/***/ 5763:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlipCategoryConfig = void 0;
const BlipType_1 = __webpack_require__(6543);
exports.BlipCategoryConfig = {
    [BlipType_1.BlipType.Marker]: {
        id: BlipType_1.BlipType.Marker,
        name: 'Мой маркер',
    },
    [BlipType_1.BlipType.Farm]: {
        id: BlipType_1.BlipType.Farm,
        name: 'Фермы',
    },
    [BlipType_1.BlipType.Sawmill]: {
        id: BlipType_1.BlipType.Sawmill,
        name: 'Лесопилки',
    },
    [BlipType_1.BlipType.City]: {
        id: BlipType_1.BlipType.City,
        name: 'Города',
    },
    [BlipType_1.BlipType.Camp]: {
        id: BlipType_1.BlipType.Camp,
        name: 'Лагеря',
    },
    [BlipType_1.BlipType.Stable]: {
        id: BlipType_1.BlipType.Stable,
        name: 'Конюшни',
    },
    [BlipType_1.BlipType.Mine]: {
        id: BlipType_1.BlipType.Mine,
        name: 'Шахты',
    },
    [BlipType_1.BlipType.Shrine]: {
        id: BlipType_1.BlipType.Shrine,
        name: 'Святилища',
    },
    [BlipType_1.BlipType.Ship]: {
        id: BlipType_1.BlipType.Ship,
        name: 'Корабли',
    },
    [BlipType_1.BlipType.House]: {
        id: BlipType_1.BlipType.House,
        name: 'Дома',
    },
    [BlipType_1.BlipType.Village]: {
        id: BlipType_1.BlipType.Village,
        name: 'Деревни',
    },
    [BlipType_1.BlipType.HouseFamily]: {
        id: BlipType_1.BlipType.HouseFamily,
        name: 'Семейные дома',
    },
    [BlipType_1.BlipType.Fishing]: {
        id: BlipType_1.BlipType.Fishing,
        name: 'Места рыбалки',
    },
    [BlipType_1.BlipType.Whiterun]: {
        id: BlipType_1.BlipType.Whiterun,
        name: 'Вайтран',
    },
    [BlipType_1.BlipType.Markarth]: {
        id: BlipType_1.BlipType.Markarth,
        name: 'Маркарт',
    },
    [BlipType_1.BlipType.Solitude]: {
        id: BlipType_1.BlipType.Solitude,
        name: 'Солитьюд',
    },
    [BlipType_1.BlipType.Morthal]: {
        id: BlipType_1.BlipType.Morthal,
        name: 'Морфол',
    },
    [BlipType_1.BlipType.Dawnstar]: {
        id: BlipType_1.BlipType.Dawnstar,
        name: 'Давнстар',
    },
    [BlipType_1.BlipType.Windhelm]: {
        id: BlipType_1.BlipType.Windhelm,
        name: 'Виндхельм',
    },
    [BlipType_1.BlipType.Riften]: {
        id: BlipType_1.BlipType.Riften,
        name: 'Рифтен',
    },
    [BlipType_1.BlipType.Falkreath]: {
        id: BlipType_1.BlipType.Falkreath,
        name: 'Фолкрит',
    },
    [BlipType_1.BlipType.Winterhold]: {
        id: BlipType_1.BlipType.Winterhold,
        name: 'Винтерхолд',
    },
    [BlipType_1.BlipType.Honey]: {
        id: BlipType_1.BlipType.Honey,
        name: 'Медоварни',
    },
    [BlipType_1.BlipType.Bank]: {
        id: BlipType_1.BlipType.Bank,
        name: 'Банки',
    },
    [BlipType_1.BlipType.SelfBusiness]: {
        id: BlipType_1.BlipType.SelfBusiness,
        name: 'Мой бизнес',
    },
    [BlipType_1.BlipType.Auction]: {
        id: BlipType_1.BlipType.Auction,
        name: 'Аукцион',
    },
    [BlipType_1.BlipType.SelfHouse]: {
        id: BlipType_1.BlipType.SelfHouse,
        name: 'Мой дом',
    },
};


/***/ }),

/***/ 6543:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BlipType = void 0;
var BlipType;
(function (BlipType) {
    BlipType["Marker"] = "marker";
    BlipType["Farm"] = "farm";
    BlipType["Sawmill"] = "sawmill";
    BlipType["City"] = "city";
    BlipType["Camp"] = "camp";
    BlipType["Stable"] = "stable";
    BlipType["Mine"] = "mine";
    BlipType["Shrine"] = "shrine";
    BlipType["Ship"] = "ship";
    BlipType["House"] = "house";
    BlipType["Village"] = "village";
    BlipType["HouseFamily"] = "housefamily";
    BlipType["Fishing"] = "fishing";
    BlipType["Whiterun"] = "whiterun";
    BlipType["Markarth"] = "markarth";
    BlipType["Solitude"] = "solitude";
    BlipType["Morthal"] = "morthal";
    BlipType["Dawnstar"] = "dawnstar";
    BlipType["Windhelm"] = "windhelm";
    BlipType["Riften"] = "riften";
    BlipType["Falkreath"] = "falkreath";
    BlipType["Winterhold"] = "winterhold";
    BlipType["Honey"] = "honey";
    BlipType["Bank"] = "bank";
    BlipType["SelfBusiness"] = "selfbusiness";
    BlipType["Auction"] = "auction";
    BlipType["SelfHouse"] = "selfhome";
})(BlipType = exports.BlipType || (exports.BlipType = {}));


/***/ }),

/***/ 9865:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserFunctionName = void 0;
const InterfacesName_1 = __webpack_require__(3638);
exports.BrowserFunctionName = {
    [InterfacesName_1.BrowserInterfacesName.SelectCharacter]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.SelectSpawn]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.NpcShop]: {
        Show: 'show',
        Hide: 'hide',
        SetCategories: 'setCategories',
        SetProducts: 'setProducts',
    },
    [InterfacesName_1.BrowserInterfacesName.NpcDialog]: {
        Show: 'show',
        Hide: 'hide',
        SetName: 'setName',
        SetText: 'setText',
        SetButtons: 'setButtons',
        SetMainButtons: 'setMainButtons',
    },
    [InterfacesName_1.BrowserInterfacesName.Animation]: {
        Show: 'show',
        Hide: 'hide',
        SetCategories: 'setCategories',
        SetAnimations: 'setAnimations',
        SetRadial: 'setRadial',
    },
    [InterfacesName_1.BrowserInterfacesName.Hud]: {
        Show: 'show',
        Hide: 'hide',
        SetUserInfo: 'setUserInfo',
        SetShowUserInfo: 'setShowUserInfo',
        SetUserMoney: 'setUserMoney',
        SetUserHealth: 'setUserHealth',
        SetUserStamina: 'setUserStamina',
        SetDate: 'setDate',
        SetMicStatus: 'setMicStatus',
        SetUserZone: 'setUserZone',
        SetServerInfo: 'setServerInfo',
        SetShowServerInfo: 'setShowServerInfo',
        SetOnline: 'setOnline',
        SetPlayerID: 'setPlayerID',
        SetPlayerUID: 'setPlayerUID',
        SetTask: 'setTask',
        SetShowTask: 'setShowTask',
        SetPunishment: 'setPunishment',
        SetShowPunishment: 'setShowPunishment',
        SetKillList: 'setKillList',
        SddKill: 'addKill',
        SetShowKillList: 'setShowKillList',
        SetInteractNotification: 'setInteractNotification',
        SetShowInteractNotification: 'setShowInteractNotification',
        SetAcceptCancelNotify: 'setAcceptCancelNotify',
        SetShowAcceptCancelNotify: 'setShowAcceptCancelNotify',
        SetChat: 'setChat',
        SetShowMessages: 'setShowMessages',
        SetShowInput: 'setShowInput',
        AddMessage: 'addMessage',
        ClearMessages: 'clearMessages',
        SetCommandButtons: 'setCommandButtons',
        SetArenaTimer: 'setArenaTimer',
        SetArenaTimerTime: 'setArenaTimerTime',
        SetBinds: 'setBinds',
        SetVisibleMinimap: 'setVisibleMinimap',
    },
    [InterfacesName_1.BrowserInterfacesName.Craft]: {
        Show: 'show',
        Hide: 'hide',
        SetRecipes: 'setRecipes',
        SetCurrentCraft: 'setCurrentCraft',
    },
    [InterfacesName_1.BrowserInterfacesName.CraftStatus]: {
        Show: 'show',
        Hide: 'hide',
        SetStartCraft: 'setStartCraft',
        SetFinishCraft: 'setFinishCraft',
    },
    [InterfacesName_1.BrowserInterfacesName.DateTime]: {
        SetDate: 'setDate',
        SetTime: 'setTime',
    },
    [InterfacesName_1.BrowserInterfacesName.Inventory]: {
        Show: 'show',
        Hide: 'hide',
        SetInventory: 'setInventory',
        SetHasBackpack: 'setHasBackpack',
        SetBackpack: 'setBackpack',
        SetHasContainer: 'setHasContainer',
        SetContainer: 'setContainer',
        AddGridItem: 'addGridItem',
        RemoveGridItem: 'removeGridItem',
        UpdateGridItem: 'updateGridItem',
        SetEquipment: 'setEquipment',
        SetEquipmentItem: 'setEquipmentItem',
        SetStats: 'setStats',
        SetShowHelmet: 'setShowHelmet',
        SetShowPreset: 'setShowPreset',
        SetSearch: 'setSearch',
        SetNearbyItems: 'setNearbyItems',
        AddNearbyItem: 'addNearbyItem',
        RemoveNearbyItem: 'removeNearbyItem',
    },
    [InterfacesName_1.BrowserInterfacesName.Trade]: {
        Show: 'show',
        Hide: 'hide',
        SetGive: 'setGive',
        SetReceive: 'setReceive',
        SetIsAccepted: 'setIsAccepted',
        SetConfirmState: 'setConfirmState',
        SetReceiveMoney: 'setReceiveMoney',
        SetGiveMoney: 'setGiveMoney',
        SetTraderName: 'setTraderName',
    },
    [InterfacesName_1.BrowserInterfacesName.FishingGame]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.SellResource]: {
        Show: 'show',
        Hide: 'hide',
        SetTitle: 'setTitle',
        SetQuality: 'setQuality',
        SetImage: 'setImage',
        SetName: 'setName',
        SetAmount: 'setAmount',
        SetPrice: 'setPrice',
    },
    [InterfacesName_1.BrowserInterfacesName.ChooseWorkType]: {
        Show: 'show',
        Hide: 'hide',
        SetTitle: 'setTitle',
        SetImage: 'setImage',
        SetLevelHelper: 'setLevelHelper',
        SetWorks: 'setWorks',
    },
    [InterfacesName_1.BrowserInterfacesName.SawmillGame]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.HoneyFactory]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.MineGame]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.BizControl]: {
        Show: 'show',
        Hide: 'hide',
        SetBgImage: 'setBgImage',
        SetOwner: 'setOwner',
        SetBalance: 'setBalance',
        SetRentSum: 'setRentSum',
        SetRentList: 'setRentList',
        SddRentItem: 'addRentItem',
        SetStatistic: 'setStatistic',
        SetStaffList: 'setStaffList',
        SetStaffControl: 'setStaffControl',
        SetChart: 'setChart',
    },
    [InterfacesName_1.BrowserInterfacesName.Auction]: {
        Show: 'show',
        Hide: 'hide',
        SetLots: 'setLots',
        AddLot: 'addLot',
        UpdateLot: 'updateLot',
        RemoveLot: 'removeLot',
        SetSelfBets: 'setSelfBets',
        AddSelfBets: 'addSelfBets',
        UpdateSelfBets: 'updateSelfBets',
        RemoveSelfBets: 'removeSelfBets',
        SetProperty: 'setProperty',
    },
    [InterfacesName_1.BrowserInterfacesName.Bank]: {
        Show: 'show',
        Hide: 'hide',
        SetBank: 'setBank',
        SetBalance: 'setBalance',
        SetHouse: 'setHouse',
        SetBusiness: 'setBusiness',
        SetFaction: 'setFaction',
    },
    [InterfacesName_1.BrowserInterfacesName.Cheque]: {
        Show: 'show',
        Hide: 'hide',
        SetFrom: 'setFrom',
        SetTo: 'setTo',
    },
    [InterfacesName_1.BrowserInterfacesName.DonateStore]: {
        SetPlayerInfo: 'setPlayerInfo',
        SetBalance: 'setBalance',
        SetStorePage: 'setStorePage',
        SetCasesPage: 'setCasesPage',
        SetVipsPage: 'setVipsPage',
        SetWarehousePage: 'setWarehousePage',
        SetReplenishPage: 'setReplenishPage',
        SetServicesPage: 'setServicesPage',
        SetTab: 'setTab',
        SetGiftPlayer: 'setGiftPlayer',
    },
    [InterfacesName_1.BrowserInterfacesName.Cases]: {
        Show: 'show',
        ShowWithInstantOpen: 'showWithInstantOpen',
        Hide: 'hide',
        SetBalance: 'setBalance',
        SetCases: 'setCases',
        SetDrop: 'setDrop',
    },
    [InterfacesName_1.BrowserInterfacesName.Fraction]: {
        Show: 'show',
        Hide: 'hide',
        SetFactionHash: 'setFactionHash',
        SetPlayer: 'setPlayer',
        SetPages: 'setPages',
        UpdatePage: 'updatePage',
        AddPage: 'addPage',
        RemovePage: 'removePage',
    },
    [InterfacesName_1.BrowserInterfacesName.Modal]: {
        Show: 'show',
        Hide: 'hide',
        SetModalId: 'setModalId',
        SetTitle: 'setTitle',
        SetComponents: 'setComponents',
    },
    [InterfacesName_1.BrowserInterfacesName.AdBoard]: {
        Show: 'show',
        Hide: 'hide',
        SetPrice: 'setPrice',
        SetList: 'setList',
    },
    [InterfacesName_1.BrowserInterfacesName.RadialMenu]: {
        Show: 'show',
        Hide: 'hide',
        SetPieces: 'setPieces',
    },
    [InterfacesName_1.BrowserInterfacesName.MoonReedGame]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.CookingSkumaGame]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.Authenticator]: {
        Show: 'show',
        Hide: 'hide',
        SetPage: 'setPage',
        SetRememberLogin: 'setRememberLogin',
        SetRecoveryMail: 'setRecoveryMail',
        SetRecoverySecondsLeft: 'setRecoverySecondsLeft',
        SetQueuePosition: 'setQueuePosition',
        setRememberToken: 'setRememberToken',
    },
    [InterfacesName_1.BrowserInterfacesName.EscMenu]: {
        Show: 'show',
        Hide: 'hide',
        SetSettings: 'setSettings',
        SetSettingsSection: 'setSettingsSection',
        SetSetting: 'setSetting',
        SetExit: 'setExit',
        SetReport: 'setReport',
        SetReportHistory: 'setReportHistory',
        AddReportHistoryItem: 'addReportHistoryItem',
        SetCurrentTicket: 'setCurrentTicket',
        AddCurrentTicketMessage: 'addCurrentTicketMessage',
        RemoveReportHistoryItem: 'removeReportHistoryItem',
        UpdateReportHistoryItem: 'updateReportHistoryItem',
        SetGifts: 'setGifts',
    },
    [InterfacesName_1.BrowserInterfacesName.CharacterMenu]: {
        Show: 'show',
        Hide: 'hide',
        SetCharacter: 'setCharacter',
        SetSkills: 'setSkills',
        SetAchievements: 'setAchievements',
        SetMounts: 'setMounts',
    },
    [InterfacesName_1.BrowserInterfacesName.HouseSystem]: {
        Show: 'show',
        Hide: 'hide',
        SetImage: 'setImage',
        SetOwner: 'setOwner',
        SetName: 'setName',
        SetNumber: 'setNumber',
        SetLevel: 'setLevel',
        SetDistrict: 'setDistrict',
        SetPrice: 'setPrice',
        SetTax: 'setTax',
        SetIsOwner: 'setIsOwner',
        SetMembers: 'setMembers',
        SetInteriors: 'setInteriors',
        SetUpgrades: 'setUpgrades',
        SetFullInfo: 'setFullInfo',
    },
    [InterfacesName_1.BrowserInterfacesName.DeathScreen]: {
        Show: 'show',
        Hide: 'hide',
        SetSeconds: 'setSeconds',
        SetShowWaitBtn: 'setShowWaitBtn',
        AddSeconds: 'addSeconds',
        ActivateDeathButton: 'activateDeathButton',
    },
    [InterfacesName_1.BrowserInterfacesName.AdminPanel]: {
        Show: 'show',
        Hide: 'hide',
        SetSections: 'setSections',
        UpdateSetting: 'updateSetting',
        SetAdminInfo: 'setAdminInfo',
        SetCommands: 'setCommands',
        SetSettings: 'setSettings',
        SetBugs: 'setBugs',
        SetBugStatusById: 'setBugStatusById',
        SetPunishedPlayers: 'setPunishedPlayers',
        SetReports: 'setReports',
        SetFactionLeaders: 'setFactionLeaders',
        SetMyStat: 'setMyStat',
        SetTickets: 'setTickets',
        SetTicketContent: 'setTicketContent',
        SetFastAnswers: 'setFastAnswers',
        AddTicket: 'addTicket',
        UpdateTicket: 'updateTicket',
        UpdateTicketContent: 'updateTicketContent',
        AddTicketContentMessage: 'addTicketContentMessage',
        UpdateStatDays: 'updateStatDays',
        UpdateAdminStats: 'updateAdminStats',
    },
    [InterfacesName_1.BrowserInterfacesName.AdminReconHud]: {
        Show: 'show',
        Hide: 'hide',
        SetButtons: 'setButtons',
        SetNotifications: 'setNotifications',
        SetPlayerData: 'setPlayerData',
        SetActiveMode: 'setActiveMode',
        UpdateNotification: 'updateNotification',
    },
    [InterfacesName_1.BrowserInterfacesName.Employment]: {
        Show: 'show',
        Hide: 'hide',
        SetJobs: 'setJobs',
        UpdateJobById: 'updateJobById',
    },
    [InterfacesName_1.BrowserInterfacesName.WeddingRequest]: {
        Show: 'show',
        Hide: 'hide',
        SetPlayer: 'setPlayer',
    },
    [InterfacesName_1.BrowserInterfacesName.WeddingResponse]: {
        Show: 'show',
        Hide: 'hide',
        SetSenderName: 'setSenderName',
    },
    [InterfacesName_1.BrowserInterfacesName.ProductBusinesses]: {
        Show: 'show',
        Hide: 'hide',
        SetInfo: 'setInfo',
        SetProfit: 'setProfit',
        SetProducts: 'setProducts',
        SetStatistics: 'setStatistics',
    },
    [InterfacesName_1.BrowserInterfacesName.ManufacturingBusiness]: {
        Show: 'show',
        Hide: 'hide',
        SetInfo: 'setInfo',
        SetMembers: 'setMembers',
        SetTax: 'setTax',
    },
    [InterfacesName_1.BrowserInterfacesName.TradingStore]: {
        Show: 'show',
        Hide: 'hide',
        SetCategories: 'setCategories',
        SetProducts: 'setProducts',
    },
    [InterfacesName_1.BrowserInterfacesName.Arena]: {
        Show: 'show',
        Hide: 'hide',
        SetLeaders: 'setLeaders',
        SetBattlesHistory: 'setBattlesHistory',
        SetPlayerInfo: 'setPlayerInfo',
        SetBattlesDate: 'setBattlesDate',
        SetTableLeaders: 'setTableLeaders',
        SetCurrentBattleInfo: 'setCurrentBattleInfo',
        SetIsShowConfirmWindow: 'setIsShowConfirmWindow',
    },
    [InterfacesName_1.BrowserInterfacesName.ArenaConfirmWindow]: {
        Show: 'show',
        Hide: 'hide',
        SetLosePTS: 'setLosePTS',
    },
    [InterfacesName_1.BrowserInterfacesName.ChooseClothes]: {
        Show: 'show',
        Hide: 'hide',
        SetBalance: 'setBalance',
        SetClothes: 'setClothes',
    },
    [InterfacesName_1.BrowserInterfacesName.TradingTavern]: {
        Show: 'show',
        Hide: 'hide',
        SetInfo: 'setInfo',
        SetCategories: 'setCategories',
        SetProducts: 'setProducts',
    },
    [InterfacesName_1.BrowserInterfacesName.ArmorStore]: {
        Show: 'show',
        Hide: 'hide',
        SetCurrentProtection: 'setCurrentProtection',
        SetBalance: 'setBalance',
        SetStoreName: 'setStoreName',
        SetProducts: 'setProducts',
    },
    [InterfacesName_1.BrowserInterfacesName.Cooking]: {
        Show: 'show',
        Hide: 'hide',
        setRecipes: 'SetRecipes',
        setCurrentCraft: 'SetCurrentCraft',
        incrementCurrentCraftTime: 'IncrementCurrentCraftTime',
    },
    [InterfacesName_1.BrowserInterfacesName.Contract]: {
        Show: 'show',
        Hide: 'hide',
        SetTitle: 'setTitle',
        SetHeader: 'setHeader',
        SetDescription: 'setDescription',
    },
    [InterfacesName_1.BrowserInterfacesName.KickInfo]: {
        Show: 'show',
        Hide: 'hide',
        SetInfo: 'setInfo',
    },
    [InterfacesName_1.BrowserInterfacesName.BanInfo]: {
        Show: 'show',
        Hide: 'hide',
        SetInfo: 'setInfo',
    },
    [InterfacesName_1.BrowserInterfacesName.Smelter]: {
        Show: 'show',
        Hide: 'hide',
        SetRecipes: 'setRecipes',
        SetCurrentCraft: 'setCurrentCraft',
    },
    [InterfacesName_1.BrowserInterfacesName.Disclaimer]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.Map]: {
        SetData: 'setData',
        SetBlipCategories: 'setBlipCategories',
        SetBlips: 'setBlips',
        AddBlip: 'addBlip',
        RemoveBlip: 'removeBlip',
        SetMarker: 'setMarker',
    },
    [InterfacesName_1.BrowserInterfacesName.WorldMap]: {
        Show: 'show',
        Hide: 'hide',
    },
    [InterfacesName_1.BrowserInterfacesName.PickupItem]: {
        Show: 'show',
        Hide: 'hide',
        SetPosition: 'setPosition',
        SetItemHash: 'setItemHash',
        SetItemAmount: 'setItemAmount',
    },
    [InterfacesName_1.BrowserInterfacesName.Skins]: {
        Show: 'show',
        Hide: 'hide',
        SetSlots: 'setSlots',
        SetSlot: 'setSlot',
        SetSkins: 'setSkins',
    },
    [InterfacesName_1.BrowserInterfacesName.Queue]: {
        Show: 'show',
        Hide: 'hide',
        SetPosition: 'setPosition',
    },
};


/***/ }),

/***/ 3638:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BrowserInterfacesName = void 0;
var BrowserInterfacesName;
(function (BrowserInterfacesName) {
    BrowserInterfacesName["SelectCharacter"] = "selectCharacter";
    BrowserInterfacesName["SelectSpawn"] = "selectSpawn";
    BrowserInterfacesName["NpcShop"] = "npcShop";
    BrowserInterfacesName["NpcDialog"] = "npcDialog";
    BrowserInterfacesName["Animation"] = "animations";
    BrowserInterfacesName["Hud"] = "hud";
    BrowserInterfacesName["BrowserCursor"] = "browserCursor";
    BrowserInterfacesName["Craft"] = "craft";
    BrowserInterfacesName["CraftStatus"] = "craftStatus";
    BrowserInterfacesName["DateTime"] = "dateTime";
    BrowserInterfacesName["Inventory"] = "inventory";
    BrowserInterfacesName["Trade"] = "trade";
    BrowserInterfacesName["FishingGame"] = "fishingGame";
    BrowserInterfacesName["SellResource"] = "sellResource";
    BrowserInterfacesName["ChooseWorkType"] = "chooseWorkType";
    BrowserInterfacesName["SawmillGame"] = "sawmillGame";
    BrowserInterfacesName["HoneyFactory"] = "honeyFactory";
    BrowserInterfacesName["MineGame"] = "mineGame";
    BrowserInterfacesName["BizControl"] = "bizControl";
    BrowserInterfacesName["Auction"] = "auction";
    BrowserInterfacesName["Bank"] = "bank";
    BrowserInterfacesName["Cheque"] = "cheque";
    BrowserInterfacesName["DonateStore"] = "donateStore";
    BrowserInterfacesName["Cases"] = "cases";
    BrowserInterfacesName["Fraction"] = "fraction";
    BrowserInterfacesName["Modal"] = "modal";
    BrowserInterfacesName["AdBoard"] = "adBoard";
    BrowserInterfacesName["RadialMenu"] = "radialMenu";
    BrowserInterfacesName["MoonReedGame"] = "moonReedGame";
    BrowserInterfacesName["CookingSkumaGame"] = "cookingSkumaGame";
    BrowserInterfacesName["Authenticator"] = "auth";
    BrowserInterfacesName["EscMenu"] = "escMenu";
    BrowserInterfacesName["CharacterMenu"] = "characterMenu";
    BrowserInterfacesName["HouseSystem"] = "houseSystem";
    BrowserInterfacesName["DeathScreen"] = "deathScreen";
    BrowserInterfacesName["AdminPanel"] = "adminPanel";
    BrowserInterfacesName["AdminReconHud"] = "adminPanelHud";
    BrowserInterfacesName["Employment"] = "employment";
    BrowserInterfacesName["WeddingRequest"] = "weddingRequest";
    BrowserInterfacesName["WeddingResponse"] = "weddingResponse";
    BrowserInterfacesName["ProductBusinesses"] = "productBusinesses";
    BrowserInterfacesName["ManufacturingBusiness"] = "manufacturingBusiness";
    BrowserInterfacesName["TradingStore"] = "tradingStore";
    BrowserInterfacesName["ArmorStore"] = "armorStore";
    BrowserInterfacesName["Arena"] = "arena";
    BrowserInterfacesName["ArenaConfirmWindow"] = "arenaConfirmWindow";
    BrowserInterfacesName["ChooseClothes"] = "chooseClothes";
    BrowserInterfacesName["TradingTavern"] = "tradingTavern";
    BrowserInterfacesName["Cooking"] = "cooking";
    BrowserInterfacesName["Contract"] = "contract";
    BrowserInterfacesName["KickInfo"] = "kickInfo";
    BrowserInterfacesName["BanInfo"] = "banInfo";
    BrowserInterfacesName["Smelter"] = "smelter";
    BrowserInterfacesName["Disclaimer"] = "disclaimer";
    BrowserInterfacesName["Map"] = "map";
    BrowserInterfacesName["WorldMap"] = "worldMap";
    BrowserInterfacesName["PickupItem"] = "pickupItem";
    BrowserInterfacesName["Skins"] = "skins";
    BrowserInterfacesName["Queue"] = "queue";
})(BrowserInterfacesName = exports.BrowserInterfacesName || (exports.BrowserInterfacesName = {}));


/***/ }),

/***/ 5263:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CasesEvents = void 0;
var CasesEvents;
(function (CasesEvents) {
    CasesEvents["Close"] = "cases:close";
    CasesEvents["TakeDrop"] = "cases:takeDrop";
    CasesEvents["SellDrop"] = "cases:sellDrop";
    CasesEvents["RequestOpen"] = "cases:requestOpen";
})(CasesEvents = exports.CasesEvents || (exports.CasesEvents = {}));


/***/ }),

/***/ 3602:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharacterMenuEvents = void 0;
var CharacterMenuEvents;
(function (CharacterMenuEvents) {
    CharacterMenuEvents["Close"] = "characterMenu:close";
    CharacterMenuEvents["BuyVip"] = "characterMenu:buyVip";
    CharacterMenuEvents["Update"] = "characterMenu:update";
})(CharacterMenuEvents = exports.CharacterMenuEvents || (exports.CharacterMenuEvents = {}));


/***/ }),

/***/ 980:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColshapeEvents = void 0;
var ColshapeEvents;
(function (ColshapeEvents) {
    ColshapeEvents["onPlayerEnter"] = "onPlayerEnterColshape";
    ColshapeEvents["onPlayerExit"] = "onPlayerExitColshape";
    ColshapeEvents["onPlayerInteracted"] = "onPlayerInteractedColshape";
    ColshapeEvents["create"] = "createColshape";
    ColshapeEvents["destroy"] = "destroyColshape";
})(ColshapeEvents = exports.ColshapeEvents || (exports.ColshapeEvents = {}));


/***/ }),

/***/ 7649:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CraftStatusEvents = void 0;
var CraftStatusEvents;
(function (CraftStatusEvents) {
    CraftStatusEvents["Cancel"] = "craftConfirm:cancel";
    CraftStatusEvents["Confirm"] = "craftConfirm:confirm";
    CraftStatusEvents["Finish"] = "craftConfirm:finish";
})(CraftStatusEvents = exports.CraftStatusEvents || (exports.CraftStatusEvents = {}));


/***/ }),

/***/ 1470:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CookingEvents = exports.WorkbenchEvents = exports.TanningEvents = exports.EnchantTableEvents = exports.AlchemyTableEvents = exports.BlacksmithEvents = void 0;
var BlacksmithEvents;
(function (BlacksmithEvents) {
    BlacksmithEvents["Close"] = "blacksmith:close";
    BlacksmithEvents["Cancel"] = "blacksmith:cancel";
    BlacksmithEvents["ChooseRecipe"] = "blacksmith:chooseRecipe";
    BlacksmithEvents["ItemAction"] = "blacksmith:itemAction";
    BlacksmithEvents["Start"] = "blacksmith:start";
})(BlacksmithEvents = exports.BlacksmithEvents || (exports.BlacksmithEvents = {}));
var AlchemyTableEvents;
(function (AlchemyTableEvents) {
    AlchemyTableEvents["Close"] = "alchemyTable:close";
    AlchemyTableEvents["Cancel"] = "alchemyTable:cancel";
    AlchemyTableEvents["ChooseRecipe"] = "alchemyTable:chooseRecipe";
    AlchemyTableEvents["ItemAction"] = "alchemyTable:itemAction";
    AlchemyTableEvents["Start"] = "alchemyTable:start";
})(AlchemyTableEvents = exports.AlchemyTableEvents || (exports.AlchemyTableEvents = {}));
var EnchantTableEvents;
(function (EnchantTableEvents) {
    EnchantTableEvents["Close"] = "enchantTable:close";
    EnchantTableEvents["Cancel"] = "enchantTable:cancel";
    EnchantTableEvents["ChooseRecipe"] = "enchantTable:chooseRecipe";
    EnchantTableEvents["ItemAction"] = "enchantTable:itemAction";
    EnchantTableEvents["Start"] = "enchantTable:start";
})(EnchantTableEvents = exports.EnchantTableEvents || (exports.EnchantTableEvents = {}));
var TanningEvents;
(function (TanningEvents) {
    TanningEvents["Close"] = "tanning:close";
    TanningEvents["Cancel"] = "tanning:cancel";
    TanningEvents["ChooseRecipe"] = "tanning:chooseRecipe";
    TanningEvents["ItemAction"] = "tanning:itemAction";
    TanningEvents["Start"] = "tanning:start";
})(TanningEvents = exports.TanningEvents || (exports.TanningEvents = {}));
var WorkbenchEvents;
(function (WorkbenchEvents) {
    WorkbenchEvents["Close"] = "workbench:close";
    WorkbenchEvents["Cancel"] = "workbench:cancel";
    WorkbenchEvents["ChooseRecipe"] = "workbench:chooseRecipe";
    WorkbenchEvents["ItemAction"] = "workbench:itemAction";
    WorkbenchEvents["Start"] = "workbench:start";
})(WorkbenchEvents = exports.WorkbenchEvents || (exports.WorkbenchEvents = {}));
var CookingEvents;
(function (CookingEvents) {
    CookingEvents["Close"] = "cooking:close";
    CookingEvents["Cancel"] = "cooking:cancel";
    CookingEvents["ChooseRecipe"] = "cooking:chooseRecipe";
    CookingEvents["ItemAction"] = "cooking:itemAction";
    CookingEvents["Start"] = "cooking:start";
})(CookingEvents = exports.CookingEvents || (exports.CookingEvents = {}));


/***/ }),

/***/ 3486:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DamageConfig = void 0;
const ItemHashes_1 = __webpack_require__(2388);
exports.DamageConfig = {
    [ItemHashes_1.ItemHashes.HANDS]: {
        standard: 1,
        power: 2,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 2
    },
    [ItemHashes_1.ItemHashes.IRON_SWORD]: {
        standard: 7,
        power: 14,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.STEEL_SWORD]: {
        standard: 8,
        power: 16,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.ORCISH_SWORD]: {
        standard: 9,
        power: 18,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.DWARVEN_SWORD]: {
        standard: 10,
        power: 20,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.ELVEN_SWORD]: {
        standard: 11,
        power: 22,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.GLASS_SWORD]: {
        standard: 12,
        power: 24,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.EBONY_SWORD]: {
        standard: 13,
        power: 26,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_SWORD]: {
        standard: 14,
        power: 28,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_SWORD]: {
        standard: 15,
        power: 30,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 7
    },
    [ItemHashes_1.ItemHashes.IRON_DAGGER]: {
        standard: 4,
        power: 8,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.STEEL_DAGGER]: {
        standard: 5,
        power: 10,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.ORCISH_DAGGER]: {
        standard: 6,
        power: 12,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.DWARVEN_DAGGER]: {
        standard: 7,
        power: 14,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.ELVEN_DAGGER]: {
        standard: 8,
        power: 16,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.GLASS_DAGGER]: {
        standard: 9,
        power: 18,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.EBONY_DAGGER]: {
        standard: 10,
        power: 20,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_DAGGER]: {
        standard: 11,
        power: 22,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_DAGGER]: {
        standard: 12,
        power: 24,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.IRON_MACE]: {
        standard: 9,
        power: 18,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.STEEL_MACE]: {
        standard: 10,
        power: 20,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.ORCISH_MACE]: {
        standard: 11,
        power: 22,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.DWARVEN_MACE]: {
        standard: 12,
        power: 24,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.ELVEN_MACE]: {
        standard: 13,
        power: 26,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.GLASS_MACE]: {
        standard: 14,
        power: 28,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.EBONY_MACE]: {
        standard: 15,
        power: 30,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_MACE]: {
        standard: 16,
        power: 32,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_MACE]: {
        standard: 17,
        power: 34,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 9
    },
    [ItemHashes_1.ItemHashes.IRON_WAR_AXE]: {
        standard: 8,
        power: 16,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.STEEL_WAR_AXE]: {
        standard: 9,
        power: 18,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.ORCISH_WAR_AXE]: {
        standard: 10,
        power: 20,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.DWARVEN_WAR_AXE]: {
        standard: 11,
        power: 22,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.ELVEN_WAR_AXE]: {
        standard: 12,
        power: 24,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.GLASS_WAR_AXE]: {
        standard: 13,
        power: 26,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.EBONY_WAR_AXE]: {
        standard: 14,
        power: 28,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_WAR_AXE]: {
        standard: 15,
        power: 30,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_WAR_AXE]: {
        standard: 16,
        power: 32,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 8
    },
    [ItemHashes_1.ItemHashes.IRON_GREATSWORD]: {
        standard: 15,
        power: 30,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.STEEL_GREATSWORD]: {
        standard: 17,
        power: 34,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.ORCISH_GREATSWORD]: {
        standard: 18,
        power: 36,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.DWARVEN_GREATSWORD]: {
        standard: 19,
        power: 38,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.ELVEN_GREATSWORD]: {
        standard: 20,
        power: 40,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.GLASS_GREATSWORD]: {
        standard: 21,
        power: 42,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.EBONY_GREATSWORD]: {
        standard: 22,
        power: 44,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_GREATSWORD]: {
        standard: 24,
        power: 48,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_GREATSWORD]: {
        standard: 25,
        power: 50,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 18
    },
    [ItemHashes_1.ItemHashes.IRON_WARHAMMER]: {
        standard: 18,
        power: 36,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.STEEL_WARHAMMER]: {
        standard: 20,
        power: 40,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.ORCISH_WARHAMMER]: {
        standard: 21,
        power: 42,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.DWARVEN_WARHAMMER]: {
        standard: 22,
        power: 44,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.ELVEN_WARHAMMER]: {
        standard: 23,
        power: 46,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.GLASS_WARHAMMER]: {
        standard: 24,
        power: 48,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.EBONY_WARHAMMER]: {
        standard: 25,
        power: 50,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_WARHAMMER]: {
        standard: 27,
        power: 54,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_WARHAMMER]: {
        standard: 28,
        power: 56,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 20
    },
    [ItemHashes_1.ItemHashes.IRON_BATTLEAXE]: {
        standard: 16,
        power: 32,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.STEEL_BATTLEAXE]: {
        standard: 18,
        power: 36,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.ORCISH_BATTLEAXE]: {
        standard: 19,
        power: 38,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.DWARVEN_BATTLEAXE]: {
        standard: 20,
        power: 40,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.ELVEN_BATTLEAXE]: {
        standard: 21,
        power: 42,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.GLASS_BATTLEAXE]: {
        standard: 22,
        power: 44,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.EBONY_BATTLEAXE]: {
        standard: 23,
        power: 46,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_BATTLEAXE]: {
        standard: 25,
        power: 50,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_BATTLEAXE]: {
        standard: 26,
        power: 52,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 19
    },
    [ItemHashes_1.ItemHashes.LONG_BOW]: {
        standard: 12,
        power: 24,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.HUNTING_BOW]: {
        standard: 14,
        power: 28,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 5
    },
    [ItemHashes_1.ItemHashes.ORCISH_BOW]: {
        standard: 20,
        power: 40,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 4
    },
    [ItemHashes_1.ItemHashes.DWARVEN_BOW]: {
        standard: 24,
        power: 48,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 4
    },
    [ItemHashes_1.ItemHashes.ELVEN_BOW]: {
        standard: 26,
        power: 52,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 3
    },
    [ItemHashes_1.ItemHashes.GLASS_BOW]: {
        standard: 30,
        power: 60,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 3
    },
    [ItemHashes_1.ItemHashes.EBONY_BOW]: {
        standard: 34,
        power: 68,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 3
    },
    [ItemHashes_1.ItemHashes.DAEDRIC_BOW]: {
        standard: 38,
        power: 76,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 3
    },
    [ItemHashes_1.ItemHashes.DRAGONBONE_BOW]: {
        standard: 40,
        power: 80,
        critical: 0,
        bash: 0,
        sneak: 0,
        stamin: 3
    },
};


/***/ }),

/***/ 9776:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DamageSystemEvents = void 0;
var DamageSystemEvents;
(function (DamageSystemEvents) {
    DamageSystemEvents["HIT"] = "damageSystem:hit";
})(DamageSystemEvents = exports.DamageSystemEvents || (exports.DamageSystemEvents = {}));


/***/ }),

/***/ 6702:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TIME_STAGE_OF_DEATH_WAIT_HELP = exports.TIME_STAGE_OF_DEATH = void 0;
exports.TIME_STAGE_OF_DEATH = 90;
exports.TIME_STAGE_OF_DEATH_WAIT_HELP = 90;


/***/ }),

/***/ 9988:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeathScreenEvents = void 0;
var DeathScreenEvents;
(function (DeathScreenEvents) {
    DeathScreenEvents["Die"] = "deathScreen:die";
    DeathScreenEvents["Wait"] = "deathScreen:wait";
})(DeathScreenEvents = exports.DeathScreenEvents || (exports.DeathScreenEvents = {}));


/***/ }),

/***/ 558:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DonateStoreEvents = void 0;
var DonateStoreEvents;
(function (DonateStoreEvents) {
    DonateStoreEvents["Opened"] = "donateStore:opened";
    DonateStoreEvents["RequestGiftPlayer"] = "donateStore:requestGiftPlayer";
    DonateStoreEvents["ProductBuy"] = "donateStore:productBuy";
    DonateStoreEvents["ProductGift"] = "donateStore:productGift";
    DonateStoreEvents["CaseBuy"] = "donateStore:caseBuy";
    DonateStoreEvents["CaseGift"] = "donateStore:caseGift";
    DonateStoreEvents["Replenish"] = "donateStore:replenish";
    DonateStoreEvents["ReplenishGift"] = "donateStore:replenishGift";
    DonateStoreEvents["Exchange"] = "donateStore:exchange";
    DonateStoreEvents["ExchangeGift"] = "donateStore:exchangeGift";
    DonateStoreEvents["VipBuy"] = "donateStore:vipBuy";
    DonateStoreEvents["ServiceBuy"] = "donateStore:serviceBuy";
    DonateStoreEvents["SellWarehouseItem"] = "donateStore:sellWarehouseItem";
    DonateStoreEvents["GiftWarehouseItem"] = "donateStore:giftWarehouseItem";
    DonateStoreEvents["ClickWarehouseButton"] = "donateStore:clickWarehouseButton";
})(DonateStoreEvents = exports.DonateStoreEvents || (exports.DonateStoreEvents = {}));


/***/ }),

/***/ 919:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FamiliarsEvents = void 0;
var FamiliarsEvents;
(function (FamiliarsEvents) {
    FamiliarsEvents["addFamiliars"] = "familiars:addAll";
    FamiliarsEvents["addFamiliar"] = "familiars:add";
})(FamiliarsEvents = exports.FamiliarsEvents || (exports.FamiliarsEvents = {}));


/***/ }),

/***/ 7914:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FractionEvents = void 0;
var FractionEvents;
(function (FractionEvents) {
    FractionEvents["Close"] = "fraction:close";
    FractionEvents["AddNews"] = "fraction:addNews";
    FractionEvents["RemoveNews"] = "fraction:removeNews";
    FractionEvents["StaffAction"] = "fraction:staffAction";
    FractionEvents["RankAdd"] = "fraction:rankAdd";
    FractionEvents["RankUpdate"] = "fraction:rankUpdate";
    FractionEvents["RankRemove"] = "fraction:rankRemove";
    FractionEvents["ContractStart"] = "fraction:contractStart";
    FractionEvents["ContractFinish"] = "fraction:contractFinish";
    FractionEvents["SetWarehouseIsOpen"] = "fraction:setWarehouseIsOpen";
    FractionEvents["AdClick"] = "fraction:adClick";
    FractionEvents["StartCapt"] = "fraction:startCapt";
    FractionEvents["RemoveWanted"] = "fraction:removeWanted";
    FractionEvents["ReleaseEarly"] = "fraction:releaseEarly";
    FractionEvents["LoadPlayerAsMember"] = "fraction:loadPlayerAsMember";
    FractionEvents["UnloadPlayerAsMember"] = "fraction:UnloadPlayerAsMember";
    FractionEvents["PlayerHired"] = "fraction:PlayerHired";
    FractionEvents["PlayerFiredOnline"] = "fraction:PlayerFiredOnline";
    FractionEvents["PlayerFiredOffline"] = "fraction:PlayerFiredOffline";
})(FractionEvents = exports.FractionEvents || (exports.FractionEvents = {}));


/***/ }),

/***/ 6007:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GreenZoneEvent = void 0;
var GreenZoneEvent;
(function (GreenZoneEvent) {
    GreenZoneEvent["PlayerEnter"] = "greenZone:playerEnter";
    GreenZoneEvent["PlayerExit"] = "greenZone:playerExit";
})(GreenZoneEvent = exports.GreenZoneEvent || (exports.GreenZoneEvent = {}));


/***/ }),

/***/ 176:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HouseSystemEvents = void 0;
var HouseSystemEvents;
(function (HouseSystemEvents) {
    HouseSystemEvents["Exit"] = "houseSystem:exit";
    HouseSystemEvents["Buy"] = "houseSystem:buy";
    HouseSystemEvents["Enter"] = "houseSystem:enter";
    HouseSystemEvents["Pay"] = "houseSystem:pay";
    HouseSystemEvents["Sell"] = "houseSystem:sell";
    HouseSystemEvents["ToggleOpen"] = "houseSystem:toggleOpen";
    HouseSystemEvents["KickMember"] = "houseSystem:kickMember";
    HouseSystemEvents["BuyInterior"] = "houseSystem:buyInterior";
    HouseSystemEvents["BuyUpgrade"] = "houseSystem:buyUpgrade";
})(HouseSystemEvents = exports.HouseSystemEvents || (exports.HouseSystemEvents = {}));


/***/ }),

/***/ 5592:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HudEvents = void 0;
var HudEvents;
(function (HudEvents) {
    HudEvents["SendMessage"] = "hud:sendMessage";
    HudEvents["HideInput"] = "hud:hideInput";
})(HudEvents = exports.HudEvents || (exports.HudEvents = {}));


/***/ }),

/***/ 7555:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModalEvents = void 0;
var ModalEvents;
(function (ModalEvents) {
    ModalEvents["Close"] = "modal:close";
    ModalEvents["ClickButton"] = "modal:ClickButton";
})(ModalEvents = exports.ModalEvents || (exports.ModalEvents = {}));


/***/ }),

/***/ 7144:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NpcConfig = void 0;
const npcEnums_1 = __webpack_require__(1020);
exports.NpcConfig = {
    [npcEnums_1.NpcHash.SawmillWorks]: {
        appearance: {
            name: 'Эйндвар Ветровей',
            isFemale: false,
            raceId: 79681,
            weight: 100,
            hairColor: 1711132,
            skinColor: 7364950,
            headpartIds: [333363, 333361, 651425, 546143, 332816, 916282, 843121, 1016274, 815395],
            headTextureSetId: 853791,
            options: [
                0.30000001192092896, -0.5, -0.5, 0.800000011920929, -1, -0.30000001192092896, -0.42000001668930054, -0.699999988079071,
                -0.10000000149011612, -1, 0, -0.30000001192092896, -0.20000000298023224, 0.30000001192092896, 0.8999999761581421,
                -0.20000000298023224, 0.30000001192092896, -0.6000000238418579, 0,
            ],
            presets: [4, -1, 1, 9],
            tints: [
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                    type: 6,
                    argb: -9412266,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                    type: 4,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                    type: 5,
                    argb: 1495346002,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                    type: 2,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                    type: 9,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                    type: 8,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                    type: 1,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                    type: 10,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                    type: 13,
                    argb: -16777216,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                    type: 11,
                    argb: 2135951617,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                    type: 12,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                    type: 3,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                    type: 14,
                    argb: 16777215,
                },
            ],
        },
        clothes: ['000CEE78', '000E40DF', '000261C1'],
        weapon: ['0002F2F4'],
    },
    [npcEnums_1.NpcHash.Npc_1]: {
        appearance: {
            name: 'Эйлунд Сердце Волка',
            isFemale: false,
            raceId: 79686,
            weight: 78,
            hairColor: 4338989,
            headpartIds: [333359, 333361, 651426, 332822, 332886, 95496, 948973, 333064],
            headTextureSetId: 242977,
            options: [
                0.20000000298023224, -0.5, -0.30000001192092896, 0.30000001192092896, -0.4000000059604645, 0.30000001192092896, 0.5, 0,
                -0.05999999865889549, -1, 0, -0.23999999463558197, 0.6600000262260437, 0.1599999964237213, -0.3400000035762787, -0.4000000059604645,
                0.18000000715255737, -0.6399999856948853, 0,
            ],
            presets: [1, -1, 1, 19],
            tints: [
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                    type: 6,
                    argb: -3755864,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                    type: 4,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                    type: 5,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                    type: 2,
                    argb: 1621709906,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                    type: 9,
                    argb: 1621709906,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                    type: 8,
                    argb: 1621709906,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                    type: 1,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                    type: 10,
                    argb: 1621709906,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                    type: 13,
                    argb: 1621709906,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                    type: 11,
                    argb: 1799554049,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                    type: 12,
                    argb: 1799554049,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_01.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_02.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_03.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_04.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_05.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBothiahTattoo_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBlackBloodTattoo_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBlackBloodTattoo_02.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                    type: 3,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                    type: 14,
                    argb: 16777215,
                },
            ],
            skinColor: 13021352,
        },
        clothes: ['0001BC82', '0010E2CE', '000B145B'],
        weapon: [],
    },
    [npcEnums_1.NpcHash.Npc_2]: {
        appearance: {
            name: 'Йорлунд Серая Грива',
            isFemale: false,
            raceId: 79686,
            weight: 0,
            hairColor: 4406574,
            headpartIds: [333359, 333361, 937497, 332799, 95497, 148057, 815370],
            headTextureSetId: 242977,
            options: [
                0.4000000059604645, -1, -0.6000000238418579, -0.699999988079071, 0.30000001192092896, -0.4000000059604645, 0.5, -0.6000000238418579,
                -0.05999999865889549, -0.699999988079071, 0.30000001192092896, 0.20000000298023224, 0.30000001192092896, 0.20000000298023224,
                -0.30000001192092896, -0.4000000059604645, -0.5, -0.6399999856948853, 0,
            ],
            presets: [1, -1, 4, 19],
            tints: [
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                    type: 6,
                    argb: -5798278,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                    type: 4,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                    type: 5,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                    type: 2,
                    argb: 2135951617,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                    type: 9,
                    argb: 2135951617,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                    type: 8,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                    type: 1,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                    type: 10,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                    type: 13,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                    type: 11,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                    type: 12,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_01.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_02.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_03.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_04.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_05.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_06.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_07.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_08.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_09.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadWarPaint_10.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_01.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_02.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_03.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_04.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNordWarPaint_05.dds',
                    type: 7,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBothiahTattoo_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBlackBloodTattoo_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadBlackBloodTattoo_02.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                    type: 3,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                    type: 14,
                    argb: -11128558,
                },
            ],
            skinColor: 10978938,
        },
        clothes: ['0010CFF0', '000261C1', '000CEE82'],
        weapon: [],
    },
    [npcEnums_1.NpcHash.Npc_3]: {
        appearance: {
            name: 'Сайк',
            isFemale: false,
            raceId: 79686,
            weight: 100,
            hairColor: 5328185,
            headpartIds: [333359, 333361, 546143, 916484, 916418, 95497, 148036, 815472],
            headTextureSetId: 242977,
            options: [
                0.4000000059604645, 0.30000001192092896, 0.4000000059604645, 0.5, 0.30000001192092896, 0.4000000059604645, 0.5, -0.20000000298023224,
                -0.10000000149011612, 0.20000000298023224, 0.30000001192092896, -0.23999999463558197, -0.10000000149011612, -0.30000001192092896,
                0.30000001192092896, 0.5, 0.5, 0.20000000298023224, 0,
            ],
            presets: [1, -1, 1, 19],
            tints: [
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                    type: 6,
                    argb: -4744047,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleUpperEyeSocket.dds',
                    type: 4,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleLowerEyeSocket.dds',
                    type: 5,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks.dds',
                    type: 2,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Cheeks2.dds',
                    type: 9,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_FrownLines.dds',
                    type: 8,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadNord_Lips.dds',
                    type: 1,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Nose.dds',
                    type: 10,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_ForeHead.dds',
                    type: 13,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Chin.dds',
                    type: 11,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadHuman_Neck.dds',
                    type: 12,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHead_Frekles_01.dds',
                    type: 0,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\RedGuardMaleEyeLinerStyle_01.dds',
                    type: 3,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_01.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_02.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\MaleHeadDirt_03.dds',
                    type: 14,
                    argb: 16777215,
                },
            ],
            skinColor: 12033169,
        },
        clothes: ['0004223C', '000261C1', '0008698E'],
        weapon: [],
    },
    [npcEnums_1.NpcHash.Npc_4]: {
        appearance: {
            name: 'Сириус Седобородый',
            isFemale: true,
            raceId: 79686,
            weight: 40,
            hairColor: 2830643,
            headpartIds: [333347, 333071, 967090, 332104, 331963, 262672, 937361],
            headTextureSetId: 242978,
            options: [
                -0.20000000298023224, 0.3, 0, 0, 0, 0.3, 0.20000000298023224, 0, 0, -0.6000000238418579, 0, 0, -0.10000000149011612, -1, 0, 0, 0,
                -0.5, 0,
            ],
            presets: [10, -1, 5, 4],
            tints: [
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\SkinTone.dds',
                    type: 6,
                    argb: -2236963,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleUpperEyeSocket.dds',
                    type: 4,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleLowerEyeSocket.dds',
                    type: 5,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks.dds',
                    type: 2,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_Cheeks2.dds',
                    type: 9,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHead_FrownLines.dds',
                    type: 8,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadNord_Lips.dds',
                    type: 1,
                    argb: -967833343,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Nose.dds',
                    type: 10,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_ForeHead.dds',
                    type: 13,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Chin.dds',
                    type: 11,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadHuman_Neck.dds',
                    type: 12,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleNordEyeLinerStyle_01.dds',
                    type: 3,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_01.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_02.dds',
                    type: 14,
                    argb: 16777215,
                },
                {
                    texturePath: 'Actors\\Character\\Character Assets\\TintMasks\\FemaleHeadDirt_03.dds',
                    type: 14,
                    argb: 16777215,
                },
            ],
            skinColor: 14540253,
        },
        clothes: ['00107108', '0007BC15'],
        weapon: [],
    },
};


/***/ }),

/***/ 1020:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NpcHash = void 0;
var NpcHash;
(function (NpcHash) {
    NpcHash["SawmillWorks"] = "npc_sawmillWorks";
    NpcHash["Npc_1"] = "npc_1";
    NpcHash["Npc_2"] = "npc_2";
    NpcHash["Npc_3"] = "npc_3";
    NpcHash["Npc_4"] = "npc_4";
})(NpcHash = exports.NpcHash || (exports.NpcHash = {}));


/***/ }),

/***/ 8006:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationPositions = void 0;
var NotificationPositions;
(function (NotificationPositions) {
    NotificationPositions["Auth"] = "Auth";
    NotificationPositions["Bottom"] = "Bottom";
})(NotificationPositions = exports.NotificationPositions || (exports.NotificationPositions = {}));


/***/ }),

/***/ 4815:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationTypes = void 0;
var NotificationTypes;
(function (NotificationTypes) {
    NotificationTypes["Info"] = "Info";
    NotificationTypes["Error"] = "Error";
    NotificationTypes["Warning"] = "Warning";
    NotificationTypes["Success"] = "Success";
})(NotificationTypes = exports.NotificationTypes || (exports.NotificationTypes = {}));


/***/ }),

/***/ 2266:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotificationEvents = void 0;
var NotificationEvents;
(function (NotificationEvents) {
    NotificationEvents["Send"] = "notification:send";
    NotificationEvents["SendTemplate"] = "notification:sendTemplate";
})(NotificationEvents = exports.NotificationEvents || (exports.NotificationEvents = {}));


/***/ }),

/***/ 450:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NpcShopEvents = void 0;
var NpcShopEvents;
(function (NpcShopEvents) {
    NpcShopEvents["Close"] = "npcShop:close";
    NpcShopEvents["Buy"] = "npcShop:buy";
})(NpcShopEvents = exports.NpcShopEvents || (exports.NpcShopEvents = {}));


/***/ }),

/***/ 2182:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonHealthEvent = void 0;
var PersonHealthEvent;
(function (PersonHealthEvent) {
    PersonHealthEvent["SetClientHealth"] = "personHealthEvent:setClientHealth";
    PersonHealthEvent["CheckClientHealth"] = "personHealthEvent:checkClientHealth";
    PersonHealthEvent["StartDeathStage"] = "personHealthEvent:startDeathStage";
    PersonHealthEvent["EndDeathStage"] = "personHealthEvent:endDeathStage";
})(PersonHealthEvent = exports.PersonHealthEvent || (exports.PersonHealthEvent = {}));


/***/ }),

/***/ 8877:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_SPEED_MULT = exports.MINIMUM_HEALTH_OF_PLAYER = exports.MAXIMUM_HEALTH_OF_PLAYER = exports.TIME_TO_RECOVERY_STAMIN = exports.RECOVERY_STAMIN_PER_SECOND = exports.REQUIRED_STAMINA_FOR_BLOCK = exports.REQUIRED_STAMINA_FOR_DODGING = exports.REQUIRED_STAMINA_FOR_SPRINT_PER_SECOND = exports.REQUIRED_STAMINA_FOR_JUMP = exports.REQUIRED_STAMIN_FOR_ATTACK = exports.MINIMUM_PLAYER_STAMIN = exports.MAXIMUM_PLAYER_STAMIN = exports.StatsType = exports.MoneyType = void 0;
var MoneyType;
(function (MoneyType) {
    MoneyType[MoneyType["CASH"] = 0] = "CASH";
    MoneyType[MoneyType["BANK"] = 1] = "BANK";
})(MoneyType = exports.MoneyType || (exports.MoneyType = {}));
var StatsType;
(function (StatsType) {
    StatsType[StatsType["HUNGER"] = 0] = "HUNGER";
    StatsType[StatsType["THIRST"] = 1] = "THIRST";
})(StatsType = exports.StatsType || (exports.StatsType = {}));
exports.MAXIMUM_PLAYER_STAMIN = 100;
exports.MINIMUM_PLAYER_STAMIN = 0;
exports.REQUIRED_STAMIN_FOR_ATTACK = 5;
exports.REQUIRED_STAMINA_FOR_JUMP = 5;
exports.REQUIRED_STAMINA_FOR_SPRINT_PER_SECOND = 7;
exports.REQUIRED_STAMINA_FOR_DODGING = 10;
exports.REQUIRED_STAMINA_FOR_BLOCK = 5;
exports.RECOVERY_STAMIN_PER_SECOND = 5;
exports.TIME_TO_RECOVERY_STAMIN = 2 * 1000;
exports.MAXIMUM_HEALTH_OF_PLAYER = 100;
exports.MINIMUM_HEALTH_OF_PLAYER = 1;
exports.DEFAULT_SPEED_MULT = 100;


/***/ }),

/***/ 9713:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RestrictionsNames = exports.PersonRestrictionsEvents = exports.PersonRestrictionsType = void 0;
var PersonRestrictionsType;
(function (PersonRestrictionsType) {
    PersonRestrictionsType["MuteChat"] = "MuteChat";
    PersonRestrictionsType["MuteVoice"] = "MuteVoice";
})(PersonRestrictionsType = exports.PersonRestrictionsType || (exports.PersonRestrictionsType = {}));
var PersonRestrictionsEvents;
(function (PersonRestrictionsEvents) {
    PersonRestrictionsEvents["SetRestrictions"] = "personRestrictions:setRestrictions";
})(PersonRestrictionsEvents = exports.PersonRestrictionsEvents || (exports.PersonRestrictionsEvents = {}));
exports.RestrictionsNames = {
    [PersonRestrictionsType.MuteChat]: 'мут чата',
    [PersonRestrictionsType.MuteVoice]: 'мут голосового чата',
};


/***/ }),

/***/ 3072:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonStaminaEvent = void 0;
var PersonStaminaEvent;
(function (PersonStaminaEvent) {
    PersonStaminaEvent["SetClientStamina"] = "personStaminaEvent:setClientStamina";
    PersonStaminaEvent["ReduceStamina"] = "personStaminaEvent:reduceStamina";
})(PersonStaminaEvent = exports.PersonStaminaEvent || (exports.PersonStaminaEvent = {}));


/***/ }),

/***/ 3507:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PotionsActionType = void 0;
var PotionsActionType;
(function (PotionsActionType) {
    PotionsActionType["RecoveryHealth"] = "recoveryHealth";
    PotionsActionType["RecoveryStamina"] = "recoveryStamina";
    PotionsActionType["IncreaseHealth"] = "increaseHealth";
    PotionsActionType["IncreaseDefense"] = "increaseDefense";
    PotionsActionType["IncreaseFireDefense"] = "increaseFireDefense";
    PotionsActionType["IncreaseColdDefense"] = "increaseColdDefense";
    PotionsActionType["IncreaseShockDefense"] = "increaseShockDefense";
})(PotionsActionType = exports.PotionsActionType || (exports.PotionsActionType = {}));


/***/ }),

/***/ 9529:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProductBusinessesEvents = void 0;
var ProductBusinessesEvents;
(function (ProductBusinessesEvents) {
    ProductBusinessesEvents["Close"] = "productBusinesses:close";
    ProductBusinessesEvents["LoadMaterials"] = "productBusinesses:loadMaterials";
    ProductBusinessesEvents["PayTax"] = "productBusinesses:payTax";
    ProductBusinessesEvents["ChangePriceMarkup"] = "productBusinesses:changePriceMarkup";
})(ProductBusinessesEvents = exports.ProductBusinessesEvents || (exports.ProductBusinessesEvents = {}));


/***/ }),

/***/ 3858:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PromoMenuEvents = void 0;
var PromoMenuEvents;
(function (PromoMenuEvents) {
    PromoMenuEvents["ActivatePromo"] = "escMenu:activatePromo";
    PromoMenuEvents["TakeGifts"] = "escMenu:takeGifts";
})(PromoMenuEvents = exports.PromoMenuEvents || (exports.PromoMenuEvents = {}));


/***/ }),

/***/ 8162:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRaceById = exports.Race = void 0;
var Race;
(function (Race) {
    Race["Argonian"] = "Argonian";
    Race["Breton"] = "Breton";
    Race["DarkElf"] = "DarkElf";
    Race["HighElf"] = "HighElf";
    Race["Imperial"] = "Imperial";
    Race["Khajit"] = "Khajit";
    Race["Nord"] = "Nord";
    Race["Orc"] = "Orc";
    Race["Redguard"] = "Redguard";
    Race["WoodElf"] = "WoodElf";
})(Race = exports.Race || (exports.Race = {}));
function getRaceById(id) {
    switch (id) {
        case 79680:
            return Race.Argonian;
        case 79681:
            return Race.Breton;
        case 79682:
            return Race.DarkElf;
        case 79683:
            return Race.HighElf;
        case 79684:
            return Race.Imperial;
        case 79685:
            return Race.Khajit;
        case 79686:
            return Race.Nord;
        case 79687:
            return Race.Orc;
        case 79688:
            return Race.Redguard;
        case 79689:
            return Race.WoodElf;
        default:
            return Race.Nord;
    }
}
exports.getRaceById = getRaceById;


/***/ }),

/***/ 8797:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RADIAL_MAX_DISTANCE_INTERACTION = exports.RadialMenuEvents = void 0;
var RadialMenuEvents;
(function (RadialMenuEvents) {
    RadialMenuEvents["Open"] = "radialMenu:open";
    RadialMenuEvents["Select"] = "radialMenu:select";
    RadialMenuEvents["Close"] = "radialMenu:close";
    RadialMenuEvents["Back"] = "radialMenu:back";
})(RadialMenuEvents = exports.RadialMenuEvents || (exports.RadialMenuEvents = {}));
exports.RADIAL_MAX_DISTANCE_INTERACTION = 100;


/***/ }),

/***/ 5809:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SellResourceEvents = void 0;
var SellResourceEvents;
(function (SellResourceEvents) {
    SellResourceEvents["Cancel"] = "sellResource:cancel";
    SellResourceEvents["Sell"] = "sellResource:sell";
})(SellResourceEvents = exports.SellResourceEvents || (exports.SellResourceEvents = {}));


/***/ }),

/***/ 3405:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkinsEvents = void 0;
var SkinsEvents;
(function (SkinsEvents) {
    SkinsEvents["Close"] = "skins:close";
    SkinsEvents["PutOn"] = "skins:putOn";
    SkinsEvents["TakeOff"] = "skins:takeOff";
    SkinsEvents["EquipSet"] = "skins:equipSet";
})(SkinsEvents = exports.SkinsEvents || (exports.SkinsEvents = {}));


/***/ }),

/***/ 1086:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SmelterEvents = void 0;
var SmelterEvents;
(function (SmelterEvents) {
    SmelterEvents["Close"] = "smelter:close";
    SmelterEvents["Move"] = "smelter:move";
    SmelterEvents["Start"] = "smelter:start";
    SmelterEvents["Cancel"] = "smelter:cancel";
})(SmelterEvents = exports.SmelterEvents || (exports.SmelterEvents = {}));


/***/ }),

/***/ 1729:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TradingStoreEvents = void 0;
var TradingStoreEvents;
(function (TradingStoreEvents) {
    TradingStoreEvents["Close"] = "tradingStore:close";
    TradingStoreEvents["Buy"] = "tradingStore:buy";
})(TradingStoreEvents = exports.TradingStoreEvents || (exports.TradingStoreEvents = {}));


/***/ }),

/***/ 351:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TradingTavernEvents = void 0;
var TradingTavernEvents;
(function (TradingTavernEvents) {
    TradingTavernEvents["Close"] = "tradingTavern:close";
    TradingTavernEvents["Buy"] = "tradingTavern:buy";
})(TradingTavernEvents = exports.TradingTavernEvents || (exports.TradingTavernEvents = {}));


/***/ }),

/***/ 9609:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UtilsEvents = void 0;
var UtilsEvents;
(function (UtilsEvents) {
    UtilsEvents["SetPlayerFreeze"] = "utilsEvents:setPlayerFreeze";
    UtilsEvents["SetLocalAlpha"] = "utilsEvents:setLocalAlpha";
})(UtilsEvents = exports.UtilsEvents || (exports.UtilsEvents = {}));


/***/ }),

/***/ 6158:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkyrimKeyNames = void 0;
exports.SkyrimKeyNames = {
    [0]: "None",
    [1]: "Escape",
    [2]: "1",
    [3]: "2",
    [4]: "3",
    [5]: "4",
    [6]: "5",
    [7]: "6",
    [8]: "7",
    [9]: "8",
    [10]: "9",
    [11]: "0",
    [12]: "-",
    [13]: "=",
    [14]: "Backspace",
    [15]: "Tab",
    [16]: "Q",
    [17]: "W",
    [18]: "E",
    [19]: "R",
    [20]: "T",
    [21]: "Y",
    [22]: "U",
    [23]: "I",
    [24]: "O",
    [25]: "P",
    [26]: "[",
    [27]: "]",
    [28]: "Enter",
    [29]: "Left Ctrl",
    [30]: "A",
    [31]: "S",
    [32]: "D",
    [33]: "F",
    [34]: "G",
    [35]: "H",
    [36]: "J",
    [37]: "K",
    [38]: "L",
    [39]: ";",
    [40]: "'",
    [41]: "Console",
    [42]: "Left Shift",
    [43]: "\\",
    [44]: "Z",
    [45]: "X",
    [46]: "C",
    [47]: "V",
    [48]: "B",
    [49]: "N",
    [50]: "M",
    [51]: ",",
    [52]: ".",
    [53]: "/",
    [54]: "Right Shift",
    [55]: "*",
    [56]: "Left Alt",
    [57]: "Spacebar",
    [58]: "Caps Lock",
    [59]: "F1",
    [60]: "F2",
    [61]: "F3",
    [62]: "F4",
    [63]: "F5",
    [64]: "F6",
    [65]: "F7",
    [66]: "F8",
    [67]: "F9",
    [68]: "F10",
    [69]: "Num Lock",
    [70]: "Scroll Lock",
    [71]: "7",
    [72]: "8",
    [73]: "9",
    [74]: "-",
    [75]: "4",
    [76]: "5",
    [77]: "6",
    [78]: "+",
    [79]: "1",
    [80]: "2",
    [81]: "3",
    [82]: "0",
    [83]: ".",
    [87]: "F11",
    [88]: "F12",
    [156]: "Enter",
    [157]: "Right Ctrl",
    [181]: "/",
    [183]: "PtrScr",
    [184]: "Right Alt",
    [197]: "Pause",
    [199]: "Home",
    [200]: "Up Arrow",
    [201]: "Page Up",
    [203]: "Left Arrow",
    [205]: "Right Arrow",
    [207]: "End",
    [208]: "Down Arrow",
    [209]: "Page Down",
    [210]: "Insert",
    [211]: "Delete",
    [256]: "LMB",
    [257]: "RMB",
    [258]: "MMB",
    [259]: "MB 3",
    [260]: "MB 4",
    [261]: "MB 5",
    [262]: "MB 6",
    [263]: "MB 7",
    [264]: "Mouse Wheel Up",
    [265]: "Mouse Wheel Down",
};


/***/ }),

/***/ 2233:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toVector3 = exports.Vector3 = void 0;
class Vector3 {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    dist(vector) {
        const unNormalizedVector = { x: Math.pow(vector.x - this.x, 2), y: Math.pow(vector.y - this.y, 2), z: Math.pow(vector.z - this.z, 2) };
        return Math.floor(Math.sqrt(unNormalizedVector.x + unNormalizedVector.y + unNormalizedVector.z));
    }
    toString() {
        return `x: ${this.x.toFixed(4)}, y: ${this.y.toFixed(4)}, z: ${this.z.toFixed(4)}`;
    }
    getNiPoint3() {
        return [this.x, this.y, this.z];
    }
}
exports.Vector3 = Vector3;
function toVector3(x, y, z) {
    return new Vector3(x, y, z);
}
exports.toVector3 = toVector3;


/***/ }),

/***/ 5719:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WeddingRequestEvents = void 0;
var WeddingRequestEvents;
(function (WeddingRequestEvents) {
    WeddingRequestEvents["Close"] = "weddingRequest:close";
    WeddingRequestEvents["Request"] = "weddingRequest:request";
})(WeddingRequestEvents = exports.WeddingRequestEvents || (exports.WeddingRequestEvents = {}));


/***/ }),

/***/ 5685:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WeddingResponseEvents = void 0;
var WeddingResponseEvents;
(function (WeddingResponseEvents) {
    WeddingResponseEvents["Accept"] = "weddingRequest:accept";
    WeddingResponseEvents["Deny"] = "weddingRequest:deny";
})(WeddingResponseEvents = exports.WeddingResponseEvents || (exports.WeddingResponseEvents = {}));


/***/ }),

/***/ 2334:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MineGameEvents = exports.HoneyFactoryEvents = exports.SawmillGameEvents = exports.ChooseWorkTypeEvents = exports.FishingWorkEvents = exports.FishingGameEvents = void 0;
var FishingGameEvents;
(function (FishingGameEvents) {
    FishingGameEvents["Fail"] = "fishingGame:fail";
    FishingGameEvents["Win"] = "fishingGame:win";
})(FishingGameEvents = exports.FishingGameEvents || (exports.FishingGameEvents = {}));
var FishingWorkEvents;
(function (FishingWorkEvents) {
    FishingWorkEvents["StartFishing"] = "fishingWork:startFishing";
    FishingWorkEvents["StopFishing"] = "fishingWork:stopFishing";
})(FishingWorkEvents = exports.FishingWorkEvents || (exports.FishingWorkEvents = {}));
var ChooseWorkTypeEvents;
(function (ChooseWorkTypeEvents) {
    ChooseWorkTypeEvents["Close"] = "chooseWorkType:close";
    ChooseWorkTypeEvents["Start"] = "chooseWorkType:start";
    ChooseWorkTypeEvents["Dismiss"] = "chooseWorkType:dismiss";
})(ChooseWorkTypeEvents = exports.ChooseWorkTypeEvents || (exports.ChooseWorkTypeEvents = {}));
var SawmillGameEvents;
(function (SawmillGameEvents) {
    SawmillGameEvents["Win"] = "sawmillGame:win";
    SawmillGameEvents["Loose"] = "sawmillGame:loose";
})(SawmillGameEvents = exports.SawmillGameEvents || (exports.SawmillGameEvents = {}));
var HoneyFactoryEvents;
(function (HoneyFactoryEvents) {
    HoneyFactoryEvents["Exit"] = "honeyFactory:exit";
    HoneyFactoryEvents["Win"] = "honeyFactory:win";
    HoneyFactoryEvents["Loose"] = "honeyFactory:loose";
})(HoneyFactoryEvents = exports.HoneyFactoryEvents || (exports.HoneyFactoryEvents = {}));
var MineGameEvents;
(function (MineGameEvents) {
    MineGameEvents["Win"] = "mineGame:win";
    MineGameEvents["Loose"] = "mineGame:loose";
})(MineGameEvents = exports.MineGameEvents || (exports.MineGameEvents = {}));


/***/ }),

/***/ 2228:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContractEvents = void 0;
var ContractEvents;
(function (ContractEvents) {
    ContractEvents["Close"] = "contract:close";
    ContractEvents["Accept"] = "contract:accept";
})(ContractEvents = exports.ContractEvents || (exports.ContractEvents = {}));


/***/ }),

/***/ 5357:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorldMapEvents = void 0;
var WorldMapEvents;
(function (WorldMapEvents) {
    WorldMapEvents["CloseRequest"] = "worldMap:closeRequest";
    WorldMapEvents["SetMarker"] = "worldMap:setMarker";
})(WorldMapEvents = exports.WorldMapEvents || (exports.WorldMapEvents = {}));


/***/ }),

/***/ 3725:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoneConfig = void 0;
const Vector3_1 = __webpack_require__(2233);
const type_1 = __webpack_require__(3297);
exports.ZoneConfig = {
    [type_1.ZoneType.FISHING]: [
        {
            hash: type_1.PolygonHash.FISHING_ZONE_1,
            polygon: [
                new Vector3_1.Vector3(24318.9824, -40752.8281, -234.5913),
                new Vector3_1.Vector3(23389.666, -41482.5078, -251.2332),
                new Vector3_1.Vector3(21954.5078, -39364.9297, -194.4112),
                new Vector3_1.Vector3(23430.4766, -38818.6367, -211.1956),
            ],
        },
        {
            hash: type_1.PolygonHash.FISHING_ZONE_2,
            polygon: [
                new Vector3_1.Vector3(-446.8762, -60409.25, 578.7706),
                new Vector3_1.Vector3(-323.7393, -60583.8516, 602.883),
                new Vector3_1.Vector3(-886.4168, -60864.7188, 605.5765),
                new Vector3_1.Vector3(-1102.9303, -60739.4648, 592.7416),
            ],
        },
        {
            hash: type_1.PolygonHash.FISHING_ZONE_3,
            polygon: [
                new Vector3_1.Vector3(-45911.9102, -46752.2656, 560.564),
                new Vector3_1.Vector3(-46229.7266, -46649.293, 632.4014),
                new Vector3_1.Vector3(-46333.1719, -47502.9531, 635.5395),
                new Vector3_1.Vector3(-46046.9766, -47390.625, 555.5814),
            ],
        },
        {
            hash: type_1.PolygonHash.FISHING_ZONE_4,
            polygon: [
                new Vector3_1.Vector3(-118476.0625, 36982.7422, -8665.7109),
                new Vector3_1.Vector3(-118648.5469, 37117.3281, -8790.0771),
                new Vector3_1.Vector3(-118073.7266, 37512.8828, -8806.5693),
                new Vector3_1.Vector3(-118128.5156, 37237.8789, -8664.998),
            ],
        },
        {
            hash: type_1.PolygonHash.FISHING_ZONE_5,
            polygon: [
                new Vector3_1.Vector3(-59035.7617, 93013.7656, -13899.024),
                new Vector3_1.Vector3(-59178.1367, 93142.6172, -13903.6768),
                new Vector3_1.Vector3(-59471.5625, 92962.6719, -13905.8682),
                new Vector3_1.Vector3(-58928.0703, 93592.2891, -13902.682),
                new Vector3_1.Vector3(-58538.0859, 93642.1406, -14021.1494),
            ],
        },
        {
            hash: type_1.PolygonHash.FISHING_ZONE_6,
            polygon: [
                new Vector3_1.Vector3(128955.5469, 15862.5947, -13981.1602),
                new Vector3_1.Vector3(128816.5, 15901.7871, -14034.311),
                new Vector3_1.Vector3(128988.3125, 16566.1699, -14068.4814),
                new Vector3_1.Vector3(129173.6094, 16446.875, -13999.7822),
            ],
        },
        {
            hash: type_1.PolygonHash.FISHING_ZONE_7,
            polygon: [
                new Vector3_1.Vector3(136741.2813, -27866.6035, -11595.1035),
                new Vector3_1.Vector3(136558.9375, -28131.3926, -11634.1982),
                new Vector3_1.Vector3(135556.1719, -27585.748, -11624.5518),
                new Vector3_1.Vector3(135791.6563, -27274.8027, -11602.5098),
            ],
        },
    ],
    [type_1.ZoneType.GREEN_ZONE]: [
        {
            hash: type_1.PolygonHash.GREEN_ZONE_1,
            polygon: [
                new Vector3_1.Vector3(18467.6172, -42730.4492, -121.7653),
                new Vector3_1.Vector3(21814.2461, -40710.6836, -174.3985),
                new Vector3_1.Vector3(23915.3242, -38075.0703, -4.4852),
                new Vector3_1.Vector3(26774.7559, -42187.332, 482.621),
                new Vector3_1.Vector3(26356.6055, -47137.8672, 1092.6489),
                new Vector3_1.Vector3(23021.7852, -51179.6211, 1841.6918),
                new Vector3_1.Vector3(17398.0313, -52140.582, 1086.1022),
                new Vector3_1.Vector3(13904.3799, -51780.7188, 616.1829),
                new Vector3_1.Vector3(12051.0225, -49409.8242, 43.5539),
                new Vector3_1.Vector3(15851.1152, -45303.8438, 19.5936),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_2,
            polygon: [
                new Vector3_1.Vector3(37024.6094, -16551.1563, -4057.1494),
                new Vector3_1.Vector3(37055.3398, -11107.2949, -4269.4561),
                new Vector3_1.Vector3(39056.6211, -7144.8799, -4509.8232),
                new Vector3_1.Vector3(36677.9727, -2422.0684, -4293.2671),
                new Vector3_1.Vector3(30186.8711, -472.93, -1673.942),
                new Vector3_1.Vector3(19723.6992, -3186.906, -2380.4253),
                new Vector3_1.Vector3(19378.6406, -3992.5813, -2494.2456),
                new Vector3_1.Vector3(17366.6582, -2136.8298, -2847.4114),
                new Vector3_1.Vector3(15396.1162, -2481.0715, -3174.6404),
                new Vector3_1.Vector3(14199.1611, -4821.8755, -3487.0359),
                new Vector3_1.Vector3(14690.584, -8413.5869, -4226.7759),
                new Vector3_1.Vector3(13047.3467, -9961.7158, -4729.6934),
                new Vector3_1.Vector3(12411.1865, -12027.8818, -4842.1313),
                new Vector3_1.Vector3(12375.1025, -13681.2617, -4762.0474),
                new Vector3_1.Vector3(11453.0605, -14801.2617, -4773.8574),
                new Vector3_1.Vector3(13472.8604, -17974.5586, -4356.9868),
                new Vector3_1.Vector3(16791.8145, -20198.7285, -4229.1567),
                new Vector3_1.Vector3(27593.1738, -20294.7637, -3542.1223),
                new Vector3_1.Vector3(32443.0781, -21173.3574, -3418.3137),
                new Vector3_1.Vector3(35050.9844, -20318.8848, -3694.7344),
                new Vector3_1.Vector3(36969.7422, -17363.5352, -4284.519),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_3,
            polygon: [
                new Vector3_1.Vector3(-16096.5703, 15821.3545, -5551.1074),
                new Vector3_1.Vector3(-14829.8994, 21330.2031, -5173.606),
                new Vector3_1.Vector3(-7432.145, 20915.4883, -5153.0063),
                new Vector3_1.Vector3(-10611.9209, 13483.1406, -6037.6279),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_4,
            polygon: [
                new Vector3_1.Vector3(261.8433, -58650.6445, 1563.3113),
                new Vector3_1.Vector3(1975.1986, -60236.9922, 1828.1429),
                new Vector3_1.Vector3(-521.9658, -61737.0078, 1819.592),
                new Vector3_1.Vector3(-2328.488, -60688.2852, 1807.7368),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_5,
            polygon: [
                new Vector3_1.Vector3(-21030.5684, -75868.8047, 7773.5581),
                new Vector3_1.Vector3(-17223.8086, -74608.4609, 7369.2476),
                new Vector3_1.Vector3(-13704.6406, -73675.3594, 6580.3604),
                new Vector3_1.Vector3(-12888.5059, -66931.8906, 3075.2371),
                new Vector3_1.Vector3(-13933.6436, -63078.918, 1842.4305),
                new Vector3_1.Vector3(-15931.25, -61105.2109, 1898.2777),
                new Vector3_1.Vector3(-17846.791, -61563.9688, 1623.005),
                new Vector3_1.Vector3(-17935.2773, -64070.5391, 1245.1376),
                new Vector3_1.Vector3(-20529.3574, -64348.2656, 1311.088),
                new Vector3_1.Vector3(-22557.5234, -62301.3164, 1459.426),
                new Vector3_1.Vector3(-23528.8184, -66531.3125, 1463.9713),
                new Vector3_1.Vector3(-22583.0078, -70670.3672, 2773.9763),
                new Vector3_1.Vector3(-21860.166, -74271.1563, 6359.6587),
                new Vector3_1.Vector3(-21823.9648, -75622.1016, 5778.5464),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_6,
            polygon: [
                new Vector3_1.Vector3(-26036.8223, -85991.9219, 1520.098),
                new Vector3_1.Vector3(-26331.6152, -82991.6719, 1597.5457),
                new Vector3_1.Vector3(-28102.1816, -79895.3906, 1377.6364),
                new Vector3_1.Vector3(-30402.6758, -79178.25, 1054.2084),
                new Vector3_1.Vector3(-32295.2441, -82637.2656, -133.5061),
                new Vector3_1.Vector3(-34538.0703, -82057.8359, -461.7071),
                new Vector3_1.Vector3(-36873.5977, -82363.2109, -674.8254),
                new Vector3_1.Vector3(-37906.8828, -83213.0078, 294.4159),
                new Vector3_1.Vector3(-39215.4766, -86236.6953, -46.4513),
                new Vector3_1.Vector3(-36096.5, -88535.7266, -1105.2725),
                new Vector3_1.Vector3(-36876.4727, -93121.1875, -1944.3849),
                new Vector3_1.Vector3(-34275.9531, -92831.8359, -1726.4039),
                new Vector3_1.Vector3(-30896.4336, -91574.9375, -1441.4125),
                new Vector3_1.Vector3(-27496.3086, -90247.0859, -643.3822),
                new Vector3_1.Vector3(-24766.8164, -88900.7031, -432.5928),
                new Vector3_1.Vector3(-25203.5508, -86553.2109, -1079.2014),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_7,
            polygon: [
                new Vector3_1.Vector3(-56670.332, -73579.3203, 1667.5702),
                new Vector3_1.Vector3(-55160.1875, -72591.2891, 1391.4326),
                new Vector3_1.Vector3(-57661.3281, -68124.1406, 685.5203),
                new Vector3_1.Vector3(-61704.582, -68929.2578, 295.7612),
                new Vector3_1.Vector3(-62774.5273, -71715.1172, -323.2258),
                new Vector3_1.Vector3(-61240.125, -74920.5156, -241.8684),
                new Vector3_1.Vector3(-58858.6914, -73781.5859, -5.6045),
                new Vector3_1.Vector3(-56624.4883, -73513.7109, -916.5244),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_8,
            polygon: [
                new Vector3_1.Vector3(-38395.4219, -56663.1445, 5155.3833),
                new Vector3_1.Vector3(-40406.1172, -55619.3438, 3722.9221),
                new Vector3_1.Vector3(-42494.1836, -55779.8398, 2775.9053),
                new Vector3_1.Vector3(-43113.6172, -58351.6523, 1879.4664),
                new Vector3_1.Vector3(-45082.0039, -61579.9297, 1360.7654),
                new Vector3_1.Vector3(-47156.1875, -64129.8633, 784.3412),
                new Vector3_1.Vector3(-44413.9648, -65911.8984, 652.2921),
                new Vector3_1.Vector3(-41858.4609, -64131.4961, 942.426),
                new Vector3_1.Vector3(-40246.2891, -60555.8398, 1460.9647),
                new Vector3_1.Vector3(-38143.5352, -57657.7031, 1516.6556),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_9,
            polygon: [
                new Vector3_1.Vector3(-45908.7148, -48679.6563, 4528.6035),
                new Vector3_1.Vector3(-44394.8164, -46308.4531, 4048.3369),
                new Vector3_1.Vector3(-45752.0469, -45204.9414, 3668.9697),
                new Vector3_1.Vector3(-47647.6992, -46446.4609, 3203.323),
                new Vector3_1.Vector3(-47612.1992, -47689.6289, 2865.8428),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_10,
            polygon: [
                new Vector3_1.Vector3(56160.2461, -82292.7422, 20025.375),
                new Vector3_1.Vector3(54177.1719, -82811.4922, 19476.1211),
                new Vector3_1.Vector3(53740.9453, -80742.1484, 18306.3691),
                new Vector3_1.Vector3(55482.9336, -79969.2109, 17706.752),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_11,
            polygon: [
                new Vector3_1.Vector3(106847.0938, -88495.4531, 20433.7617),
                new Vector3_1.Vector3(105020.9063, -85190.6016, 19027.2832),
                new Vector3_1.Vector3(99901.9766, -88758.3359, 18012.4551),
                new Vector3_1.Vector3(98596.4297, -93148.6406, 17998.707),
                new Vector3_1.Vector3(100171.7031, -96266.1953, 19822.3496),
                new Vector3_1.Vector3(104443.9844, -97987.0234, 22966.9922),
                new Vector3_1.Vector3(107858.1719, -97497.4375, 19590.5195),
                new Vector3_1.Vector3(110197.8203, -93764.5781, 16461.0938),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_12,
            polygon: [
                new Vector3_1.Vector3(73660.6719, -56743.2188, 13342.0459),
                new Vector3_1.Vector3(73061.3828, -58620.7344, 12718.1875),
                new Vector3_1.Vector3(71921.0625, -63043.9531, 13118.7764),
                new Vector3_1.Vector3(71928.7266, -65293.9023, 13137.4131),
                new Vector3_1.Vector3(74590.1094, -68656.0938, 12463.543),
                new Vector3_1.Vector3(77282.3906, -70257.7734, 12287.8271),
                new Vector3_1.Vector3(81197.3047, -72767.8438, 12082.7793),
                new Vector3_1.Vector3(84224.2031, -70139.9219, 12614.6084),
                new Vector3_1.Vector3(82805.0078, -66812.7969, 11623.9736),
                new Vector3_1.Vector3(79906.1875, -61986.9414, 11929.2813),
                new Vector3_1.Vector3(77247.0547, -58836.3945, 11246.6191),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_13,
            polygon: [
                new Vector3_1.Vector3(136432.3125, -93065.7188, 15955.1035),
                new Vector3_1.Vector3(136514.7813, -91834.2188, 15443.5273),
                new Vector3_1.Vector3(132284.0625, -91643.4453, 13836.0156),
                new Vector3_1.Vector3(128998.3516, -93334.375, 13066.833),
                new Vector3_1.Vector3(127492.2109, -95500.4922, 12937.5557),
                new Vector3_1.Vector3(128349.8906, -97545.1094, 12740.8252),
                new Vector3_1.Vector3(131411.0313, -97550.0234, 12404.0029),
                new Vector3_1.Vector3(134861.0469, -97089.3359, 10720.5283),
                new Vector3_1.Vector3(134976.9844, -95142.875, 10969.6494),
                new Vector3_1.Vector3(136574.6406, -93207.2344, 11023.374),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_14,
            polygon: [
                new Vector3_1.Vector3(149660.8906, -98169.8281, 17458.1602),
                new Vector3_1.Vector3(150454.6875, -95084.9219, 15841.2373),
                new Vector3_1.Vector3(156458.5156, -91492.4844, 14073.1563),
                new Vector3_1.Vector3(161325.0625, -95196.1172, 13334.5225),
                new Vector3_1.Vector3(162658.4375, -98228.9219, 12754.1338),
                new Vector3_1.Vector3(160058.2656, -101328.3984, 12243.0938),
                new Vector3_1.Vector3(160010.9375, -105705.5313, 11327.6289),
                new Vector3_1.Vector3(158722.4375, -105528.9375, 11329.4932),
                new Vector3_1.Vector3(155476.0313, -101694.9531, 11587.7119),
                new Vector3_1.Vector3(150897.6875, -101412.1328, 11998.3516),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_15,
            polygon: [
                new Vector3_1.Vector3(162757.5313, -106174.4453, 13906.3203),
                new Vector3_1.Vector3(163069.875, -108184.5859, 13301.2607),
                new Vector3_1.Vector3(165998.1563, -110908.7188, 12613.2461),
                new Vector3_1.Vector3(168992.1094, -109582.9766, 14113.1094),
                new Vector3_1.Vector3(170041.8594, -106921.8828, 13071.5703),
                new Vector3_1.Vector3(172550.9375, -103098.1328, 12673.6191),
                new Vector3_1.Vector3(177309.5781, -103146.5781, 13460.334),
                new Vector3_1.Vector3(178513.3281, -100123.7656, 11741.1777),
                new Vector3_1.Vector3(178139.0469, -96121.6563, 11686.5879),
                new Vector3_1.Vector3(176380.375, -91746.7734, 11614.8438),
                new Vector3_1.Vector3(175707.7813, -89029.1328, 16178.2598),
                new Vector3_1.Vector3(176388.1563, -84558.7656, 11664.251),
                new Vector3_1.Vector3(171746.3906, -82412.5547, 11075.6719),
                new Vector3_1.Vector3(170126.7188, -87172.8828, 14677.6797),
                new Vector3_1.Vector3(165695.1094, -85740.0469, 13728.0674),
                new Vector3_1.Vector3(163476.2031, -88326.6094, 13151.9746),
                new Vector3_1.Vector3(164707.6406, -91061.8281, 12697.207),
                new Vector3_1.Vector3(164899.0781, -93558.3281, 11838.7148),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_16,
            polygon: [
                new Vector3_1.Vector3(161582.75, -56864.8242, 11383.8242),
                new Vector3_1.Vector3(160221.0156, -59458.1563, 10579.6445),
                new Vector3_1.Vector3(160215.5313, -62125.8008, 9873.1016),
                new Vector3_1.Vector3(161208.0938, -63813.0156, 9362.5781),
                new Vector3_1.Vector3(162939.6719, -65926.8984, 16383.7441),
                new Vector3_1.Vector3(164997.6719, -65760.3906, 15220.9658),
                new Vector3_1.Vector3(167723.4531, -63495.957, 13934.9893),
                new Vector3_1.Vector3(168814.7188, -61119.0156, 13242.5586),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_17,
            polygon: [
                new Vector3_1.Vector3(138797.125, -27966.3203, -8088.04),
                new Vector3_1.Vector3(138805.875, -29658.1074, -8444.4463),
                new Vector3_1.Vector3(136310.3594, -29545.4141, -8984.7305),
                new Vector3_1.Vector3(134574.9219, -28988.7461, -9183.2969),
                new Vector3_1.Vector3(135627.9063, -26971.0137, -9498.7656),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_18,
            polygon: [
                new Vector3_1.Vector3(125025.1719, 10411.916, -1809.6243),
                new Vector3_1.Vector3(124501.9063, 13604.248, -2258.2151),
                new Vector3_1.Vector3(127642.0469, 15527.4482, -2927.6895),
                new Vector3_1.Vector3(130531.7266, 19972.1367, -4208.7476),
                new Vector3_1.Vector3(140166.4531, 13987.7559, -6431.1333),
                new Vector3_1.Vector3(138297.5156, 6867.2021, -7453.2397),
                new Vector3_1.Vector3(134724.5781, 4118.1152, -7203.6797),
                new Vector3_1.Vector3(127445.7734, 7454.2148, -8527.7061),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_19,
            polygon: [
                new Vector3_1.Vector3(147957.7656, 32394.3887, -9917.252),
                new Vector3_1.Vector3(144926.3281, 34422.8984, -10841.1934),
                new Vector3_1.Vector3(142927.8438, 32501.4023, -11216.7227),
                new Vector3_1.Vector3(142913.3281, 29509.1875, -11613.2236),
                new Vector3_1.Vector3(145717.8281, 28204.9102, -11124.5176),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_20,
            polygon: [
                new Vector3_1.Vector3(137077.5313, 29895.4121, 1344.674),
                new Vector3_1.Vector3(137074.6875, 23579.6973, 463.6454),
                new Vector3_1.Vector3(132192.0313, 23640.7129, -269.5358),
                new Vector3_1.Vector3(133858.5313, 36269.0742, -1784.2742),
                new Vector3_1.Vector3(140825.4219, 46899.9688, -8732.9297),
                new Vector3_1.Vector3(147287.9531, 48913.3242, -11114.3906),
                new Vector3_1.Vector3(149649.2969, 49660.8984, -12064.79),
                new Vector3_1.Vector3(149670.125, 46760.5977, -8236.585),
                new Vector3_1.Vector3(156057.4063, 44291.0156, -8936.0322),
                new Vector3_1.Vector3(154742.9063, 41307.3711, -9390.0498),
                new Vector3_1.Vector3(150231.5938, 39654.8008, -11163.1504),
                new Vector3_1.Vector3(146271.8594, 37961.3359, -8593.0342),
                new Vector3_1.Vector3(143286.1719, 34459.6055, -9383.3447),
                new Vector3_1.Vector3(141000.6719, 32100.8223, -9652.4492),
                new Vector3_1.Vector3(139362.2031, 31716.0, -9484.3232),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_21,
            polygon: [
                new Vector3_1.Vector3(116522.4922, 31990.4199, -5626.9702),
                new Vector3_1.Vector3(112465.1641, 31018.6152, -6427.041),
                new Vector3_1.Vector3(108888.6328, 30762.3711, -6973.9922),
                new Vector3_1.Vector3(107169.9688, 31363.0664, -7229.4692),
                new Vector3_1.Vector3(107826.4844, 33240.0, -7423.0449),
                new Vector3_1.Vector3(109614.6875, 34158.4844, -7716.7441),
                new Vector3_1.Vector3(110660.9922, 37393.6523, -8114.6719),
                new Vector3_1.Vector3(112898.3594, 37012.7891, -8671.8623),
                new Vector3_1.Vector3(116282.5156, 35329.207, -9870.8643),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_22,
            polygon: [
                new Vector3_1.Vector3(104266.1016, 99865.4453, -2482.3591),
                new Vector3_1.Vector3(106157.5469, 97459.9609, -2510.208),
                new Vector3_1.Vector3(110016.8984, 95422.3906, -2872.5396),
                new Vector3_1.Vector3(113970.6563, 95878.0234, -3796.7947),
                new Vector3_1.Vector3(115883.3359, 98923.8359, -4103.3657),
                new Vector3_1.Vector3(116954.8281, 103577.375, -7210.4814),
                new Vector3_1.Vector3(117250.8984, 108043.6563, -7598.3828),
                new Vector3_1.Vector3(120844.7109, 115197.3281, -7287.1836),
                new Vector3_1.Vector3(112826.6172, 115870.0859, -7271.5288),
                new Vector3_1.Vector3(111657.9922, 109398.0234, -7759.2334),
                new Vector3_1.Vector3(106943.5859, 107922.3984, -6417.1763),
                new Vector3_1.Vector3(102410.5234, 101875.1484, -2767.5178),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_23,
            polygon: [
                new Vector3_1.Vector3(31109.0254, 112246.1953, -5702.312),
                new Vector3_1.Vector3(28718.1914, 112078.3672, -6201.2715),
                new Vector3_1.Vector3(23876.9746, 109181.0469, -7007.7495),
                new Vector3_1.Vector3(23669.9688, 100519.0, -6209.8198),
                new Vector3_1.Vector3(31224.9141, 96984.3594, -7526.2832),
                new Vector3_1.Vector3(37062.918, 101802.6328, -8691.4424),
                new Vector3_1.Vector3(38994.0, 106191.6406, -5929.8037),
                new Vector3_1.Vector3(32088.0273, 111616.9688, -8681.9873),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_24,
            polygon: [
                new Vector3_1.Vector3(-35964.3828, 72060.5703, -9708.6055),
                new Vector3_1.Vector3(-41402.6016, 71811.5859, -10897.5801),
                new Vector3_1.Vector3(-41143.9492, 68494.7813, -11581.2178),
                new Vector3_1.Vector3(-42636.25, 67177.2422, -11697.5957),
                new Vector3_1.Vector3(-43688.2656, 65051.0391, -11869.3076),
                new Vector3_1.Vector3(-40575.5117, 60981.6914, -10391.9043),
                new Vector3_1.Vector3(-35807.8789, 58666.4609, -11263.6855),
                new Vector3_1.Vector3(-33501.7188, 58966.2617, -11166.4473),
                new Vector3_1.Vector3(-32226.207, 65432.5469, -12797.2607),
                new Vector3_1.Vector3(-34353.1797, 70930.5859, -9688.3018),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_25,
            polygon: [
                new Vector3_1.Vector3(-78398.5313, 3742.0796, -1244.0981),
                new Vector3_1.Vector3(-78466.5156, 8563.2373, -2814.5349),
                new Vector3_1.Vector3(-80623.375, 11397.2637, -3088.7363),
                new Vector3_1.Vector3(-84462.4375, 11522.3252, -3073.0474),
                new Vector3_1.Vector3(-85416.5469, 14745.7637, -2023.7363),
                new Vector3_1.Vector3(-88335.2266, 14149.335, -2594.5698),
                new Vector3_1.Vector3(-87316.9219, 7218.7075, -2093.8591),
                new Vector3_1.Vector3(-83525.3984, 3113.8633, -2864.0361),
                new Vector3_1.Vector3(-79662.1797, 1616.6725, -3343.0452),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_26,
            polygon: [
                new Vector3_1.Vector3(-81890.0703, 43034.0195, -9479.7344),
                new Vector3_1.Vector3(-85379.8125, 44616.6367, -10518.999),
                new Vector3_1.Vector3(-88816.9766, 43046.293, -10834.6328),
                new Vector3_1.Vector3(-86881.2109, 40200.7109, -10689.1611),
                new Vector3_1.Vector3(-83776.4922, 40110.6172, -11134.7881),
                new Vector3_1.Vector3(-81767.7891, 42200.7266, -11597.8164),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_27,
            polygon: [
                new Vector3_1.Vector3(-86794.0781, 52496.4023, -8804.7373),
                new Vector3_1.Vector3(-87991.6406, 51673.9688, -9111.8545),
                new Vector3_1.Vector3(-90845.5391, 55019.5234, -9582.0557),
                new Vector3_1.Vector3(-91515.7734, 58883.3516, -9449.3574),
                new Vector3_1.Vector3(-88995.4609, 58753.6367, -10220.9775),
                new Vector3_1.Vector3(-85197.5313, 55883.9453, -10585.5723),
                new Vector3_1.Vector3(-85507.8047, 54118.0703, -10642.7051),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_28,
            polygon: [
                new Vector3_1.Vector3(-112190.5156, 43508.9883, -3875.0691),
                new Vector3_1.Vector3(-112277.4453, 40224.7305, -3704.2957),
                new Vector3_1.Vector3(-115403.2969, 32101.0391, -2445.3274),
                new Vector3_1.Vector3(-119648.375, 36386.9063, -4856.063),
                new Vector3_1.Vector3(-119814.8125, 38641.0781, -6064.0215),
                new Vector3_1.Vector3(-121530.1875, 39452.7695, -6183.8198),
                new Vector3_1.Vector3(-126602.7109, 40270.5234, -3745.9063),
                new Vector3_1.Vector3(-125606.0625, 45343.8672, -6825.5801),
                new Vector3_1.Vector3(-121159.9531, 46351.6992, -7780.4639),
                new Vector3_1.Vector3(-113680.5391, 44892.8906, -5356.7231),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_29,
            polygon: [
                new Vector3_1.Vector3(-130187.6563, 40869.0195, -2820.9607),
                new Vector3_1.Vector3(-128988.4063, 37371.7383, -3525.0637),
                new Vector3_1.Vector3(-132741.4063, 34960.0586, -3674.9089),
                new Vector3_1.Vector3(-135347.3438, 36144.2422, -3342.3638),
                new Vector3_1.Vector3(-136435.7813, 38431.0234, -2717.3118),
                new Vector3_1.Vector3(-135718.4063, 41224.9453, -3041.2014),
                new Vector3_1.Vector3(-131781.7969, 41053.8086, -4429.1797),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_30,
            polygon: [
                new Vector3_1.Vector3(-96520.4766, 87621.7031, -7883.0278),
                new Vector3_1.Vector3(-99870.2188, 90240.0156, -8201.4736),
                new Vector3_1.Vector3(-102849.4844, 88518.5156, -7384.5635),
                new Vector3_1.Vector3(-105471.4531, 85439.25, -7648.2808),
                new Vector3_1.Vector3(-105880.2656, 81968.7109, -8928.3799),
                new Vector3_1.Vector3(-105754.5156, 77957.0156, -11025.8838),
                new Vector3_1.Vector3(-100246.1641, 78711.875, -11741.291),
                new Vector3_1.Vector3(-97236.3594, 74405.1172, -11840.3975),
                new Vector3_1.Vector3(-92255.1406, 75421.5078, -12412.3926),
                new Vector3_1.Vector3(-92238.0625, 78333.2031, -11726.8506),
                new Vector3_1.Vector3(-94352.3125, 79623.0469, -11856.249),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_31,
            polygon: [
                new Vector3_1.Vector3(-116108.3672, 93354.1797, -861.8149),
                new Vector3_1.Vector3(-115362.8203, 91245.6172, -1972.4233),
                new Vector3_1.Vector3(-117363.7266, 90508.1953, -2924.2471),
                new Vector3_1.Vector3(-118713.4766, 93504.9063, -4006.7251),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_32,
            polygon: [
                new Vector3_1.Vector3(-58168.25, 117482.75, -9210.6582),
                new Vector3_1.Vector3(-53359.457, 120298.7891, -10562.8008),
                new Vector3_1.Vector3(-51047.0586, 114138.9219, -12210.1621),
                new Vector3_1.Vector3(-53038.4414, 107317.8906, -12337.1553),
                new Vector3_1.Vector3(-57597.4766, 98667.8984, -12653.8975),
                new Vector3_1.Vector3(-62268.5977, 94198.3125, -12923.5537),
                new Vector3_1.Vector3(-67654.6016, 91944.6172, -13206.9258),
                new Vector3_1.Vector3(-75424.6641, 89526.9063, -13071.8506),
                new Vector3_1.Vector3(-80504.5313, 87978.9063, -13234.75),
                new Vector3_1.Vector3(-86022.9453, 89167.7813, -11502.7842),
                new Vector3_1.Vector3(-88198.5313, 92872.2344, -11136.7861),
                new Vector3_1.Vector3(-78286.2969, 97645.9219, -9006.0938),
                new Vector3_1.Vector3(-73790.5156, 100924.2422, -9987.5303),
                new Vector3_1.Vector3(-66832.4219, 105818.0469, -6735.4189),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_33,
            polygon: [
                new Vector3_1.Vector3(-60413.3477, 91898.4531, -11368.0674),
                new Vector3_1.Vector3(-57848.1055, 91314.3672, -11986.002),
                new Vector3_1.Vector3(-56427.5078, 92890.7109, -12641.8633),
                new Vector3_1.Vector3(-58463.457, 94780.5859, -12988.3232),
                new Vector3_1.Vector3(-60768.8477, 92603.1094, -13313.6543),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_34,
            polygon: [
                new Vector3_1.Vector3(-3110.4014, 66293.125, -8021.0918),
                new Vector3_1.Vector3(-2724.9878, 62843.3203, -8277.0889),
                new Vector3_1.Vector3(-6814.877, 62366.6133, -9732.6475),
                new Vector3_1.Vector3(-7755.8711, 65566.8594, -10536.1309),
                new Vector3_1.Vector3(-5933.2109, 66845.3125, -10700.6621),
            ],
            clientCheck: true,
        },
        {
            hash: type_1.PolygonHash.GREEN_ZONE_35,
            polygon: [
                new Vector3_1.Vector3(117034.0313, -83373.1719, 13162.1758),
                new Vector3_1.Vector3(112190.6953, -86113.4531, 12288.6377),
                new Vector3_1.Vector3(109319.3438, -84272.2813, 11978.9805),
                new Vector3_1.Vector3(109487.7031, -79795.3438, 12223.418),
                new Vector3_1.Vector3(112899.2266, -78851.8672, 12955.5693),
                new Vector3_1.Vector3(115883.1484, -80803.4219, 12363.9414),
            ],
            clientCheck: true,
        },
    ],
    [type_1.ZoneType.DEMORGAN]: [],
    [type_1.ZoneType.JAIL]: [],
    [type_1.ZoneType.HOSPITAL]: [],
};


/***/ }),

/***/ 6406:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PolygonEvents = void 0;
var PolygonEvents;
(function (PolygonEvents) {
    PolygonEvents["PlayerEnterZone"] = "polygon:playerEnterZone";
    PolygonEvents["PlayerExitZone"] = "polygon:playerExitZone";
})(PolygonEvents = exports.PolygonEvents || (exports.PolygonEvents = {}));


/***/ }),

/***/ 3297:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PolygonHash = exports.ZoneType = void 0;
var ZoneType;
(function (ZoneType) {
    ZoneType[ZoneType["FISHING"] = 0] = "FISHING";
    ZoneType[ZoneType["GREEN_ZONE"] = 1] = "GREEN_ZONE";
    ZoneType[ZoneType["DEMORGAN"] = 2] = "DEMORGAN";
    ZoneType[ZoneType["JAIL"] = 3] = "JAIL";
    ZoneType[ZoneType["HOSPITAL"] = 4] = "HOSPITAL";
})(ZoneType = exports.ZoneType || (exports.ZoneType = {}));
var PolygonHash;
(function (PolygonHash) {
    PolygonHash["FISHING_ZONE_1"] = "fishing_zone_1";
    PolygonHash["FISHING_ZONE_2"] = "fishing_zone_2";
    PolygonHash["FISHING_ZONE_3"] = "fishing_zone_3";
    PolygonHash["FISHING_ZONE_4"] = "fishing_zone_4";
    PolygonHash["FISHING_ZONE_5"] = "fishing_zone_5";
    PolygonHash["FISHING_ZONE_6"] = "fishing_zone_6";
    PolygonHash["FISHING_ZONE_7"] = "fishing_zone_7";
    PolygonHash["DEMORGAN_ZONE"] = "demorgan_zone";
    PolygonHash["JAIL_ZONE_1"] = "jail_zone_1";
    PolygonHash["HOSPITAL_ZONE_1"] = "hospital_zone_1";
    PolygonHash["HOSPITAL_ZONE_2"] = "hospital_zone_2";
    PolygonHash["HOSPITAL_ZONE_3"] = "hospital_zone_3";
    PolygonHash["GREEN_ZONE_1"] = "green_zone_1";
    PolygonHash["GREEN_ZONE_2"] = "green_zone_2";
    PolygonHash["GREEN_ZONE_3"] = "green_zone_3";
    PolygonHash["GREEN_ZONE_4"] = "green_zone_4";
    PolygonHash["GREEN_ZONE_5"] = "green_zone_5";
    PolygonHash["GREEN_ZONE_6"] = "green_zone_6";
    PolygonHash["GREEN_ZONE_7"] = "green_zone_7";
    PolygonHash["GREEN_ZONE_8"] = "green_zone_8";
    PolygonHash["GREEN_ZONE_9"] = "green_zone_9";
    PolygonHash["GREEN_ZONE_10"] = "green_zone_10";
    PolygonHash["GREEN_ZONE_11"] = "green_zone_11";
    PolygonHash["GREEN_ZONE_12"] = "green_zone_12";
    PolygonHash["GREEN_ZONE_13"] = "green_zone_13";
    PolygonHash["GREEN_ZONE_14"] = "green_zone_14";
    PolygonHash["GREEN_ZONE_15"] = "green_zone_15";
    PolygonHash["GREEN_ZONE_16"] = "green_zone_16";
    PolygonHash["GREEN_ZONE_17"] = "green_zone_17";
    PolygonHash["GREEN_ZONE_18"] = "green_zone_18";
    PolygonHash["GREEN_ZONE_19"] = "green_zone_19";
    PolygonHash["GREEN_ZONE_20"] = "green_zone_20";
    PolygonHash["GREEN_ZONE_21"] = "green_zone_21";
    PolygonHash["GREEN_ZONE_22"] = "green_zone_22";
    PolygonHash["GREEN_ZONE_23"] = "green_zone_23";
    PolygonHash["GREEN_ZONE_24"] = "green_zone_24";
    PolygonHash["GREEN_ZONE_25"] = "green_zone_25";
    PolygonHash["GREEN_ZONE_26"] = "green_zone_26";
    PolygonHash["GREEN_ZONE_27"] = "green_zone_27";
    PolygonHash["GREEN_ZONE_28"] = "green_zone_28";
    PolygonHash["GREEN_ZONE_29"] = "green_zone_29";
    PolygonHash["GREEN_ZONE_30"] = "green_zone_30";
    PolygonHash["GREEN_ZONE_31"] = "green_zone_31";
    PolygonHash["GREEN_ZONE_32"] = "green_zone_32";
    PolygonHash["GREEN_ZONE_33"] = "green_zone_33";
    PolygonHash["GREEN_ZONE_34"] = "green_zone_34";
    PolygonHash["GREEN_ZONE_35"] = "green_zone_35";
})(PolygonHash = exports.PolygonHash || (exports.PolygonHash = {}));


/***/ }),

/***/ 6940:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinderHash = void 0;
const SettingsId_1 = __webpack_require__(9373);
var BinderHash;
(function (BinderHash) {
    BinderHash["Default_W"] = "binder_default_w";
    BinderHash["Default_A"] = "binder_default_a";
    BinderHash["Default_S"] = "binder_default_s";
    BinderHash["Default_D"] = "binder_default_d";
    BinderHash["Default_Jump"] = "binder_default_jump";
    BinderHash["Default_Sprint"] = "binder_default_sprint";
    BinderHash["Default_Ctrl"] = "binder_default_ctrl";
    BinderHash["Default_Step"] = "binder_default_step";
    BinderHash["Default_Combat_Mode"] = "binder_default_combat_mode";
    BinderHash["Default_Attack_Right"] = "binder_default_attack_right";
    BinderHash["Default_Target"] = "binder_default_target";
    BinderHash["Default_Attack_Left"] = "binder_default_attack_left";
    BinderHash["Inventory"] = "binder_inventory";
    BinderHash["Skins"] = "binder_skins";
    BinderHash["EscMenu"] = "binder_escmenu";
    BinderHash["AnimationMenu"] = "binder_animation_menu";
    BinderHash["AnimationRadial"] = "binder_animation_radial";
    BinderHash["StopAnimation"] = "binder_stop_animation";
    BinderHash["Nicknames"] = "binder_nicknames";
    BinderHash["Cursor"] = "binder_cursor";
    BinderHash["Hud"] = "binder_hud";
    BinderHash["Chat"] = "binder_chat";
    BinderHash["Voice"] = "binder_voice";
    BinderHash["Colshape"] = "binder_colshape";
    BinderHash["Accept"] = "binder_accept";
    BinderHash["Cancel"] = "binder_cancel";
    BinderHash["Radial"] = "binder_radial";
    BinderHash["CharacterMenu"] = "binder_character_menu";
    BinderHash["FactionMenu"] = "binder_faction_menu";
    BinderHash["AdminPanel"] = "binder_admin_panel";
})(BinderHash = exports.BinderHash || (exports.BinderHash = {}));


/***/ }),

/***/ 1133:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinderModifiers = void 0;
var BinderModifiers;
(function (BinderModifiers) {
    BinderModifiers["SHIFT"] = "shift";
    BinderModifiers["CTRL"] = "ctrl";
    BinderModifiers["ALT"] = "alt";
})(BinderModifiers = exports.BinderModifiers || (exports.BinderModifiers = {}));


/***/ }),

/***/ 265:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BinderEvents = void 0;
var BinderEvents;
(function (BinderEvents) {
    BinderEvents["UpdateServerBinds"] = "binder:updateServerBinds";
    BinderEvents["PlayerActivateBind"] = "binder:playerActivateBind";
})(BinderEvents = exports.BinderEvents || (exports.BinderEvents = {}));


/***/ }),

/***/ 1220:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(6940), exports);
__exportStar(__webpack_require__(1133), exports);


/***/ }),

/***/ 5392:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HeadPartsExtraSlotsConfig = void 0;
const type_1 = __webpack_require__(8162);
const Genders_1 = __webpack_require__(6294);
exports.HeadPartsExtraSlotsConfig = {
    [type_1.Race.Argonian]: {
        [Genders_1.Gender.Male]: {
            2: [],
            3: [865149, 865146, 865150],
            4: [],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [],
            3: [923192, 865147, 865148, 923196, 923195, 923194, 923193],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.Breton]: {
        [Genders_1.Gender.Male]: {
            2: [651406, 148024, 147503],
            3: [
                630147, 630148, 630149, 333061, 332985, 332968, 332945, 332886, 332819, 332817, 332809, 332807, 332815, 332813, 332811, 916273,
                916274, 916275, 916282, 916415, 916418, 916423, 916479,
            ],
            4: [863896, 863900, 863890, 842944, 842619, 842625, 842621, 842617, 863874, 853350, 863879, 863881],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1011571, 1011572],
            3: [
                332195, 332022, 332021, 332018, 331984, 331971, 331963, 331962, 331961, 331960, 331959, 331958, 961128, 961129, 961130, 961131,
                961132, 961133, 961134, 961135, 1075989,
            ],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.DarkElf]: {
        [Genders_1.Gender.Male]: {
            2: [1011586, 1011582],
            3: [331840, 331834, 331820, 964593, 967031, 967033, 967034, 967081, 967093, 967264, 967266, 967267, 967268],
            4: [842944, 842619, 842625, 842621, 842617],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1084963, 1084962],
            3: [576135, 576137, 576140, 576150, 967608, 967609, 967610, 967611, 967612, 967613, 967614, 967615, 967616, 967617],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.HighElf]: {
        [Genders_1.Gender.Male]: {
            2: [1011585, 262682],
            3: [331840, 331834, 331820, 964593, 989851, 967031, 967033, 967034, 967081, 967093, 967264, 967266, 967267, 967268],
            4: [842944, 842619, 842625, 842621, 842617],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1084963, 1084962],
            3: [576135, 576137, 576140, 576150, 967608, 967609, 967610, 967611, 967612, 967613, 967614, 967615, 967616, 967617],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.Imperial]: {
        [Genders_1.Gender.Male]: {
            2: [651406, 148024, 147503],
            3: [
                630147, 630148, 630149, 333061, 332985, 332968, 332945, 332886, 332819, 332817, 332809, 332807, 332815, 332813, 332811, 916273,
                916274, 916275, 916282, 916415, 916418, 916423, 916479,
            ],
            4: [863896, 863900, 863890, 842944, 842619, 842625, 842621, 842617, 863874, 853350, 863879, 863881],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1011571, 1011572],
            3: [
                332195, 332022, 332021, 332018, 331984, 331971, 331963, 331962, 331961, 331960, 331959, 331958, 961128, 961129, 961130, 961131,
                961132, 961133, 961134, 961135, 1075989,
            ],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.Khajit]: {
        [Genders_1.Gender.Male]: {
            2: [],
            3: [865116, 976970, 865118, 865119, 865120, 865122, 865128],
            4: [865130, 865140, 865141],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [],
            3: [865112, 865109, 976983, 865114],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.Nord]: {
        [Genders_1.Gender.Male]: {
            2: [651406, 148024, 147503],
            3: [
                630147, 630148, 630149, 333061, 332985, 332968, 332945, 332886, 332819, 332817, 332809, 332807, 332815, 332813, 332811, 916273,
                916274, 916275, 916282, 916415, 916418, 916423, 916479,
            ],
            4: [863896, 863900, 863890, 842944, 842619, 842625, 842621, 842617, 863874, 853350, 863879, 863881],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1011571, 1011572],
            3: [
                332195, 332022, 332021, 332018, 331984, 331971, 331963, 331962, 331961, 331960, 331959, 331958, 961128, 961129, 961130, 961131,
                961132, 961133, 961134, 961135, 1075989,
            ],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.Orc]: {
        [Genders_1.Gender.Male]: {
            2: [262666, 1011578],
            3: [267603, 386968, 1078548, 387102],
            4: [863896, 863900, 863890, 842944, 842619, 842625, 842621, 842617, 863874, 853350, 863879, 863881],
            5: [],
            6: [1078802, 1078805, 1078804, 1078807, 1078806],
        },
        [Genders_1.Gender.Female]: {
            2: [1071957, 1071956],
            3: [548297, 548320, 548319, 548318, 548317, 548302, 1073825],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.Redguard]: {
        [Genders_1.Gender.Male]: {
            2: [651406, 148024, 147503],
            3: [
                630147, 630148, 630149, 333061, 332985, 332968, 332945, 332886, 332819, 332817, 332809, 332807, 332815, 332813, 332811, 916273,
                916274, 916275, 916282, 916415, 916418, 916423, 916479, 651455, 1067118, 1062642, 947566,
            ],
            4: [863896, 863900, 863890, 842944, 842619, 842625, 842621, 842617, 863874, 853350, 863879, 863881],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1011571, 1011572],
            3: [
                332195, 332022, 332021, 332018, 331984, 331971, 331963, 331962, 331961, 331960, 331959, 331958, 961128, 961129, 961130, 961131,
                961132, 961133, 961134, 961135, 1075989,
            ],
            4: [],
            5: [],
            6: [],
        },
    },
    [type_1.Race.WoodElf]: {
        [Genders_1.Gender.Male]: {
            2: [1011579, 1011578],
            3: [331840, 331834, 331820, 964593, 989851, 967031, 967033, 967034, 967081, 967093, 967264, 967266, 967267, 967268],
            4: [842944, 842619, 842625, 842621, 842617],
            5: [],
            6: [],
        },
        [Genders_1.Gender.Female]: {
            2: [1084962, 1084963],
            3: [576135, 576137, 576140, 576150, 967608, 967609, 967610, 967611, 967612, 967613, 967614, 967615, 967616, 967617],
            4: [],
            5: [],
            6: [],
        },
    },
};


/***/ }),

/***/ 5529:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createCharClothesConfig = exports.defaultClothesConfig = void 0;
const ItemHashes_1 = __webpack_require__(2388);
exports.defaultClothesConfig = {
    clothesTop: 0,
    clothesShoes: 0,
};
exports.createCharClothesConfig = {
    top: [null, ItemHashes_1.ItemHashes.COMMON_CLOTHER_1],
    shoes: [null, ItemHashes_1.ItemHashes.SHOES_1],
};


/***/ }),

/***/ 6294:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Gender = void 0;
var Gender;
(function (Gender) {
    Gender["Male"] = "Male";
    Gender["Female"] = "Female";
})(Gender = exports.Gender || (exports.Gender = {}));


/***/ }),

/***/ 2416:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CharEditorEvents = exports.CreateCharacterEvents = void 0;
var CreateCharacterEvents;
(function (CreateCharacterEvents) {
    CreateCharacterEvents["UpdateRace"] = "createCharacter:updateRace";
    CreateCharacterEvents["UpdateGender"] = "createCharacter:updateGender";
    CreateCharacterEvents["UpdatePart"] = "createCharacter:updatePart";
    CreateCharacterEvents["SetName"] = "createCharacter:setName";
    CreateCharacterEvents["Reset"] = "createCharacter:reset";
    CreateCharacterEvents["Back"] = "createCharacter:back";
    CreateCharacterEvents["SendMouseCoords"] = "createCharacter:sendMouseCoords";
    CreateCharacterEvents["OnClickTab"] = "createCharacter:onClickTab";
})(CreateCharacterEvents = exports.CreateCharacterEvents || (exports.CreateCharacterEvents = {}));
var CharEditorEvents;
(function (CharEditorEvents) {
    CharEditorEvents["Save"] = "chareditor:save";
    CharEditorEvents["BackToSelectCharacter"] = "chareditor:back";
    CharEditorEvents["CheckName"] = "chareditor:checkName";
    CharEditorEvents["ResponseCheckName"] = "chareditor:responseCheckName";
})(CharEditorEvents = exports.CharEditorEvents || (exports.CharEditorEvents = {}));


/***/ }),

/***/ 8349:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tab = void 0;
var Tab;
(function (Tab) {
    Tab[Tab["Race"] = 0] = "Race";
    Tab[Tab["Body"] = 1] = "Body";
    Tab[Tab["Head"] = 2] = "Head";
    Tab[Tab["Face"] = 3] = "Face";
    Tab[Tab["Eyes"] = 4] = "Eyes";
    Tab[Tab["Brows"] = 5] = "Brows";
    Tab[Tab["Mouth"] = 6] = "Mouth";
    Tab[Tab["Hairs"] = 7] = "Hairs";
    Tab[Tab["Clothes"] = 8] = "Clothes";
})(Tab = exports.Tab || (exports.Tab = {}));


/***/ }),

/***/ 2388:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemHashes = void 0;
var ItemHashes;
(function (ItemHashes) {
    ItemHashes["MEET"] = "meet";
    ItemHashes["COOKED_BEEF"] = "cooked_beef";
    ItemHashes["BOTTLE_OF_WATER"] = "bottle_of_water";
    ItemHashes["NORD_MEAD"] = "nord_mead";
    ItemHashes["IRON_INGOT"] = "iron_ingot";
    ItemHashes["ABECEAN_LONGFIN"] = "abecean_longfin";
    ItemHashes["SHARP"] = "sharp_finned";
    ItemHashes["IDE"] = "ide";
    ItemHashes["CHAR"] = "char";
    ItemHashes["SALMON"] = "salmon";
    ItemHashes["SALMON_FISHER"] = "fishing_salmon";
    ItemHashes["CHAOS_FISH"] = "chaos_fish";
    ItemHashes["SILVER_CARP"] = "silver_carp";
    ItemHashes["BEGINNER_ROD"] = "beginner_rod";
    ItemHashes["ROD_EXPERIENCED"] = "rod_experienced";
    ItemHashes["MASTER_ROD"] = "master_rod";
    ItemHashes["BACKPACK"] = "backpack";
    ItemHashes["BAIT"] = "bait";
    ItemHashes["WORM"] = "worm";
    ItemHashes["GEODE"] = "geode";
    ItemHashes["LEATHER_STRIPS"] = "leather_strips";
    ItemHashes["LEATHER"] = "leather";
    ItemHashes["STEEL_INGOT"] = "steel_ingot";
    ItemHashes["DWARVEN_METAL_INGOT"] = "dwarven_metal_ingot";
    ItemHashes["CORUNDIUM_INGOT"] = "corundum_ingot";
    ItemHashes["ORICHALCUM_INGOT"] = "orichalcum_ingot";
    ItemHashes["SILVER_INGOT"] = "silver_ingot";
    ItemHashes["GOLD_INGOT"] = "gold_ingot";
    ItemHashes["SHOVEL"] = "shovel";
    ItemHashes["QUICKSILVER_INGOT"] = "quicksilver_ingot";
    ItemHashes["REFINED_MOONSTONE"] = "refined_moonstone";
    ItemHashes["REFINED_MALACHITE"] = "refined_malachite";
    ItemHashes["EBONY_INGOT"] = "ebony_ingot";
    ItemHashes["DRAGON_SCALE"] = "dragon_scale";
    ItemHashes["DRAGON_BONE"] = "dragon_bone";
    ItemHashes["DAEDRA_HEART"] = "daedra_heart";
    ItemHashes["MATZE"] = "matze";
    ItemHashes["SALT"] = "salt";
    ItemHashes["LEEK"] = "leek";
    ItemHashes["SACK_OF_FLOUR"] = "sack_of_flour";
    ItemHashes["RAW_RABBIT_LEG"] = "raw_rabbit_leg";
    ItemHashes["VENISON"] = "venison";
    ItemHashes["TOMATO"] = "tomato";
    ItemHashes["POTATO"] = "potato";
    ItemHashes["CABBAGE"] = "cabbage";
    ItemHashes["APPLE"] = "apple";
    ItemHashes["EIDAR_CHEESE_WEDGE"] = "eidar_cheese_wedge";
    ItemHashes["GREELED_LEEKS"] = "grilled_leeks";
    ItemHashes["GREELED_CHICKEN_BREAST"] = "grilled_chicken_breast";
    ItemHashes["RABBIT_HAUNCH"] = "rabbit_haunch";
    ItemHashes["BREAD"] = "bread";
    ItemHashes["VENISON_STEW"] = "venison_stew";
    ItemHashes["BRAIDED_BREAD"] = "braided_bread";
    ItemHashes["CHICKEN_BREAST"] = "chicken_breast";
    ItemHashes["POTION_OF_THE_KNIGHT"] = "potion_of_the_knight";
    ItemHashes["CABBAGE_POTATO_SOUP"] = "cabbage_potato_soup";
    ItemHashes["TOMATO_SOUP"] = "tomato_soup";
    ItemHashes["APPLE_PIE"] = "apple_pie";
    ItemHashes["ELSWEYR_FOUNDUE"] = "elsweyr_fondue";
    ItemHashes["SWEETROLL"] = "sweetroll";
    ItemHashes["ALE"] = "ale";
    ItemHashes["WINE"] = "wine";
    ItemHashes["ARGONIAN_BLOODWINE"] = "argonian_bloodwine";
    ItemHashes["CYRODILIC_BRANDY"] = "cyrodilic_brandy";
    ItemHashes["JUG_OF_MILK"] = "jug_of_milk";
    ItemHashes["EMPTY_WINE_BOTTLE"] = "empty_wine_bottle";
    ItemHashes["PURPLE_MOUNTAIN_FLOWER"] = "purple_mountain_flower";
    ItemHashes["BLUE_MOUNTAIN_FLOWER"] = "blue_mountain_flower";
    ItemHashes["YELLOW_MOUNTAIN_FLOWER"] = "yellow_mountain_flower";
    ItemHashes["RED_MOUNTAIN_FLOWER"] = "red_mountain_flower";
    ItemHashes["SWAMP_FUNGAL_POD"] = "swamp_fungal_pod";
    ItemHashes["LAVENDER"] = "lavender";
    ItemHashes["JAZBAY_GRAPES"] = "jazbay_grapes";
    ItemHashes["MORA_TAPINELLA"] = "mora_tapinella";
    ItemHashes["NIRNROOT"] = "nirnroot";
    ItemHashes["TUNDRA_COTTON"] = "tundra_cotton";
    ItemHashes["SNOWBERRIES"] = "snowberries";
    ItemHashes["DRAGONS_TONQUE"] = "dragons_tongue";
    ItemHashes["BLISTERWORT"] = "blisterwort";
    ItemHashes["POTION_OF_MINOR_HEALING"] = "potion_of_minor_healing";
    ItemHashes["POTION_OF_HEALING"] = "potion_of_healing";
    ItemHashes["POTION_OF_ULTIMATE_HEALING"] = "potion_of_ultimate_healing";
    ItemHashes["POTION_OF_MINOR_STAMINA"] = "potion_of_minor_stamina";
    ItemHashes["POTION_OF_STAMINA"] = "potion_of_stamina";
    ItemHashes["POTION_OF_ULTIMATE_STAMINA"] = "potion_of_ultimate_stamina";
    ItemHashes["POTION_OF_HEALTH"] = "potion_of_health";
    ItemHashes["DRAUGHT_OF_HEALTH"] = "draught_of_health";
    ItemHashes["SOLUTION_OF_HEALTH"] = "solution_of_health";
    ItemHashes["CRIMSON_NIRNROOT"] = "crimson_nirnroot";
    ItemHashes["DRAUGHT_OF_THE_KNIGHT"] = "draught_of_the_knight";
    ItemHashes["PHILTER_OF_THE_KNIGHT"] = "philter_of_the_knight";
    ItemHashes["POTION_OF_RESIST_FIRE"] = "potion_of_resist_fire";
    ItemHashes["DRAUGHT_OF_RESIST_FIRE"] = "draught_of_resist_fire";
    ItemHashes["PHILTER_OF_RESIST_FIRE"] = "philter_of_resist_fire";
    ItemHashes["POTION_OF_RESIST_COLD"] = "potion_of_resist_cold";
    ItemHashes["DRAUGHT_OF_RESIST_COLD"] = "draught_of_resist_cold";
    ItemHashes["PHILTER_OF_RESIST_COLD"] = "philter_of_resist_cold";
    ItemHashes["POTION_OF_RESIST_SHOCK"] = "potion_of_resist_shock";
    ItemHashes["DRAUGHT_OF_RESIST_SHOCK"] = "draught_of_resist_shock";
    ItemHashes["PHILTER_OF_RESIST_SHOCK"] = "philter_of_resist_shock";
    ItemHashes["SKOOMA"] = "skooma";
    ItemHashes["MOON_SUGAR"] = "moon_sugar";
    ItemHashes["HANDS"] = "hands";
    ItemHashes["HIDE_HELMET"] = "hide_helmet";
    ItemHashes["HIDE_BOOTS"] = "hide_boots";
    ItemHashes["HIDE_ARMOR"] = "hide_armor";
    ItemHashes["HIDE_BRACERS"] = "hide_bracers";
    ItemHashes["HIDE_SHIELD"] = "hide_shield";
    ItemHashes["IRON_SWORD"] = "iron_sword";
    ItemHashes["IRON_DAGGER"] = "iron_dagger";
    ItemHashes["IRON_WARHAMMER"] = "iron_warhammer";
    ItemHashes["IRON_GREATSWORD"] = "iron_greatsword";
    ItemHashes["STAFF_OF_THE_HEALING_HAND"] = "staff_of_the_healing_hand";
    ItemHashes["STEEL_DAGGER"] = "steel_dagger";
    ItemHashes["ORCISH_DAGGER"] = "orcish_dagger";
    ItemHashes["DWARVEN_DAGGER"] = "dwarven_dagger";
    ItemHashes["ELVEN_DAGGER"] = "elven_dagger";
    ItemHashes["GLASS_DAGGER"] = "glass_dagger";
    ItemHashes["EBONY_DAGGER"] = "ebony_dagger";
    ItemHashes["DAEDRIC_DAGGER"] = "daedric_dagger";
    ItemHashes["DRAGONBONE_DAGGER"] = "dragonbone_dagger";
    ItemHashes["STEEL_SWORD"] = "steel_sword";
    ItemHashes["ORCISH_SWORD"] = "orcish_sword";
    ItemHashes["DWARVEN_SWORD"] = "dwarven_sword";
    ItemHashes["ELVEN_SWORD"] = "elven_sword";
    ItemHashes["GLASS_SWORD"] = "glass_sword";
    ItemHashes["EBONY_SWORD"] = "ebony_sword";
    ItemHashes["DAEDRIC_SWORD"] = "daedric_sword";
    ItemHashes["DRAGONBONE_SWORD"] = "dragonbone_sword";
    ItemHashes["IRON_MACE"] = "iron_mace";
    ItemHashes["STEEL_MACE"] = "steel_mace";
    ItemHashes["ORCISH_MACE"] = "orcish_mace";
    ItemHashes["DWARVEN_MACE"] = "dwarven_mace";
    ItemHashes["ELVEN_MACE"] = "elven_mace";
    ItemHashes["GLASS_MACE"] = "glass_mace";
    ItemHashes["EBONY_MACE"] = "ebony_mace";
    ItemHashes["DAEDRIC_MACE"] = "daedric_mace";
    ItemHashes["DRAGONBONE_MACE"] = "dragonbone_mace";
    ItemHashes["IRON_WAR_AXE"] = "iron_war_axe";
    ItemHashes["STEEL_WAR_AXE"] = "steel_war_axe";
    ItemHashes["ORCISH_WAR_AXE"] = "orcish_war_axe";
    ItemHashes["DWARVEN_WAR_AXE"] = "dwarven_war_axe";
    ItemHashes["ELVEN_WAR_AXE"] = "elven_war_axe";
    ItemHashes["GLASS_WAR_AXE"] = "glass_war_axe";
    ItemHashes["EBONY_WAR_AXE"] = "ebony_war_axe";
    ItemHashes["DAEDRIC_WAR_AXE"] = "daedric_war_axe";
    ItemHashes["DRAGONBONE_WAR_AXE"] = "dragonbone_war_axe";
    ItemHashes["STEEL_GREATSWORD"] = "steel_greatsword";
    ItemHashes["ORCISH_GREATSWORD"] = "orcish_greatsword";
    ItemHashes["DWARVEN_GREATSWORD"] = "dwarven_greatsword";
    ItemHashes["ELVEN_GREATSWORD"] = "elven_greatsword";
    ItemHashes["GLASS_GREATSWORD"] = "glass_greatsword";
    ItemHashes["EBONY_GREATSWORD"] = "ebony_greatsword";
    ItemHashes["DAEDRIC_GREATSWORD"] = "daedric_greatsword";
    ItemHashes["DRAGONBONE_GREATSWORD"] = "dragonbone_greatsword";
    ItemHashes["STEEL_WARHAMMER"] = "steel_warhammer";
    ItemHashes["ORCISH_WARHAMMER"] = "orcish_warhammer";
    ItemHashes["DWARVEN_WARHAMMER"] = "dwarven_warhammer";
    ItemHashes["ELVEN_WARHAMMER"] = "elven_warhammer";
    ItemHashes["GLASS_WARHAMMER"] = "glass_warhammer";
    ItemHashes["EBONY_WARHAMMER"] = "ebony_warhammer";
    ItemHashes["DAEDRIC_WARHAMMER"] = "daedric_warhammer";
    ItemHashes["DRAGONBONE_WARHAMMER"] = "dragonbone_warhammer";
    ItemHashes["IRON_BATTLEAXE"] = "iron_battleaxe";
    ItemHashes["STEEL_BATTLEAXE"] = "steel_battleaxe";
    ItemHashes["ORCISH_BATTLEAXE"] = "orcish_battleaxe";
    ItemHashes["DWARVEN_BATTLEAXE"] = "dwarven_battleaxe";
    ItemHashes["ELVEN_BATTLEAXE"] = "elven_battleaxe";
    ItemHashes["GLASS_BATTLEAXE"] = "glass_battleaxe";
    ItemHashes["EBONY_BATTLEAXE"] = "ebony_battleaxe";
    ItemHashes["DAEDRIC_BATTLEAXE"] = "daedric_battleaxe";
    ItemHashes["DRAGONBONE_BATTLEAXE"] = "dragonbone_battleaxe";
    ItemHashes["LONG_BOW"] = "long_bow";
    ItemHashes["HUNTING_BOW"] = "hunting_bow";
    ItemHashes["ORCISH_BOW"] = "orcish_bow";
    ItemHashes["DWARVEN_BOW"] = "dwarven_bow";
    ItemHashes["ELVEN_BOW"] = "elven_bow";
    ItemHashes["GLASS_BOW"] = "glass_bow";
    ItemHashes["EBONY_BOW"] = "ebony_bow";
    ItemHashes["DAEDRIC_BOW"] = "daedric_bow";
    ItemHashes["DRAGONBONE_BOW"] = "dragonbone_bow";
    ItemHashes["LEATHER_HELMET"] = "leather_helmet";
    ItemHashes["LEATHER_ARMOR"] = "leather_armor";
    ItemHashes["LEATHER_BRACERS"] = "leather_bracers";
    ItemHashes["LEATHER_BOOTS"] = "leather_boots";
    ItemHashes["ELVEN_HELMET"] = "elven_helmet";
    ItemHashes["ELVEN_ARMOR"] = "elven_armor";
    ItemHashes["ELVEN_BRACERS"] = "elven_bracers";
    ItemHashes["ELVEN_BOOTS"] = "elven_boots";
    ItemHashes["ELVEN_SHIELD"] = "elven_shield";
    ItemHashes["SCALED_HELMET"] = "scaled_helmet";
    ItemHashes["SCALED_ARMOR"] = "scaled_armor";
    ItemHashes["SCALED_BRACERS"] = "scaled_bracers";
    ItemHashes["SCALED_BOOTS"] = "scaled_boots";
    ItemHashes["GLASS_HELMET"] = "glass_helmet";
    ItemHashes["GLASS_ARMOR"] = "glass_armor";
    ItemHashes["GLASS_BRACERS"] = "glass_bracers";
    ItemHashes["GLASS_BOOTS"] = "glass_boots";
    ItemHashes["GLASS_SHIELD"] = "glass_shield";
    ItemHashes["DRAGONSCALE_HELMET"] = "dragonscale_helmet";
    ItemHashes["DRAGONSCALE_ARMOR"] = "dragonscale_armor";
    ItemHashes["DRAGONSCALE_BRACERS"] = "dragonscale_bracers";
    ItemHashes["DRAGONSCALE_BOOTS"] = "dragonscale_boots";
    ItemHashes["DRAGONSCALE_SHIELD"] = "dragonscale_shield";
    ItemHashes["IRON_HELMET"] = "iron_helmet";
    ItemHashes["IRON_ARMOR"] = "iron_armor";
    ItemHashes["IRON_BRACERS"] = "iron_bracers";
    ItemHashes["IRON_BOOTS"] = "iron_boots";
    ItemHashes["IRON_SHIELD"] = "iron_shield";
    ItemHashes["STEEL_HELMET"] = "steel_helmet";
    ItemHashes["STEEL_ARMOR"] = "steel_armor";
    ItemHashes["STEEL_BRACERS"] = "steel_bracers";
    ItemHashes["STEEL_BOOTS"] = "steel_boots";
    ItemHashes["STEEL_SHIELD"] = "steel_shield";
    ItemHashes["ORCISH_HELMET"] = "orcish_helmet";
    ItemHashes["ORCISH_ARMOR"] = "orcish_armor";
    ItemHashes["ORCISH_BRACERS"] = "orcish_bracers";
    ItemHashes["ORCISH_BOOTS"] = "orcish_boots";
    ItemHashes["ORCISH_SHIELD"] = "orcish_shield";
    ItemHashes["DWARVEN_HELMET"] = "dwarven_helmet";
    ItemHashes["DWARVEN_ARMOR"] = "dwarven_armor";
    ItemHashes["DWARVEN_BRACERS"] = "dwarven_bracers";
    ItemHashes["DWARVEN_BOOTS"] = "dwarven_boots";
    ItemHashes["DWARVEN_SHIELD"] = "dwarven_shield";
    ItemHashes["EBONY_HELMET"] = "ebony_helmet";
    ItemHashes["EBONY_ARMOR"] = "ebony_armor";
    ItemHashes["EBONY_BRACERS"] = "ebony_bracers";
    ItemHashes["EBONY_BOOTS"] = "ebony_boots";
    ItemHashes["EBONY_SHIELD"] = "ebony_shield";
    ItemHashes["DAEDRIC_HELMET"] = "daedric_helmet";
    ItemHashes["DAEDRIC_ARMOR"] = "daedric_armor";
    ItemHashes["DAEDRIC_BRACERS"] = "daedric_bracers";
    ItemHashes["DAEDRIC_BOOTS"] = "daedric_boots";
    ItemHashes["DAEDRIC_SHIELD"] = "daedric_shield";
    ItemHashes["DRAGONPLATE_HELMET"] = "dragonplate_helmet";
    ItemHashes["DRAGONPLATE_ARMOR"] = "dragonplate_armor";
    ItemHashes["DRAGONPLATE_BRACERS"] = "dragonplate_bracers";
    ItemHashes["DRAGONPLATE_BOOTS"] = "dragonplate_boots";
    ItemHashes["DRAGONPLATE_SHIELD"] = "dragonplate_shield";
    ItemHashes["NORDIC_CARVED_HELMET"] = "nordic_carved_helmet";
    ItemHashes["NORDIC_CARVED_ARMOR"] = "nordic_carved_armor";
    ItemHashes["NORDIC_CARVED_BRACERS"] = "nordic_carved_bracers";
    ItemHashes["NORDIC_CARVED_BOOTS"] = "nordic_carved_boots";
    ItemHashes["NORDIC_CARVED_SHIELD"] = "nordic_carved_shield";
    ItemHashes["JESTER_GLOVES"] = "jester_gloves";
    ItemHashes["JESTER_BOOTS"] = "jester_boots";
    ItemHashes["JESTER_HAT"] = "jester_hat";
    ItemHashes["JESTER_CLOTHER"] = "jester_clother";
    ItemHashes["CICERON_GLOVES"] = "ciceron_gloves";
    ItemHashes["CICERON_HAT"] = "ciceron_hat";
    ItemHashes["CICERON_CLOTHER"] = "ciceron_clother";
    ItemHashes["CICERON_BOOTS"] = "ciceron_boots";
    ItemHashes["WEDDING_BOOTS"] = "wedding_boots";
    ItemHashes["WEDDING_HAT"] = "wedding_hat";
    ItemHashes["WEDDING_CLOTHER"] = "wedding_clother";
    ItemHashes["ULFRIC_BRACERS"] = "ulfric_bracers";
    ItemHashes["ULFRIC_BOOTS"] = "ulfric_boots";
    ItemHashes["ULFRIC_CLOTHER"] = "ulfric_clother";
    ItemHashes["SHEOGATH_CLOTHER"] = "sheogath_clother";
    ItemHashes["RED_HOODWEAR"] = "red_hoodwear";
    ItemHashes["ELEGANT_CLOTHER"] = "elegant_clother";
    ItemHashes["ELEGANT_BOOTS"] = "elegant_boots";
    ItemHashes["NOCTURNAL_WEAR"] = "nocturnal_wear";
    ItemHashes["MYTHDAWN_WEAR_2"] = "mythdawn_wear_2";
    ItemHashes["MYTHDAWN_WEAR_1"] = "mythdawn_wear_1";
    ItemHashes["IMPERIAL_MANTLE"] = "imperial_mantle";
    ItemHashes["VAMPIRE_BOOTS"] = "vampire_boots";
    ItemHashes["TALMOR_BOOTS"] = "talmor_boots";
    ItemHashes["HOLY_BOOTS"] = "holy_boots";
    ItemHashes["SHOES_4"] = "shoes_4";
    ItemHashes["SHOES_3"] = "shoes_3";
    ItemHashes["SHOES_2"] = "shoes_2";
    ItemHashes["SHOES_1"] = "shoes_1";
    ItemHashes["REDGUARD_BOOTS"] = "redguard_boots";
    ItemHashes["TORN_BOOTS"] = "torn_boots";
    ItemHashes["PSIJIT_BOOTS"] = "psijit_boots";
    ItemHashes["SOFT_BOOTS"] = "soft_boots";
    ItemHashes["MYTHDAWN_BOOTS"] = "mythdawn_boots";
    ItemHashes["FUR_BOOTS"] = "fur_boots";
    ItemHashes["WINDINGS"] = "windings";
    ItemHashes["RICH_BOOTS_2"] = "rich_boots_2";
    ItemHashes["RICH_BOOTS_1"] = "rich_boots_1";
    ItemHashes["DUNMER_BOOTS"] = "dunmer_boots";
    ItemHashes["CULTIST_BOOTS"] = "cultist_boots";
    ItemHashes["SHACKLES_BOOTS"] = "shackles_boots";
    ItemHashes["COLLEGE_BOOTS_2"] = "college_boots_2";
    ItemHashes["COLLEGE_BOOTS_1"] = "college_boots_1";
    ItemHashes["BOOTS_12"] = "boots_12";
    ItemHashes["BOOTS_11"] = "boots_11";
    ItemHashes["BOOTS_10"] = "boots_10";
    ItemHashes["BOOTS_9"] = "boots_9";
    ItemHashes["BOOTS_8"] = "boots_8";
    ItemHashes["BOOTS_7"] = "boots_7";
    ItemHashes["BOOTS_6"] = "boots_6";
    ItemHashes["BOOTS_5"] = "boots_5";
    ItemHashes["BOOTS_4"] = "boots_4";
    ItemHashes["BOOTS_3"] = "boots_3";
    ItemHashes["BOOTS_2"] = "boots_2";
    ItemHashes["BOOTS_1"] = "boots_1";
    ItemHashes["VAMPIRE_GLOVES"] = "vampire_gloves";
    ItemHashes["TALMOR_GLOVES"] = "talmor_gloves";
    ItemHashes["PSIJIT_GLOVES"] = "psijit_gloves";
    ItemHashes["MYTHDAWN_GLOVES"] = "mythdawn_gloves";
    ItemHashes["MYTH_GLOVES"] = "myth_gloves";
    ItemHashes["GLOVES"] = "gloves";
    ItemHashes["TALMOR_WEAR"] = "talmor_wear";
    ItemHashes["RED_WEAR"] = "red_wear";
    ItemHashes["VERMINA_WEAR"] = "vermina_wear";
    ItemHashes["PSIJIT_WEAR"] = "psijit_wear";
    ItemHashes["HOLY_WEAR"] = "holy_wear";
    ItemHashes["MAGE_WEAR_2"] = "mage_wear_2";
    ItemHashes["MAGE_WEAR_1"] = "mage_wear_1";
    ItemHashes["HOLY_HOODWEAR"] = "holy_hoodwear";
    ItemHashes["HOLY_BLACKWEAR"] = "holy_blackwear";
    ItemHashes["GREYBEARDS_WEAR"] = "greybeards_wear";
    ItemHashes["GREEN_WEAR"] = "green_wear";
    ItemHashes["COLLEGE_ADEPT_WEAR"] = "college_adept_wear";
    ItemHashes["BLUE_WEAR"] = "blue_wear";
    ItemHashes["BLACK_WEAR"] = "black_wear";
    ItemHashes["VAMPIRE_WEAR"] = "vampire_wear";
    ItemHashes["INNWORKER_WEAR"] = "innworker_wear";
    ItemHashes["HOMESPUN_WEAR"] = "homespun_wear";
    ItemHashes["VERY_RICH_WEAR_2"] = "very_rich_wear_2";
    ItemHashes["REDGUARD_WEAR"] = "redguard_wear";
    ItemHashes["TORN_PANTS"] = "torn_pants";
    ItemHashes["TORN_WEAR"] = "torn_wear";
    ItemHashes["SHINY_WEAR"] = "shiny_wear";
    ItemHashes["VERY_RICH_WEAR"] = "very_rich_wear";
    ItemHashes["MOURNING_WEAR"] = "mourning_wear";
    ItemHashes["MINER_WEAR"] = "miner_wear";
    ItemHashes["HAMMERFIELD_WEAR"] = "hammerfield_wear";
    ItemHashes["FUR_WEAR_1"] = "fur_wear_1";
    ItemHashes["RED_BACKPACK"] = "red_backpack";
    ItemHashes["GREEN_BACKPACK"] = "green_backpack";
    ItemHashes["AMBER_BACKPACK"] = "amber_backpack";
    ItemHashes["PURPLE_BACKPACK"] = "purple_backpack";
    ItemHashes["BLUE_BACKPACK"] = "blue_backpack";
    ItemHashes["ALIKR_HOOD"] = "alikr_hood";
    ItemHashes["COOK_HAT"] = "cook_hat";
    ItemHashes["HOOD_1"] = "hood_1";
    ItemHashes["HAT_1"] = "hat_1";
    ItemHashes["RICHHAT_1"] = "richhat_1";
    ItemHashes["HAT_2"] = "hat_2";
    ItemHashes["HAT_3"] = "hat_3";
    ItemHashes["HAT_4"] = "hat_4";
    ItemHashes["MAGEHOOD_1"] = "magehood_1";
    ItemHashes["MAGEHOOD_2"] = "magehood_2";
    ItemHashes["MAGEHOOD_3"] = "magehood_3";
    ItemHashes["MOURNINGHAT_1"] = "mourninghat_1";
    ItemHashes["PSIJIT_HOOD"] = "psijit_hood";
    ItemHashes["TORN_HAT"] = "torn_hat";
    ItemHashes["REDGUARD_HOOD"] = "redguard_hood";
    ItemHashes["RELIGION_HOOD"] = "religion_hood";
    ItemHashes["VAMPIRE_HOOD"] = "vampire_hood";
    ItemHashes["CLOTHER_WITH_BELT"] = "clother_with_belt";
    ItemHashes["SMITH_APRON_1"] = "smith_apron_1";
    ItemHashes["SMITH_APRON_2"] = "smith_apron_2";
    ItemHashes["COOK_CLOTHER"] = "cook_clother";
    ItemHashes["COMMON_CLOTHER_1"] = "common_clother_1";
    ItemHashes["COMMON_CLOTHER_2"] = "common_clother_2";
    ItemHashes["COMMON_CLOTHER_3"] = "common_clother_3";
    ItemHashes["COMMON_CLOTHER_4"] = "common_clother_4";
    ItemHashes["COMMON_CLOTHER_5"] = "common_clother_5";
    ItemHashes["COMMON_CLOTHER_6"] = "common_clother_6";
    ItemHashes["COMMON_CLOTHER_7"] = "common_clother_7";
    ItemHashes["COMMON_CLOTHER_8"] = "common_clother_8";
    ItemHashes["COMMON_CLOTHER_9"] = "common_clother_9";
    ItemHashes["COMMON_CLOTHER_10"] = "common_clother_10";
    ItemHashes["COMMON_CLOTHER_11"] = "common_clother_11";
    ItemHashes["COMMON_CLOTHER_12"] = "common_clother_12";
    ItemHashes["DUNMER_CLOTHER"] = "dunmer_clother";
    ItemHashes["BEAUTY_WEAR"] = "beauty_wear";
    ItemHashes["EMBROIDERED_WEAR"] = "embroidered_wear";
    ItemHashes["RICH_WEAR_1"] = "rich_wear_1";
    ItemHashes["RICH_WEAR_2"] = "rich_wear_2";
    ItemHashes["RICH_WEAR_3"] = "rich_wear_3";
    ItemHashes["RICH_WEAR_4"] = "rich_wear_4";
    ItemHashes["RICH_WEAR_5"] = "rich_wear_5";
})(ItemHashes = exports.ItemHashes || (exports.ItemHashes = {}));


/***/ }),

/***/ 7187:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FOOD_AND_WATER_COOLDOWN = exports.FOOD_COOLDOWN = exports.DRINK_COOLDOWN = void 0;
const ItemHashes_1 = __webpack_require__(2388);
const itemType_1 = __webpack_require__(4405);
const ArmorItemConfig_1 = __webpack_require__(5710);
const CommonItemConfig_1 = __webpack_require__(8365);
const DrinksItemConfig_1 = __webpack_require__(8598);
const FoodAndWaterItemConfig_1 = __webpack_require__(5089);
const FoodItemConfig_1 = __webpack_require__(3970);
const RodItemConfig_1 = __webpack_require__(9416);
const ShovelItemConfig_1 = __webpack_require__(3287);
const WeaponItemConfig_1 = __webpack_require__(4209);
const BackpackItemConfig_1 = __webpack_require__(659);
const PotionsItemConfig_1 = __webpack_require__(8153);
const AlcoholItemConfig_1 = __webpack_require__(2082);
const PersonModules_1 = __webpack_require__(8877);
const PotionActionType_1 = __webpack_require__(3507);
exports.DRINK_COOLDOWN = 1000 * 5;
exports.FOOD_COOLDOWN = 1000 * 5;
exports.FOOD_AND_WATER_COOLDOWN = 1000 * 5;
const items = [
    new BackpackItemConfig_1.BackpackItemConfig({
        id: ItemHashes_1.ItemHashes.RED_BACKPACK,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Backpack,
        image: 'red_backpack',
        itemId: '09002301',
        weight: 4,
        info: BackpackItemConfig_1.BackpackItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Рюкзак с красной лампой',
            weight: 4,
            description: 'Самый простой рюкзак для увеличения переносимого веса. Имеет красную лампу.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Backpack],
            },
        },
    }),
    new BackpackItemConfig_1.BackpackItemConfig({
        id: ItemHashes_1.ItemHashes.GREEN_BACKPACK,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Backpack,
        image: 'green_backpack',
        itemId: '09002307',
        weight: 4,
        info: BackpackItemConfig_1.BackpackItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Рюкзак с зелёной лампой',
            weight: 4,
            description: 'Самый простой рюкзак для увеличения переносимого веса. Имеет зелёную лампу.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Backpack],
            },
        },
    }),
    new BackpackItemConfig_1.BackpackItemConfig({
        id: ItemHashes_1.ItemHashes.AMBER_BACKPACK,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Backpack,
        image: 'amber_backpack',
        itemId: '09002308',
        weight: 4,
        info: BackpackItemConfig_1.BackpackItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Рюкзак с янтарной лампой',
            weight: 4,
            description: 'Самый простой рюкзак для увеличения переносимого веса. Имеет янтарную лампу.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Backpack],
            },
        },
    }),
    new BackpackItemConfig_1.BackpackItemConfig({
        id: ItemHashes_1.ItemHashes.PURPLE_BACKPACK,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Backpack,
        image: 'purple_backpack',
        itemId: '09002309',
        weight: 4,
        info: BackpackItemConfig_1.BackpackItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Рюкзак с фиолетовой лампой',
            weight: 4,
            description: 'Самый простой рюкзак для увеличения переносимого веса. Имеет фиолетовую лампу.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Backpack],
            },
        },
    }),
    new BackpackItemConfig_1.BackpackItemConfig({
        id: ItemHashes_1.ItemHashes.BLUE_BACKPACK,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Backpack,
        image: 'blue_BACKPACK',
        itemId: '09000801',
        weight: 4,
        info: BackpackItemConfig_1.BackpackItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Рюкзак с синей лампой',
            weight: 4,
            description: 'Самый простой рюкзак для увеличения переносимого веса. Имеет синюю лампу.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Backpack],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ALIKR_HOOD,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0007BC1A',
        image: 'alikr_hood',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: "Аликр'ский капюшон",
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: "Плетеный из песчаных бурь и горячего ветра пустынь Хаммерфелла, этот капюшон олицетворяет выносливость и мудрость воинов Алик'р, защищая голову путешественника от солнца и песка.",
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COOK_HAT,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001BCA7',
        image: 'cook_hat',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Поварской колпак',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HOOD_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00017696',
        image: 'hood_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Капюшон',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HAT_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000330B3',
        image: 'hat_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICHHAT_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE84',
        image: 'richhat_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатый головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HAT_2,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0004223B',
        image: 'hat_2',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HAT_3,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000209AA',
        image: 'hat_3',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HAT_4,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000330BC',
        image: 'hat_4',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MAGEHOOD_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000D3DE8',
        image: 'magehood_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Капюшон мага',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MAGEHOOD_2,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0010D6A6',
        image: 'magehood_2',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Капюшон мага',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MAGEHOOD_3,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0010D6A7',
        image: 'magehood_3',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Капюшон мага',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MOURNINGHAT_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000646AB',
        image: 'mourninghat_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Траурный головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.PSIJIT_HOOD,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065B99',
        image: 'psijit_hood',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Капюшон Псиджиков',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TORN_HAT,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013104',
        image: 'torn_hat',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Рваная шапка',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.REDGUARD_HOOD,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E0DD2',
        image: 'redguard_hood',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Редгардский капюшон',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RELIGION_HOOD,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0403B04E',
        image: 'religion_hood',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Капюшон храмового жреца',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VAMPIRE_HOOD,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '02019ADE',
        image: 'religion_hood',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Капюшон вампира',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.CLOTHER_WITH_BELT,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001BE1A',
        image: 'clother_with_belt',
        weight: 10,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда с поясом',
            weight: 10,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SMITH_APRON_1,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0005B69F',
        image: 'smith_apron_1',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Фартук кузнеца',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SMITH_APRON_2,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006FF37',
        image: 'smith_apron_2',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Фартук кузнеца',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COOK_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001BC82',
        image: 'cook_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Поварская одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_1,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000F1229',
        image: 'hide_armor',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_2,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000209A6',
        image: 'common_clother_2',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_3,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006C1DA',
        image: 'common_clother_3',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_4,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00017695',
        image: 'common_clother_4',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_5,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006C1D9',
        image: 'common_clother_5',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_6,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006C1D8',
        image: 'common_clother_6',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_7,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0003452E',
        image: 'common_clother_7',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_8,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000261C0',
        image: 'common_clother_8',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_9,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0005B6A1',
        image: 'common_clother_9',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_10,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006FF38',
        image: 'common_clother_10',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_11,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0004223C',
        image: 'common_clother_11',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COMMON_CLOTHER_12,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006FF45',
        image: 'common_clother_12',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда ',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DUNMER_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0203706a',
        image: 'Dunmer_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Наряд данмера',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BEAUTY_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E84C4',
        image: 'beauty_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Украшенное одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.EMBROIDERED_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000EAD49',
        image: 'embroidered_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Расшитый наряд',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_WEAR_1,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE80',
        image: 'rich_wear_1',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатая одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_WEAR_2,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00086991',
        image: 'rich_wear_2',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатая одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_WEAR_3,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000F8713',
        image: 'rich_wear_3',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатая одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_WEAR_4,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000F8715',
        image: 'rich_wear_4',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатая одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_WEAR_5,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE76',
        image: 'rich_wear_5',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатая одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.FUR_WEAR_1,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0008698C',
        image: 'rich_wear_5',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Плащ с меховой оторочкой',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HAMMERFIELD_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0007BC19',
        image: 'hammerfield_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Хаммерфелльская одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MINER_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00080697',
        image: 'miner_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Шахтерская одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MOURNING_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000646A7',
        image: 'mourning_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Траурная одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VERY_RICH_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0005DB7B',
        image: 'very_rich_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Роскошная одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHINY_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E9EB5',
        image: 'shiny_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Наряд из Сияющих одежд',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TORN_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013105',
        image: 'torn_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Рваный балахон',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TORN_PANTS,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0008F19A',
        image: 'torn_pants',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Рваные штаны',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.REDGUARD_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E0DD0',
        image: 'redguard_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Редгардская одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VERY_RICH_WEAR_2,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E84C6',
        image: 'very_rich_wear_2',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Изящный наряд',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HOMESPUN_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0003C9FE',
        image: 'homespun_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Домотканая одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.INNWORKER_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000D191F',
        image: 'innworker_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда трактирщика',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VAMPIRE_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '02019ADF',
        image: 'vampire_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Одеяние вампира',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BLACK_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00106661',
        image: 'black_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Чёрное одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BLUE_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000A199B',
        image: 'blue_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Синее одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COLLEGE_ADEPT_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000D3DEA',
        image: 'college_adept_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одеяние Адепта Коллегии',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GREEN_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0310CFF0',
        image: 'green_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Зелёное одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GREYBEARDS_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00036A44',
        image: 'greybeards_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Зелёное одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HOLY_BLACKWEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00107108',
        image: 'holy_blackwear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Чёрное одеяние с капюшоном',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HOLY_HOODWEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00107106',
        image: 'holy_hoodwear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Монашеская ряса с капюшоном',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MAGE_WEAR_1,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006B46B',
        image: 'mage_wear_1',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Одеяние мага',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MAGE_WEAR_2,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006B46B',
        image: 'mage_wear_2',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Одеяние мага',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HOLY_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000BACF3',
        image: 'holy_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Монашеская ряса',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.PSIJIT_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065B94',
        image: 'psijit_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Одеяние псиджиков',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VERMINA_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E739B',
        image: 'vermina_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одеяние Вермины',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RED_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0310CFF2',
        image: 'red_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Красное одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TALMOR_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065BBF',
        image: 'talmor_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Талморское одеяние',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000261C1',
        image: 'gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Перчатки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MYTH_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00026C3B',
        image: 'myth_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Мистические настроечные перчатки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MYTHDAWN_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000B145B',
        image: 'mythdawn_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Перчатки Мифического Рассвета',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.PSIJIT_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065B9D',
        image: 'psijit_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Перчатки Псиджиков',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TALMOR_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065BB3',
        image: 'talmor_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Талморские перчатки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VAMPIRE_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '02019AE3',
        image: 'vampire_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Вампирские перчатки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001BE1B',
        image: 'boots_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_2,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000209A5',
        image: 'boots_2',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_3,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000261BD',
        image: 'boots_3',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_4,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0003452F',
        image: 'boots_4',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_5,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006B46C',
        image: 'boots_5',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_6,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000D1921',
        image: 'boots_6',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_7,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000BACD7',
        image: 'boots_7',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_8,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000C5D12',
        image: 'boots_8',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_9,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E0DD4',
        image: 'boots_9',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_10,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0004223D',
        image: 'boots_10',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_11,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00080699',
        image: 'boots_11',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.BOOTS_12,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000C36E8',
        image: 'boots_12',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COLLEGE_BOOTS_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0010E2CE',
        image: 'college_boots_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги ученика Коллегии',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.COLLEGE_BOOTS_2,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0010E2DC',
        image: 'college_boots_2',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги ученика Коллегии',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHACKLES_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE78',
        image: 'shackles_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги с оковкой',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.CULTIST_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '02037b8E',
        image: 'cultist_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги члена культа',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DUNMER_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0203705A',
        image: 'dunmer_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Ботинки данмера',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_BOOTS_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00086993',
        image: 'rich_boots_1',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатые сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RICH_BOOTS_2,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE82',
        image: 'rich_boots_2',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Богатые сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.WINDINGS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0003CA00',
        image: 'windings',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Ножные обмотки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.FUR_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0005DB7E',
        image: 'fur_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги на меху',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MYTHDAWN_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000B1460',
        image: 'dunmer_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Ботинки Мифического Рассвета',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SOFT_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0008698E',
        image: 'soft_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Мягкие сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.PSIJIT_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065B9B',
        image: 'psijit_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги Псиджиков',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TORN_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013106',
        image: 'torn_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Рваные сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.REDGUARD_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0007BC15',
        image: 'redguard_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Редгардские сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHOES_1,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00018801',
        image: 'hide_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Ботинки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHOES_2,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0005B6A0',
        image: 'shoes_2',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Ботинки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHOES_3,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E80A8',
        image: 'shoes_3',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Ботинки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHOES_4,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0005b69E',
        image: 'shoes_4',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Ботинки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HOLY_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0403B04B',
        image: 'holy_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сапоги храмового жреца',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.TALMOR_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00065BAC',
        image: 'holy_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Талморские сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.VAMPIRE_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '02019AE1',
        image: 'holy_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Вампирские сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.IMPERIAL_MANTLE,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00015516',
        image: 'imperial_mantle',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Императорская мантия',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MYTHDAWN_WEAR_1,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000B144D',
        image: 'mythdawn_wear_1',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Одеяние Мифического Рассвета',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.MYTHDAWN_WEAR_2,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000B144D',
        image: 'mythdawn_wear_2',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Одеяние Мифического Рассвета',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.NOCTURNAL_WEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00088952',
        image: 'nocturnal_wear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Одежда Ноктюрнал',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELEGANT_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E40DE',
        image: 'elegant_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Нарядные ботинки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELEGANT_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000E40DF',
        image: 'elegant_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Нарядная одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.RED_HOODWEAR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0210CFEB',
        image: 'red_hoodwear',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Красное одеяние с капюшоном',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SHEOGATH_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000C7CBB',
        image: 'sheogath_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Наряд Шеогората',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ULFRIC_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00062303',
        image: 'ulfric_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Одежда Ульфрика',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ULFRIC_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00062311',
        image: 'ulfric_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Сапоги Ульфрика',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ULFRIC_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006230B',
        image: 'ulfric_bracers',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Наручи Ульфрика',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.WEDDING_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00088956',
        image: 'wedding_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Свадебный наряд',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.WEDDING_HAT,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0008895A',
        image: 'wedding_hat',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Свадебный венец',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.WEDDING_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00088958',
        image: 'wedding_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Свадебные сандалии',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.CICERON_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006492C',
        image: 'ciceron_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Одежда Цицерона',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.CICERON_HAT,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006492E',
        image: 'ciceron_hat',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Головной убор Цицерона',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.CICERON_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0006492A',
        image: 'ciceron_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Сапоги Цицерона',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.CICERON_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00088958',
        image: 'ciceron_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Перчатки Цицерона',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.JESTER_CLOTHER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE6E',
        image: 'jester_clother',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Шутовская одежда',
            weight: 5,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.JESTER_HAT,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE72',
        image: 'jester_hat',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Шутовской головной убор',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.JESTER_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE70',
        image: 'jester_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Шутовские сапоги',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.JESTER_GLOVES,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '000CEE74',
        image: 'jester_gloves',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Шутовские перчатки',
            weight: 3,
            type: itemType_1.ArmorItemType.Clothes,
            description: '',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_MINOR_HEALING,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_minor_healing',
        action: {
            type: PotionActionType_1.PotionsActionType.RecoveryHealth,
            value: 25,
        },
        weight: 0.5,
        itemId: '0003EADD',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Слабое зелье лечения',
            action: {
                title: 'Слабое зелье лечения',
                value: '25',
            },
            weight: 0.5,
            description: 'Восстанавливает 25 ед. здоровья.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_HEALING,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_healing',
        action: {
            type: PotionActionType_1.PotionsActionType.RecoveryHealth,
            value: 50,
        },
        itemId: '0003EADD',
        weight: 0.5,
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Зелье лечения',
            action: {
                title: 'Зелье лечения',
                value: '50',
            },
            weight: 0.5,
            description: 'Восстанавливает 50 ед. здоровья.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_ULTIMATE_HEALING,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_ultimate_healing',
        action: {
            type: PotionActionType_1.PotionsActionType.RecoveryHealth,
            value: PersonModules_1.MAXIMUM_HEALTH_OF_PLAYER,
        },
        weight: 0.5,
        itemId: '0003EAE3',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Идеальное зелье лечения',
            action: {
                title: 'Идеальное зелье лечения',
                value: 'Полностью восстанавливает здоровье.',
            },
            weight: 0.5,
            description: 'Полностью восстанавливает здоровье.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_MINOR_STAMINA,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_minor_stamina',
        action: {
            type: PotionActionType_1.PotionsActionType.RecoveryStamina,
            value: 50,
        },
        weight: 0.5,
        itemId: '0003EAE5',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Слабое зелье выносливости',
            action: {
                title: 'Слабое зелье выносливости',
                value: '50',
            },
            weight: 0.5,
            description: 'Восстанавливает 50 ед. выносливости.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_STAMINA,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_stamina',
        action: {
            type: PotionActionType_1.PotionsActionType.RecoveryStamina,
            value: 75,
        },
        weight: 0.5,
        itemId: '0003EAE7',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Зелье выносливости',
            action: {
                title: 'Зелье выносливости',
                value: '75',
            },
            weight: 0.5,
            description: 'Восстанавливает 75 ед. выносливости.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_ULTIMATE_STAMINA,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_ultimate_stamina',
        action: {
            type: PotionActionType_1.PotionsActionType.RecoveryStamina,
            value: PersonModules_1.MAXIMUM_PLAYER_STAMIN,
        },
        weight: 0.5,
        itemId: '0003EAE8',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Идеальное зелье выносливости',
            action: {
                title: 'Идеальное зелье выносливости',
                value: 'Полностью восстанавливает выносливость.',
            },
            weight: 0.5,
            description: 'Полностью восстанавливает выносливость.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_HEALTH,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_health',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseHealth,
            value: 20,
            time: 600,
        },
        weight: 0.5,
        itemId: '0003EAF2',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Зелье здоровья',
            action: {
                title: 'Зелье здоровья',
                value: '20',
            },
            weight: 0.5,
            description: 'Увеличивает запас здоровья на 20 ед. на 10 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.DRAUGHT_OF_HEALTH,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'draught_of_health',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseHealth,
            value: 35,
            time: 900,
        },
        weight: 0.5,
        itemId: '0003EAF4',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Микстура здоровья',
            action: {
                title: 'Микстура здоровья',
                value: '35',
            },
            weight: 0.5,
            description: 'Увеличивает запас здоровья на 35 ед. на 15 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.SOLUTION_OF_HEALTH,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'solution_of_health',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseHealth,
            value: 50,
            time: 1800,
        },
        weight: 0.5,
        itemId: '0003EAF5',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Эликсир здоровья',
            action: {
                title: 'Эликсир здоровья',
                value: '50',
            },
            weight: 0.5,
            description: 'Увеличивает запас здоровья на 50 ед. на 30 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_THE_KNIGHT,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_the_knight',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseDefense,
            value: 10,
            time: 600,
        },
        weight: 0.5,
        itemId: '0003EB2F',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Зелье рыцаря',
            action: {
                title: 'Зелье рыцаря',
                value: '10',
            },
            weight: 0.5,
            description: 'Увеличивает физическую защиту на 10 ед. на 10 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.DRAUGHT_OF_THE_KNIGHT,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'draught_of_the_knight',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseDefense,
            value: 20,
            time: 900,
        },
        weight: 0.5,
        itemId: '0003EB2F',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Микстура рыцаря',
            action: {
                title: 'Микстура',
                value: '20',
            },
            weight: 0.5,
            description: 'Увеличивает физическую защиту на 20 ед. на 15 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.PHILTER_OF_THE_KNIGHT,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'philter_of_the_knight',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseDefense,
            value: 30,
            time: 1800,
        },
        weight: 0.5,
        itemId: '0003EB2F',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Снадобье рыцаря',
            action: {
                title: 'Снадобье рыцаря',
                value: '30',
            },
            weight: 0.5,
            description: 'Увеличивает физическую защиту на 30 ед. на 30 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_RESIST_FIRE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_resist_fire',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseFireDefense,
            value: 10,
            time: 600,
        },
        weight: 0.5,
        itemId: '00039B4A',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Зелье сопротивления огню',
            action: {
                title: 'Зелье сопротивления огню',
                value: '10',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от огня на 10 ед. на 10 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.DRAUGHT_OF_RESIST_FIRE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'draught_of_resist_fire',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseFireDefense,
            value: 20,
            time: 900,
        },
        weight: 0.5,
        itemId: '00039B4A',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Микстура сопротивления огню',
            action: {
                title: 'Микстура сопротивления огню',
                value: '20',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от огня на 20 ед. на 15 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.PHILTER_OF_RESIST_FIRE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'philter_of_resist_fire',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseFireDefense,
            value: 30,
            time: 1800,
        },
        weight: 0.5,
        itemId: '00039B4A',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Снадобье сопротивления огню',
            action: {
                title: 'Снадобье сопротивления огню',
                value: '30',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от огня на 30 ед. на 30 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_RESIST_COLD,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_resist_cold',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseColdDefense,
            value: 10,
            time: 600,
        },
        weight: 0.5,
        itemId: '00039B8A',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Зелье сопротивления холоду',
            action: {
                title: 'Зелье сопротивления холоду',
                value: '10',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от холода на 10 ед. на 10 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.DRAUGHT_OF_RESIST_COLD,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'draught_of_resist_cold',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseColdDefense,
            value: 20,
            time: 900,
        },
        weight: 0.5,
        itemId: '00039B8A',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Микстура сопротивления холоду',
            action: {
                title: 'Микстура сопротивления холоду',
                value: '20',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от холода на 20 ед. на 15 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.PHILTER_OF_RESIST_COLD,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'philter_of_resist_cold',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseColdDefense,
            value: 30,
            time: 1800,
        },
        weight: 0.5,
        itemId: '0003EAF0',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Снадобье сопротивления холоду',
            action: {
                title: 'Снадобье сопротивления холоду',
                value: '30',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от холода на 30 ед. на 30 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.POTION_OF_RESIST_SHOCK,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'potion_of_resist_shock',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseShockDefense,
            value: 10,
            time: 600,
        },
        weight: 0.5,
        itemId: '00039BE1',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Зелье сопротивления электричеству',
            action: {
                title: 'Зелье сопротивления электричеству',
                value: '10',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от электричества на 10 ед. на 10 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.DRAUGHT_OF_RESIST_SHOCK,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'draught_of_resist_shock',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseShockDefense,
            value: 20,
            time: 900,
        },
        weight: 0.5,
        itemId: '00039BE1',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Микстура сопротивления электричеству',
            action: {
                title: 'Микстура сопротивления электричеству',
                value: '20',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от электричества на 20 ед. на 15 минут.',
        }),
    }),
    new PotionsItemConfig_1.PotionsItemConfig({
        id: ItemHashes_1.ItemHashes.PHILTER_OF_RESIST_SHOCK,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Potions,
        image: 'philter_of_resist_shock',
        action: {
            type: PotionActionType_1.PotionsActionType.IncreaseShockDefense,
            value: 30,
            time: 1800,
        },
        weight: 0.5,
        itemId: '00039BE1',
        info: PotionsItemConfig_1.PotionsItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Снадобье сопротивления электричеству',
            action: {
                title: 'Снадобье сопротивления электричеству',
                value: '30',
            },
            weight: 0.5,
            description: 'Увеличивает защиту от электричества на 30 ед. на 30 минут.',
        }),
    }),
    new DrinksItemConfig_1.DrinksItemConfig({
        id: ItemHashes_1.ItemHashes.BOTTLE_OF_WATER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'bottle_of_water',
        thirstValue: 50,
        weight: 1,
        itemId: '000A9661',
        info: DrinksItemConfig_1.DrinksItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Бутылка воды',
            thirstValue: 50,
            weight: 1,
            description: 'Прозрачная и освежающая, эта вода из чистейших источников утоляет жажду путника и возвращает его к жизни в пути к новым приключениям.',
        }),
        option: { maxStack: 20 },
    }),
    new AlcoholItemConfig_1.AlcoholsItemConfig({
        id: ItemHashes_1.ItemHashes.MATZE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'matze',
        thirstValue: 10,
        weight: 1,
        itemId: '00034C5E',
        info: AlcoholItemConfig_1.AlcoholsItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Мацт',
            thirstValue: 10,
            weight: 1,
            description: 'Данмерское пиво, сваренное из перебродившего солёного риса.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.COOKED_BEEF,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'cooked_beef',
        eatValue: 35,
        weight: 0.5,
        itemId: '000721E8',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Отварная говядина',
            eatValue: 35,
            weight: 0.5,
            description: 'Сытный и ароматный кусок варёного мяса.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.SALT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'salt',
        value: { thirstValue: -10, hungersValue: 0 },
        weight: 0.5,
        itemId: '0003AD5F',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Соль',
            value: { thirstValue: -10, hungersValue: 0 },
            weight: 0.5,
            description: 'Незаменимый ингредиент для приготовления еды. В чистом виде употреблять не рекомендуется.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.LEEK,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'leek',
        eatValue: 10,
        weight: 0.5,
        itemId: '000669A5',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Лук-порей',
            eatValue: 10,
            weight: 0.5,
            description: 'Холодостойкий овощ, прекрасно растущий в Скайриме. Плохо насыщает в сыром виде.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.SACK_OF_FLOUR,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'sack_of_flour',
        eatValue: 12,
        weight: 0.5,
        itemId: '00097F68',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Мешок муки',
            eatValue: 12,
            weight: 0.5,
            description: 'Пшеничная мука высшего качества. Подходит для изготовления любых хлебобулочных изделий.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.RAW_RABBIT_LEG,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'raw_rabbit_leg',
        eatValue: 12,
        weight: 0.5,
        itemId: '00065C9E',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сырая кроличья ножка',
            eatValue: 12,
            weight: 0.5,
            description: 'Вкусное и нежное мясо дикого кролика.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.VENISON,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'venison',
        eatValue: 14,
        weight: 0.5,
        itemId: '000669A2',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Оленина',
            eatValue: 14,
            weight: 0.5,
            description: 'Вкуснейшее лакомство, высоко ценимое гурманами.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.TOMATO,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'tomato',
        eatValue: 16,
        weight: 0.5,
        itemId: '00064B42',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Помидор',
            eatValue: 16,
            weight: 0.5,
            description: 'Довольно редкий для Скайрима теплолюбивый овощ. В основном завозится из южных провинций.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.POTATO,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'potato',
        eatValue: 16,
        weight: 0.5,
        itemId: '00064B41',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Картофель',
            eatValue: 16,
            weight: 0.5,
            description: 'Неприхотливое растение, приспособившееся к суровому местному климату.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.CABBAGE,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'cabbage',
        eatValue: 16,
        weight: 0.5,
        itemId: '00064B3F',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Капуста',
            eatValue: 16,
            weight: 0.5,
            description: 'Сочный, полный витаминов овощ. В правильных условиях может храниться долгое время.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.APPLE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'apple',
        eatValue: 18,
        weight: 0.5,
        itemId: '00064B2E',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Яблоко',
            eatValue: 18,
            weight: 0.5,
            description: 'Особый хладостойкий сорт фруктов. Выведен специально для северных провинций.',
        }),
        option: { maxStack: 20 },
    }),
    new DrinksItemConfig_1.DrinksItemConfig({
        id: ItemHashes_1.ItemHashes.SKOOMA,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'skooma',
        thirstValue: 10,
        weight: 0.5,
        itemId: '00057A7E',
        info: DrinksItemConfig_1.DrinksItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Скума',
            thirstValue: 10,
            weight: 0.5,
            description: 'Запрещённый на большинстве территорий Империи напиток, который обожают каджиты.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.MOON_SUGAR,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'moon_sugar',
        eatValue: 0,
        weight: 0.5,
        itemId: '000D8E3F',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Лунный сахар',
            eatValue: 0,
            weight: 0.5,
            description: 'Ингредиент для изготовления скумы. Иногда употребляется в чистом виде.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.EIDAR_CHEESE_WEDGE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'eidar_cheese_wedge',
        eatValue: 18,
        weight: 0.5,
        itemId: '00064B32',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Кусок эйдарского сыра',
            eatValue: 18,
            weight: 0.5,
            description: 'Кусок сыра, заплесневелый и жутко вонючий. На вкус столь же отвратителен, как и на вид. Впрочем, находятся безумцы, считающие его деликатесом.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.CHICKEN_BREAST,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'chicken_breast',
        eatValue: 10,
        weight: 0.5,
        itemId: '000F2011',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Куриная грудка',
            eatValue: 10,
            weight: 0.5,
            description: 'Лучше не пытаться самостоятельно получить её из домашних кур, - почему-то стражники это очень не любят.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.GREELED_LEEKS,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'grilled_leeks',
        eatValue: 20,
        weight: 0.5,
        itemId: '00064B3E',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Жареный лук-порей',
            eatValue: 20,
            weight: 0.5,
            description: 'Простейшее блюдо, хрустящее и очень вкусное.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.GREELED_CHICKEN_BREAST,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'grilled_chicken_breast',
        eatValue: 20,
        weight: 0.5,
        itemId: '000E8947',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Жареная куриная грудка',
            eatValue: 20,
            weight: 0.5,
            description: 'Ароматное мясо с золотистой корочкой.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.RABBIT_HAUNCH,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'rabbit_haunch',
        eatValue: 25,
        weight: 0.5,
        itemId: '000722C2',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Жареная кроличья ножка',
            eatValue: 25,
            weight: 0.5,
            description: 'Очень вкусное и нежное мясо.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.BREAD,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'bread',
        eatValue: 40,
        weight: 0.5,
        itemId: '00065C97',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Хлеб',
            eatValue: 40,
            weight: 0.5,
            description: 'Самая распространённая еда во всём Тамриэле.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.VENISON_STEW,
        size: { width: 2, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'venison_stew',
        value: { thirstValue: 35, hungersValue: 10 },
        weight: 0.5,
        itemId: '000EBA01',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Похлёбка из оленины',
            value: { thirstValue: 35, hungersValue: 10 },
            weight: 0.5,
            description: 'Густой ароматный суп. Не только насыщает, но и отлично согревает.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.BRAIDED_BREAD,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Food,
        image: 'braided_bread',
        eatValue: 50,
        weight: 0.5,
        itemId: '00064B30',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Булка-плетёнка',
            eatValue: 50,
            weight: 0.5,
            description: 'Мягкая, нежная, ароматная булка.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.CABBAGE_POTATO_SOUP,
        size: { width: 2, height: 1 },
        type: itemType_1.ItemType.Drinks,
        image: 'cabbage_potato_soup',
        value: { thirstValue: 30, hungersValue: 40 },
        weight: 1,
        itemId: '000EBA01',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Капустный суп с картошкой',
            value: { thirstValue: 30, hungersValue: 40 },
            weight: 1,
            description: 'Овощной суп, лёгкий, но вкусный и сытный.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.TOMATO_SOUP,
        size: { width: 2, height: 1 },
        type: itemType_1.ItemType.Drinks,
        image: 'tomato_soup',
        value: { thirstValue: 40, hungersValue: 40 },
        weight: 1,
        itemId: '000EBA01',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Томатный суп',
            value: { thirstValue: 40, hungersValue: 40 },
            weight: 1,
            description: 'Овощной суп, приготовленный из томатов. Одинаково хорош как в горячем, так и в холодном виде.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.APPLE_PIE,
        size: { width: 2, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'apple_pie',
        eatValue: 100,
        weight: 0.2,
        itemId: '00064B43',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Яблочный пирог',
            eatValue: 100,
            weight: 0.2,
            description: 'Сладкая выпечка, настоящее лакомство.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.ELSWEYR_FOUNDUE,
        size: { width: 2, height: 1 },
        type: itemType_1.ItemType.Drinks,
        image: 'elsweyr_fondue',
        value: { thirstValue: 50, hungersValue: 50 },
        weight: 0.2,
        itemId: '000EBA01',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Эльсвейрcкое фондю',
            value: { thirstValue: 50, hungersValue: 50 },
            weight: 0.2,
            description: 'Пикантное блюдо из очень специфических ингредиентов. Утоляет и голод, и жажду.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodItemConfig_1.FoodItemConfig({
        id: ItemHashes_1.ItemHashes.SWEETROLL,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Food,
        image: 'sweetroll',
        eatValue: 100,
        weight: 0.2,
        itemId: '00064B3D',
        info: FoodItemConfig_1.FoodItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Сладкий рулет',
            eatValue: 100,
            weight: 0.2,
            description: 'Такой аппетитный... Смотри, чтоб не украли!',
        }),
        option: { maxStack: 20 },
    }),
    new DrinksItemConfig_1.DrinksItemConfig({
        id: ItemHashes_1.ItemHashes.ALE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'ale',
        thirstValue: 20,
        weight: 1,
        itemId: '00034C5E',
        info: DrinksItemConfig_1.DrinksItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Эль',
            thirstValue: 20,
            weight: 1,
            description: 'Дешёвый и очень распространённый алкогольный напиток. Крайне популярен у населения Скайрима.',
        }),
        option: { maxStack: 20 },
    }),
    new DrinksItemConfig_1.DrinksItemConfig({
        id: ItemHashes_1.ItemHashes.WINE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'wine',
        thirstValue: 30,
        weight: 1,
        itemId: '00085368',
        info: DrinksItemConfig_1.DrinksItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Вино',
            thirstValue: 30,
            weight: 1,
            description: 'Алкогольный напиток из перебродившего винограда. Им не брезгуют даже аристократы.',
        }),
        option: { maxStack: 20 },
    }),
    new DrinksItemConfig_1.DrinksItemConfig({
        id: ItemHashes_1.ItemHashes.ARGONIAN_BLOODWINE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'argonian_bloodwine',
        thirstValue: 40,
        weight: 1,
        itemId: '00085368',
        info: DrinksItemConfig_1.DrinksItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Аргонианское кровавое вино',
            thirstValue: 40,
            weight: 1,
            description: 'Редкое вино, привезенное из Чернотопья. Особенно ценится коллекционерами.',
        }),
        option: { maxStack: 20 },
    }),
    new DrinksItemConfig_1.DrinksItemConfig({
        id: ItemHashes_1.ItemHashes.CYRODILIC_BRANDY,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'cyrodilic_brandy',
        thirstValue: 50,
        weight: 1,
        itemId: '000B91D7',
        info: DrinksItemConfig_1.DrinksItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Сиродильский бренди',
            thirstValue: 50,
            weight: 1,
            description: 'Крепкий элитный алкоголь. Без него не обходится ни один императорский пир.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.NORD_MEAD,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'nord_mead',
        value: { thirstValue: 30, hungersValue: 10 },
        weight: 1,
        itemId: '00034C5D',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Медовуха',
            value: { thirstValue: 30, hungersValue: 10 },
            weight: 1,
            description: 'Легендарный нордский алкогольный напиток.',
        }),
        option: { maxStack: 20 },
    }),
    new FoodAndWaterItemConfig_1.FoodAndWaterItemConfig({
        id: ItemHashes_1.ItemHashes.JUG_OF_MILK,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Drinks,
        image: 'jug_of_milk',
        value: { thirstValue: 100, hungersValue: 10 },
        weight: 1,
        itemId: '00034C5E',
        info: FoodAndWaterItemConfig_1.FoodAndWaterItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Кувшин молока',
            value: { thirstValue: 100, hungersValue: 10 },
            weight: 1,
            description: 'Вкусное и полезное, не только утоляет жажду, но и немного насыщает.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.LEATHER_STRIPS,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'leather_strips',
        weight: 1,
        itemId: '000800E4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Полоски кожи',
            weight: 1,
            description: 'Применяются для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.LEATHER,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'leather',
        weight: 1,
        itemId: '000DB5D2',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Кожа',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'iron_ingot',
        weight: 1,
        itemId: '0005ACE4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'steel_ingot',
        weight: 1,
        itemId: '0005ACE5',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_METAL_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'dwarven_metal_ingot',
        weight: 1,
        itemId: '000DB8A2',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский металлический слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.CORUNDIUM_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'corundum_ingot',
        weight: 1,
        itemId: '0005AD93',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Корундовый слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.ORICHALCUM_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'orichalcum_ingot',
        weight: 1,
        itemId: '0005AD99',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орихалковый слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SILVER_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'silver_ingot',
        weight: 1,
        itemId: '0005ACE3',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Серебряный слиток',
            weight: 1,
            description: 'Драгоценный металл, используются в ювелирном деле.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.GOLD_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'gold_ingot',
        weight: 1,
        itemId: '0005AD9E',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Золотой слиток',
            weight: 1,
            description: 'Драгоценный металл, используются в ювелирном деле.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.QUICKSILVER_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'quicksilver_ingot',
        weight: 1,
        itemId: '0005ADA0',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Ртутный слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.REFINED_MOONSTONE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'refined_moonstone',
        weight: 1,
        itemId: '0005AD9F',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Очищенный лунный камень',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.REFINED_MALACHITE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'refined_malachite',
        weight: 1,
        itemId: '0005ADA1',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Очищенный малахит',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_INGOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'ebony_ingot',
        weight: 1,
        itemId: '0005AD9D',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый слиток',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGON_SCALE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'dragon_scale',
        weight: 1,
        itemId: '0003ADA3',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконья чешуя',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGON_BONE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'dragon_bone',
        weight: 1,
        itemId: '0003ADA4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконья кость',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRA_HEART,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'daedra_heart',
        weight: 1,
        itemId: '0003AD5B',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Сердца даэдра',
            weight: 1,
            description: 'Применяется для создания доспехов и оружия в кузнице',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.EMPTY_WINE_BOTTLE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'empty_wine_bottle',
        weight: 0.5,
        itemId: '00085368',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Пустая бутылка',
            weight: 0.5,
            description: 'Незаменимый предмет для создания зелий.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.PURPLE_MOUNTAIN_FLOWER,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'purple_mountain_flower',
        weight: 0.5,
        itemId: '00077E1E',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Лиловый горноцвет',
            weight: 0.5,
            description: 'Довольно распространённое в Скайриме растение, часто используемое для приготовления зелий.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.BLUE_MOUNTAIN_FLOWER,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'blue_mountain_flower',
        weight: 0.5,
        itemId: '00077E1C',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Голубой горноцвет',
            weight: 0.5,
            description: 'Невзрачный голубой цветок, предпочитающий гористую местность.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.YELLOW_MOUNTAIN_FLOWER,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'yellow_mountain_flower',
        weight: 0.5,
        itemId: '00077E1D',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Жёлтый горноцвет',
            weight: 0.5,
            description: 'Простое растение с небольшими жёлтыми цветками.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.RED_MOUNTAIN_FLOWER,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'red_mountain_flower',
        weight: 0.5,
        itemId: '00077E1D',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Красный горноцвет',
            weight: 0.5,
            description: 'Хрупкое растение, отлично приспособившееся к жизни в суровом климате.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SWAMP_FUNGAL_POD,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'swamp_fungal_pod',
        weight: 0.5,
        itemId: '0007E8B7',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Болотный стручок',
            weight: 0.5,
            description: 'Странное полурастение-полугриб. Предпочитает расти около затхлой воды.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.LAVENDER,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'lavender',
        weight: 0.5,
        itemId: '00045C28',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Лаванда',
            weight: 0.5,
            description: 'Красивое, предпочитающее солнечные места растение с фиолетовыми цветками.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.JAZBAY_GRAPES,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'jazbay_grapes',
        weight: 0.5,
        itemId: '0006AC4A',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Виноград джазби',
            weight: 0.5,
            description: 'Настоящее сокровище северных земель. Столетия были потрачнеы на то, чтобы приспособить его к выращиванию Скайриме.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.MORA_TAPINELLA,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'mora_tapinella',
        weight: 0.5,
        itemId: '000EC870',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Мора тапинелла',
            weight: 0.5,
            description: 'На вид - самый обычный гриб. Только опытные алхимики знают о его полезных свойствах.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.NIRNROOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'nirnroot',
        weight: 0.5,
        itemId: '00059B86',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Корень Нирна',
            weight: 0.5,
            description: 'Странное растение, издающее звенящий звук. Ценный алхимический ингредиент.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.TUNDRA_COTTON,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'tundra_cotton',
        weight: 0.5,
        itemId: '0003F7F8',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Пушица',
            weight: 0.5,
            description: 'Пушицу также называют "тундровым хлопком". Её используют не только в алхимм, но и для создания тканей.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SNOWBERRIES,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'snowberries',
        weight: 0.5,
        itemId: '0001B3BD',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Снежные ягоды',
            weight: 0.5,
            description: 'Северные ягоды, растущие на небольшом кустарнике с колючими листьями.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONS_TONQUE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'dragons_tongue',
        weight: 0.5,
        itemId: '000889A2',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Язык дракона',
            weight: 0.5,
            description: 'Примечательное растение с необычными жёлтыми цветками. На просторах Скайрима встречается нечасто.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.BLISTERWORT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'blisterwort',
        weight: 0.5,
        itemId: '0004DA25',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Лютый гриб',
            weight: 0.5,
            description: 'Яркий ядовитый гриб с красной шляпкой. Если верить слухам, раньше некоторые норды употребляли их перед битвой, чтобы обрести особую силу.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.CRIMSON_NIRNROOT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'crimson_nirnroot',
        weight: 0.5,
        itemId: '000B701A',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Алый корень Нирна',
            weight: 0.5,
            description: 'Чрезвычайно редкий подвид корня Нирна. Очень ценный алхимический ингредиент.',
        }),
        option: { maxStack: 20 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.ABECEAN_LONGFIN,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'abecean_longfin',
        weight: 0.25,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Чешуйчатка',
            weight: 0.25,
            description: 'Обычная рыба, встречаемая в большинстве водоемов. Можно поймать с любым уровнем рыболовного дела.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.IDE,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'ide',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Язь',
            weight: 0.5,
            description: 'Известная своим богатым вкусом и гладкой текстурой, эта рыба является драгоценным уловом для любого рыболова, добавляя разнообразие и утонченность в кулинарные традиции Скайрима.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SHARP,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'sharp',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Остроперка',
            weight: 0.5,
            description: 'Более редкая и вкусная по сравнению с обычными видами, эта рыба выделяется своими ярко выраженными вкусовыми качествами, принося нотку изысканности на стол знатока.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.CHAR,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'char',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Голец',
            weight: 0.5,
            description: 'Ценный трофей в водах Скайрима, этот вид превосходит многих своим уникальным, нежным вкусом и текстурой, считаясь деликатесом среди знающих гурманов и опытных рыболовов.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SALMON,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'salmon',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Лосось',
            weight: 0.5,
            description: 'Воплощение элегантности и питательности, этот вид рыбы славится своим насыщенным и глубоким вкусом, становясь желанным уловом для гурманов и искушенных рыбаков.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SALMON_FISHER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'salmon_fisher',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Ловецкий лосось',
            weight: 0.5,
            description: 'Редкость и сокровище вод Скайрима, этот вид выделяется своей несравненной вкусовой гаммой и является вершиной мастерства для каждого рыболова, символизируя достижение настоящего искусства ловли.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.CHAOS_FISH,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'chaos_fish',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Хаосовая рыба',
            weight: 0.5,
            description: 'Обёрнутая в мифы и легенды, эта удивительно редкая рыба из вод Скайрима окутана слухами о своих скрытых магических свойствах, делая её не только кулинарным деликатесом, но и предметом охоты для тех, кто ищет тайны и чудеса.',
        }),
        option: { maxStack: 10 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.SILVER_CARP,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Resources,
        image: 'silver_carp',
        weight: 0.5,
        itemId: '0010C3B4',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Толстолобик',
            weight: 0.5,
            description: 'Изысканный деликатес среди рыбных уловов Скайрима, известная своей неповторимой текстурой и глубоким вкусом, она является гордостью опытных рыболовов.',
        }),
        option: { maxStack: 10 },
    }),
    new RodItemConfig_1.RodItemConfig({
        id: ItemHashes_1.ItemHashes.BEGINNER_ROD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Other,
        image: 'rod',
        weight: 3,
        itemId: '000E8B39',
        info: RodItemConfig_1.RodItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Удочка новичка',
            weight: 3,
            description: 'Идеальный выбор для начинающих рыболовов, эта удочка прощает ошибки и помогает освоить азы рыбной ловли.',
        }),
    }),
    new RodItemConfig_1.RodItemConfig({
        id: ItemHashes_1.ItemHashes.ROD_EXPERIENCED,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Other,
        image: 'rod',
        weight: 3,
        itemId: '000E8B39',
        info: RodItemConfig_1.RodItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Удочка опытного',
            weight: 3,
            description: 'Сбалансированное сочетание гибкости и силы делает эту удочку отличным инструментом для рыболовов, стремящихся к мастерству.',
        }),
    }),
    new RodItemConfig_1.RodItemConfig({
        id: ItemHashes_1.ItemHashes.MASTER_ROD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Other,
        image: 'rod',
        weight: 3,
        itemId: '000E8B39',
        info: RodItemConfig_1.RodItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Удочка мастера',
            weight: 3,
            description: 'Для рыболовов-мастеров, ценящих точность и долговечность – удочка, подобная этой, позволит покорять самые капризные рыбные места.',
        }),
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.BAIT,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'bait',
        weight: 0.05,
        itemId: '00034C5E',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Наживка ',
            weight: 0.05,
            description: 'Приманка для рыбы. Используется для рыбалки',
        }),
        option: { maxStack: 25 },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.WORM,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'worm',
        weight: 0.1,
        itemId: '00034C5E',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Червь ',
            weight: 0.1,
            description: 'Простая и эффективная наживка, привлекает рыбу, оставаясь ключевым элементом для успешной рыбалки.',
        }),
        option: { maxStack: 25 },
    }),
    new ShovelItemConfig_1.ShovelItemConfig({
        id: ItemHashes_1.ItemHashes.SHOVEL,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Other,
        image: 'shovel',
        weight: 3,
        itemId: '00034C5E',
        info: ShovelItemConfig_1.ShovelItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Лопата ',
            weight: 3,
            description: 'Прочный и надежный инструмент, необходимый для добычи наживки.',
        }),
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.HANDS,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.None,
        itemId: '1F4',
        image: 'hands',
        weight: 1,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: '',
            weight: 0,
            type: itemType_1.WeaponItemType.OneHanded,
            description: '',
        }),
        option: {
            wearable: {
                slot: [],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '00012EB7',
        image: 'iron_sword',
        weight: 9,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный меч',
            weight: 9,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, железный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HIDE_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013914',
        image: 'hide_shield',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сыромятный щит',
            weight: 5,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Лёгкий щит с небольшим показателем защиты, часть сыромятного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '0001397e',
        image: 'iron_dagger',
        weight: 2,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный кинжал',
            weight: 2,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, железный кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '00013986',
        image: 'steel_dagger',
        weight: 2.5,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной кинжал',
            weight: 2.5,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, стальной кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '0001398e',
        image: 'orcish_dagger',
        weight: 3,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий кинжал',
            weight: 3,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, орочий кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '00013996',
        image: 'dwarven_dagger',
        weight: 3.5,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский кинжал',
            weight: 3.5,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, двемерский кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '0001399e',
        image: 'elven_dagger',
        weight: 4,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский кинжал',
            weight: 4,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, эльфийский кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '000139a6',
        image: 'glass_dagger',
        weight: 4.5,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный кинжал',
            weight: 4.5,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, стеклянный кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '000139ae',
        image: 'ebony_dagger',
        weight: 5,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый кинжал',
            weight: 5,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, эбонитовый кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '000139b6',
        image: 'daedric_dagger',
        weight: 6,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический кинжал',
            weight: 6,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, даэдрический кинжал — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_DAGGER,
        size: { width: 1, height: 2 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Dagger,
        itemId: '000139b6',
        image: 'dragonbone_dagger',
        weight: 6.5,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Кинжал из драконьей кости',
            weight: 6.5,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, кинжал из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '00013989',
        image: 'steel_sword',
        weight: 10,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной меч',
            weight: 10,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, стальной меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '00013991',
        image: 'orcish_sword',
        weight: 11,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий меч',
            weight: 11,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, орочий меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '00013999',
        image: 'dwarven_sword',
        weight: 12,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский меч',
            weight: 12,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, двемерский меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '000139a1',
        image: 'elven_sword',
        weight: 13,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский меч',
            weight: 13,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, эльфийский меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '000139a9',
        image: 'glass_sword',
        weight: 14,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный меч',
            weight: 14,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, стеклянный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '000139b1',
        image: 'ebony_sword',
        weight: 15,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый меч',
            weight: 15,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, эбонитовый меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '000139b9',
        image: 'daedric_sword',
        weight: 16,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический меч',
            weight: 16,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, даэдрический меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_SWORD,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Sword,
        itemId: '02014fce',
        image: 'dragonbone_sword',
        weight: 19,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический меч',
            weight: 19,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, меч из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '00013982',
        image: 'iron_mace',
        weight: 13,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железная булава',
            weight: 13,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, железная булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '00013988',
        image: 'steel_mace',
        weight: 14,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальная булава',
            weight: 14,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, стальная булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '00013990',
        image: 'orcish_mace',
        weight: 15,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочья булава',
            weight: 15,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, орочья булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '00013998',
        image: 'dwarven_mace',
        weight: 16,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерская булава',
            weight: 16,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, двемерская булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '000139a0',
        image: 'elven_mace',
        weight: 17,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийская булава',
            weight: 17,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, эльфийская булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '000139a8',
        image: 'glass_mace',
        weight: 18,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянная булава',
            weight: 18,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, стеклянная булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '000139b0',
        image: 'ebony_mace',
        weight: 19,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовая булава',
            weight: 19,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, эбонитовая булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '000139b8',
        image: 'daedric_mace',
        weight: 20,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрическая булава',
            weight: 20,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, даэдрическая булава — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_MACE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.Mace,
        itemId: '02014fcd',
        image: 'dragonbone_mace',
        weight: 22,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Булава из драконьей кости',
            weight: 22,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочная и надежная, булава из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '00013790',
        image: 'iron_war_axe',
        weight: 11,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный топор',
            weight: 11,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, железный топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '00013983',
        image: 'steel_war_axe',
        weight: 12,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной топор',
            weight: 12,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, стальной топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '0001398b',
        image: 'orcish_war_axe',
        weight: 13,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий топор',
            weight: 13,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, орочий топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '00013993',
        image: 'dwarven_war_axe',
        weight: 14,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский топор',
            weight: 14,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, двемерский топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '0001399b',
        image: 'elven_war_axe',
        weight: 15,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский топор',
            weight: 15,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, эльфийский топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '000139a3',
        image: 'glass_war_axe',
        weight: 16,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный топор',
            weight: 16,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, стеклянный топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '000139ab',
        image: 'ebony_war_axe',
        weight: 17,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый топор',
            weight: 17,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, эбонитовый топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '000139b3',
        image: 'daedric_war_axe',
        weight: 18,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический топор',
            weight: 18,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, даэдрический топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_WAR_AXE,
        size: { width: 1, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarAxe,
        itemId: '02014fcf',
        image: 'dragonbone_war_axe',
        weight: 21,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Топор из драконьей кости',
            weight: 21,
            type: itemType_1.WeaponItemType.OneHanded,
            description: 'Прочный и надежный, топор из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand, itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '0001359d',
        image: 'iron_greatsword',
        weight: 11,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный двуручный меч',
            weight: 11,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Прочный и надежный, железный топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '00013987',
        image: 'steel_greatsword',
        weight: 12,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной двуручный меч',
            weight: 12,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Прочный и надежный, стальной топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '0001398f',
        image: 'orcish_greatsword',
        weight: 13,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий двуручный меч',
            weight: 13,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Орочий топор — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '00013997',
        image: 'dwarven_greatsword',
        weight: 14,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский двуручный меч',
            weight: 14,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Двемерский двуручный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '0001399f',
        image: 'elven_greatsword',
        weight: 15,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский двуручный меч',
            weight: 15,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эльфийский двуручный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '000139a7',
        image: 'glass_greatsword',
        weight: 16,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный двуручный меч',
            weight: 16,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Стеклянный двуручный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '000139af',
        image: 'ebony_greatsword',
        weight: 17,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый двуручный меч',
            weight: 17,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эбонитовый двуручный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '000139b7',
        image: 'daedric_greatsword',
        weight: 18,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический двуручный меч',
            weight: 18,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Даэдрический двуручный меч — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_GREATSWORD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.GreatSword,
        itemId: '02014fcc',
        image: 'dragonbone_greatsword',
        weight: 21,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Двуручный меч из драконьей кости',
            weight: 21,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Двуручный меч из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '00013981',
        image: 'iron_warhammer',
        weight: 24,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный боевой молот',
            weight: 24,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Железный боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '0001398a',
        image: 'steel_warhammer',
        weight: 25,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной боевой молот',
            weight: 25,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Стальной боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '00013992',
        image: 'orcish_warhammer',
        weight: 26,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий боевой молот',
            weight: 26,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Орочий боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '0001399a',
        image: 'dwarven_warhammer',
        weight: 27,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский боевой молот',
            weight: 27,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Двемерский боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '000139a2',
        image: 'elven_warhammer',
        weight: 28,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский боевой молот',
            weight: 28,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эльфийский боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '000139aa',
        image: 'glass_warhammer',
        weight: 29,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный боевой молот',
            weight: 29,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Стеклянный боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '000139b2',
        image: 'ebony_warhammer',
        weight: 30,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый боевой молот',
            weight: 30,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эбонитовый боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '000139ba',
        image: 'daedric_warhammer',
        weight: 31,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический боевой молот',
            weight: 31,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Даэдрический боевой молот — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_WARHAMMER,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.WarHammer,
        itemId: '02014fd0',
        image: 'dragonbone_warhammer',
        weight: 33,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Боевой молот из драконьей кости',
            weight: 33,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Боевой молот из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '00013981',
        image: 'iron_battleaxe',
        weight: 20,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железная секира',
            weight: 20,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Железная секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '0001398a',
        image: 'steel_battleaxe',
        weight: 21,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальная секира',
            weight: 21,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Стальная секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '00013992',
        image: 'orcish_battleaxe',
        weight: 22,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочья секира',
            weight: 22,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Орочья секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '0001399a',
        image: 'dwarven_battleaxe',
        weight: 23,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерская секира',
            weight: 23,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Двемерская секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '000139a2',
        image: 'elven_battleaxe',
        weight: 24,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийская секира',
            weight: 24,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эльфийская секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '000139aa',
        image: 'glass_battleaxe',
        weight: 25,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянная секира',
            weight: 25,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Стеклянная секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '000139b2',
        image: 'ebony_battleaxe',
        weight: 26,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовая секира',
            weight: 26,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эбонитовая секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '000139ba',
        image: 'daedric_battleaxe',
        weight: 27,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический двуручный меч',
            weight: 27,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Даэдрическая секира — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_BATTLEAXE,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.MELEE,
        category: WeaponItemConfig_1.WeaponCategory.BattleAxe,
        itemId: '02014fd0',
        image: 'dragonbone_battleaxe',
        weight: 30,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Секира из драконьей кости',
            weight: 30,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Секира из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.LONG_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '0003b562',
        image: 'long_bow',
        weight: 5,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Длинный лук',
            weight: 5,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Длинный лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.HUNTING_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '00013985',
        image: 'hunting_bow',
        weight: 7,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Охотничий лук',
            weight: 7,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Охотничий лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '0001398d',
        image: 'orcish_bow',
        weight: 9,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий лук',
            weight: 9,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Орочий лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '00013995',
        image: 'dwarven_bow',
        weight: 10,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский лук',
            weight: 10,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Двемерский лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '0001399d',
        image: 'elven_bow',
        weight: 12,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский лук',
            weight: 12,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эльфийский лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '000139a5',
        image: 'glass_bow',
        weight: 14,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянний лук',
            weight: 14,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Стеклянний лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '000139ad',
        image: 'ebony_bow',
        weight: 16,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый лук',
            weight: 16,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Эбонитовый лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '000139b5',
        image: 'daedric_bow',
        weight: 18,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический лук',
            weight: 18,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Даэдрический лук — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new WeaponItemConfig_1.WeaponItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONBONE_BOW,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Weapon,
        weaponRange: WeaponItemConfig_1.WeaponRange.RANGE,
        category: WeaponItemConfig_1.WeaponCategory.Bow,
        itemId: '020176f1',
        image: 'dragonbone_bow',
        weight: 20,
        info: WeaponItemConfig_1.WeaponItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Лук из драконьей кости',
            weight: 20,
            type: itemType_1.WeaponItemType.TwoHanded,
            description: 'Лук из драконьей кости — это базовый инструмент любого воина, служащий верой и правдой в столкновениях с врагами.',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
                blockSlots: [itemType_1.CharSlots.SecondHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HIDE_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013913',
        image: 'hide_helmet',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сыромятный шлем',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Лёгкий сыромятный шлем с небольшим показателем защиты, часть сыромятного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HIDE_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013911',
        image: 'hide_armor',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сыромятная броня',
            weight: 5,
            type: itemType_1.ArmorItemType.Light,
            description: 'Лёгкая сыромятная броня с небольшим показателем защиты, часть сыромятного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HIDE_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013912',
        image: 'hide_bracers',
        weight: 1,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сыромятные наручи',
            weight: 1,
            type: itemType_1.ArmorItemType.Light,
            description: 'Лёгкие сыромятные наручи с небольшим показателем защиты, часть сыромятного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.HIDE_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013910',
        image: 'hide_boots',
        weight: 1,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Сыромятные ботинки',
            weight: 1,
            type: itemType_1.ArmorItemType.Light,
            description: 'Лёгкие сыромятные ботинки с небольшим показателем защиты, часть сыромятного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.LEATHER_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013922',
        image: 'leather_helmet',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Кожаный шлем',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Кожаный шлем с небольшим показателем защиты, часть кожаного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.LEATHER_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0003619E',
        image: 'leather_armor',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Кожаная броня',
            weight: 6,
            type: itemType_1.ArmorItemType.Light,
            description: 'Кожаная броня с небольшим показателем защиты, часть кожаного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.LEATHER_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013921',
        image: 'leather_bracers',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Кожаные наручи',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Кожаные наручи с небольшим показателем защиты, часть кожаного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.LEATHER_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013920',
        image: 'leather_boots',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Кожаные ботинки',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Кожаные ботинки с небольшим показателем защиты, часть кожаного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001391d',
        image: 'elven_helmet',
        weight: 1,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский шлем',
            weight: 1,
            type: itemType_1.ArmorItemType.Light,
            description: 'Эльфийский шлем, часть эльфийского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '000896A3',
        image: 'elven_armor',
        weight: 4,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийская броня',
            weight: 4,
            type: itemType_1.ArmorItemType.Light,
            description: 'Эльфийская броня, часть эльфийского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001391C',
        image: 'elven_bracers',
        weight: 1,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийские наручи',
            weight: 1,
            type: itemType_1.ArmorItemType.Light,
            description: 'Эльфийские наручи, часть эльфийского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001391A',
        image: 'elven_boots',
        weight: 1,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийские ботинки',
            weight: 1,
            type: itemType_1.ArmorItemType.Light,
            description: 'Эльфийские ботинки, часть эльфийского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ELVEN_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001391E',
        image: 'elven_shield',
        weight: 4,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Эльфийский щит',
            weight: 4,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Эльфийский щит, часть эльфийского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SCALED_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001B3A1',
        image: 'scaled_helmet',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Ламеллярный шлем',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Ламеллярный шлем, часть ламеллярного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SCALED_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001B3A3',
        image: 'scaled_armor',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Ламеллярная броня',
            weight: 6,
            type: itemType_1.ArmorItemType.Light,
            description: 'Ламеллярная броня, часть ламеллярного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SCALED_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001B3A0',
        image: 'scaled_bracers',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Ламеллярная наручи',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Ламеллярные наручи, часть ламеллярного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.SCALED_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001B39F',
        image: 'scaled_boots',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Ламеллярные ботинки',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Ламеллярный ботинки, часть ламеллярного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001393B',
        image: 'glass_helmet',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный шлем',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Стеклянный шлем, часть стеклянного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013939',
        image: 'glass_armor',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянная броня',
            weight: 6,
            type: itemType_1.ArmorItemType.Light,
            description: 'Стеклянная броня, часть стеклянного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001393A',
        image: 'glass_bracers',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянные наручи',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Стеклянные наручи, часть стеклянного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013938',
        image: 'glass_boots',
        weight: 2,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянные ботинки',
            weight: 2,
            type: itemType_1.ArmorItemType.Light,
            description: 'Стеклянные ботинки, часть стеклянного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.GLASS_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001393C',
        image: 'glass_shield',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Стеклянный щит',
            weight: 7,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Стеклянный щит, часть стеклянного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONSCALE_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013940',
        image: 'dragonscale_helmet',
        weight: 4,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконий чешуйчатый шлем',
            weight: 4,
            type: itemType_1.ArmorItemType.Light,
            description: 'Драконий чешуйчатый шлем, часть легкого драконьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONSCALE_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001393E',
        image: 'dragonscale_armor',
        weight: 10,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконья чешуйчатая броня',
            weight: 10,
            type: itemType_1.ArmorItemType.Light,
            description: 'Драконья чешуйчатая броня, часть легкого драконьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONSCALE_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001393F',
        image: 'dragonscale_bracers',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконьи чешуйчатые наручи',
            weight: 3,
            type: itemType_1.ArmorItemType.Light,
            description: 'Драконьи чешуйчатые наручи, часть легкого драконьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONSCALE_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001393D',
        image: 'dragonscale_boots',
        weight: 3,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконьи чешуйчатые ботинки',
            weight: 3,
            type: itemType_1.ArmorItemType.Light,
            description: 'Драконьи чешуйчатые ботинки, часть легкого драконьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONSCALE_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013941',
        image: 'dragonscale_shield',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконий чешуйчатый щит',
            weight: 6,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Драконий чешуйчатый щит, часть легкого драконьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00012e4d',
        image: 'iron_helmet',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный шлем',
            weight: 5,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Железный шлем, часть железного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00012E49',
        image: 'iron_armor',
        weight: 30,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железная броня',
            weight: 30,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Железная броня, часть железного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00012E46',
        image: 'iron_bracers',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железные наручи',
            weight: 5,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Железные наручи, часть железного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00012E4B',
        image: 'iron_boots',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железные ботинки',
            weight: 6,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Железные ботинки, часть железного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.IRON_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00012EB6',
        image: 'iron_shield',
        weight: 12,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Железный щит',
            weight: 12,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Железный щит, часть железного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013954',
        image: 'steel_helmet',
        weight: 5,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной шлем',
            weight: 5,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Стальной шлем, часть стального снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013952',
        image: 'steel_armor',
        weight: 30,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальная броня',
            weight: 30,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Стальная броня, часть стального снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013953',
        image: 'steel_bracers',
        weight: 4,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальные наручи',
            weight: 4,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Стальные наручи, часть стального снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013951',
        image: 'steel_boots',
        weight: 8,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальные ботинки',
            weight: 8,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Стальные ботинки, часть стального снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.STEEL_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013955',
        image: 'steel_shield',
        weight: 12,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Unusual,
            name: 'Стальной щит',
            weight: 12,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Стальной щит, часть стального снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013959',
        image: 'orcish_helmet',
        weight: 8,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий шлем',
            weight: 8,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Орочий шлем, часть орочьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013957',
        image: 'orcish_armor',
        weight: 35,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочья броня',
            weight: 35,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Орочья броня, часть орочьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013958',
        image: 'orcish_bracers',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочьи наручи',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Орочьи наручи, часть орочьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013956',
        image: 'orcish_boots',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочьи ботинки',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Орочьи ботинки, часть орочьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.ORCISH_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013946',
        image: 'orcish_shield',
        weight: 14,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Орочий щит',
            weight: 14,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Орочий щит, часть орочьего снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001394f',
        image: 'dwarven_helmet',
        weight: 12,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский шлем',
            weight: 12,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Двемерский шлем, часть двемерского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001394D',
        image: 'dwarven_armor',
        weight: 45,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерская броня',
            weight: 45,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Двемерская броня, часть двемерского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001394E',
        image: 'dwarven_bracers',
        weight: 8,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерские наручи',
            weight: 8,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Двемерские наручи, часть двемерского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001394C',
        image: 'dwarven_boots',
        weight: 10,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерские ботинки',
            weight: 10,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Двемерские ботинки, часть двемерского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DWARVEN_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013950',
        image: 'dwarven_shield',
        weight: 12,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Двемерский щит',
            weight: 12,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Двемерский щит, часть двемерского снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.NORDIC_CARVED_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0401CD99',
        image: 'nordic_carved_helmet',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Нордский резной шлем',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Нордский резной шлем, часть нордского резного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.NORDIC_CARVED_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0401CD97',
        image: 'nordic_carved_armor',
        weight: 37,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Нордская резная броня',
            weight: 37,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Нордская резная броня, часть нордского резного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.NORDIC_CARVED_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0401CD98',
        image: 'nordic_carved_bracers',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Нордские резные наручи',
            weight: 6,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Нордские резные наручи, часть нордского резного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.NORDIC_CARVED_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0401CD96',
        image: 'nordic_carved_boots',
        weight: 6,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Нордские резные ботинки',
            weight: 6,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Нордские резные ботинки, часть нордского резного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.NORDIC_CARVED_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '04026236',
        image: 'nordic_carved_shield',
        weight: 10,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Rare,
            name: 'Нордский резной щит',
            weight: 10,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Нордский резной щит, часть нордского резного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013963',
        image: 'ebony_helmet',
        weight: 10,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый шлем',
            weight: 10,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Эбонитовый шлем, часть эбонитового снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013961',
        image: 'ebony_armor',
        weight: 38,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовая броня',
            weight: 38,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Эбонитовая броня, часть эбонитового снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013962',
        image: 'ebony_bracers',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовые наручи',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Эбонитовые наручи, часть эбонитового снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013960',
        image: 'ebony_boots',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовые ботинки',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Эбонитовые ботинки, часть эбонитового снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.EBONY_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013964',
        image: 'ebony_shield',
        weight: 14,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Epic,
            name: 'Эбонитовый щит',
            weight: 14,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Эбонитовый щит, часть эбонитового снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001396d',
        image: 'daedric_helmet',
        weight: 10,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический шлем',
            weight: 10,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Даэдрический шлем, часть даэдрического снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001396B',
        image: 'daedric_armor',
        weight: 38,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрическая броня',
            weight: 38,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Даэдрическая броня, часть даэдрического снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001396C',
        image: 'daedric_bracers',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрические наручи',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Даэдрические наручи, часть даэдрического снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001396A',
        image: 'daedric_boots',
        weight: 7,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрические ботинки',
            weight: 7,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Даэдрические ботинки, часть даэдрического снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DAEDRIC_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '0001396E',
        image: 'daedric_shield',
        weight: 14,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Даэдрический щит',
            weight: 14,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Даэдрический щит, часть даэдрического снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONPLATE_HELMET,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013969',
        image: 'dragonplate_helmet',
        weight: 8,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконий панцирный шлем',
            weight: 8,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Драконий панцирный шлем, часть драконьего панцирного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Headdress],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONPLATE_ARMOR,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013966',
        image: 'dragonplate_armor',
        weight: 40,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконья панцирная броня',
            weight: 40,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Драконья панцирная броня, часть драконьего панцирного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Outerwear],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONPLATE_BRACERS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013967',
        image: 'dragonplate_bracers',
        weight: 8,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконьи панцирные перчатки',
            weight: 8,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Драконьи панцирные перчатки, часть драконьего панцирного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Bracers],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONPLATE_BOOTS,
        size: { width: 2, height: 2 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013965',
        image: 'dragonplate_boots',
        weight: 8,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконьи панцирные ботинки',
            weight: 8,
            type: itemType_1.ArmorItemType.Heavy,
            description: 'Драконьи панцирные ботинки, часть драконьего панцирного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.Shoes],
            },
        },
    }),
    new ArmorItemConfig_1.ArmorItemConfig({
        id: ItemHashes_1.ItemHashes.DRAGONPLATE_SHIELD,
        size: { width: 2, height: 3 },
        type: itemType_1.ItemType.Armor,
        itemId: '00013968',
        image: 'dragonplate_shield',
        weight: 15,
        info: ArmorItemConfig_1.ArmorItemConfig.getInfo({
            quality: itemType_1.Quality.Legendary,
            name: 'Драконий панцирный щит',
            weight: 15,
            type: itemType_1.ArmorItemType.Shield,
            description: 'Драконий панцирный щит, часть драконьего панцирного снаряжения',
        }),
        option: {
            wearable: {
                slot: [itemType_1.CharSlots.FirstHand],
            },
        },
    }),
    new CommonItemConfig_1.CommonItemConfig({
        id: ItemHashes_1.ItemHashes.GEODE,
        size: { width: 1, height: 1 },
        type: itemType_1.ItemType.Resources,
        image: 'ore',
        weight: 2,
        itemId: '00034C5E',
        info: CommonItemConfig_1.CommonItemConfig.getInfo({
            quality: itemType_1.Quality.Normal,
            name: 'Руда',
            weight: 2,
            description: 'Кусок горной породы. При переплавке есть шанс получить ценный ресурс.',
        }),
        option: { maxStack: 25 },
    }),
];
const itemsMap = new Map(items.map(item => [item.id, item]));
const inventoryShared = {
    config: items,
    get: (configId) => {
        return itemsMap.get(configId);
    },
};
exports["default"] = inventoryShared;


/***/ }),

/***/ 8007:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfirmStates = exports.PickupItemEvents = exports.TradeEvents = exports.InventoryEvents = void 0;
var InventoryEvents;
(function (InventoryEvents) {
    InventoryEvents["Close"] = "inventory:close";
    InventoryEvents["Open"] = "inventory:open";
    InventoryEvents["MoveItem"] = "inventory:moveItem";
    InventoryEvents["StackItem"] = "inventory:stackItem";
    InventoryEvents["EquipItem"] = "inventory:equipItem";
    InventoryEvents["ItemAction"] = "inventory:itemAction";
    InventoryEvents["TakeOffEquipItem"] = "inventory:takeOffEquipItem";
    InventoryEvents["FastTakeOffEquipItem"] = "inventory:fastTakeOffEquipItem";
    InventoryEvents["SetShowHelmet"] = "inventory:setShowHelmet";
    InventoryEvents["HalfSplitItem"] = "inventory:halfSplitItem";
    InventoryEvents["DropItem"] = "inventory:dropItem";
    InventoryEvents["ForceClose"] = "inventoryItem:forceClose";
})(InventoryEvents = exports.InventoryEvents || (exports.InventoryEvents = {}));
var TradeEvents;
(function (TradeEvents) {
    TradeEvents["Close"] = "trade:close";
    TradeEvents["Accept"] = "trade:accept";
    TradeEvents["Cancel"] = "trade:cancel";
    TradeEvents["ItemAction"] = "trade:itemAction";
})(TradeEvents = exports.TradeEvents || (exports.TradeEvents = {}));
var PickupItemEvents;
(function (PickupItemEvents) {
    PickupItemEvents["SendItems"] = "pickupItem:sendItems";
    PickupItemEvents["SendItem"] = "pickupItem:sendItem";
    PickupItemEvents["DeleteItem"] = "pickupItem:deleteItem";
    PickupItemEvents["PickItem"] = "pickupItem:pickupItem";
})(PickupItemEvents = exports.PickupItemEvents || (exports.PickupItemEvents = {}));
var ConfirmStates;
(function (ConfirmStates) {
    ConfirmStates[ConfirmStates["Wait"] = 0] = "Wait";
    ConfirmStates[ConfirmStates["Confirmed"] = 1] = "Confirmed";
})(ConfirmStates = exports.ConfirmStates || (exports.ConfirmStates = {}));


/***/ }),

/***/ 4405:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemActionConfig = exports.ItemActionType = exports.CharSlots = exports.Quality = exports.ArmorItemType = exports.WeaponItemType = exports.ItemType = void 0;
var ItemType;
(function (ItemType) {
    ItemType["Weapon"] = "ItemTypeWeapon";
    ItemType["Armor"] = "ItemTypeArmor";
    ItemType["Backpack"] = "ItemTypeBackpack";
    ItemType["Potions"] = "ItemTypePotions";
    ItemType["Manuscripts"] = "ItemTypeManuscripts";
    ItemType["Food"] = "ItemTypeFood";
    ItemType["Drinks"] = "ItemTypeDrinks";
    ItemType["Ingredients"] = "ItemTypeIngredients";
    ItemType["Resources"] = "ItemTypeResources";
    ItemType["Other"] = "ItemTypeOther";
    ItemType["Accessories"] = "ItemTypeAccessories";
    ItemType["Clothes"] = "ItemTypeClothes";
})(ItemType = exports.ItemType || (exports.ItemType = {}));
var WeaponItemType;
(function (WeaponItemType) {
    WeaponItemType["OneHanded"] = "\u041E\u0434\u043D\u043E\u0440\u0443\u0447\u043D\u043E\u0435";
    WeaponItemType["TwoHanded"] = "\u0414\u0432\u0443\u0440\u0443\u0447\u043D\u043E\u0435";
    WeaponItemType["Bow"] = "\u041B\u0443\u043A";
})(WeaponItemType = exports.WeaponItemType || (exports.WeaponItemType = {}));
var ArmorItemType;
(function (ArmorItemType) {
    ArmorItemType["Light"] = "\u041B\u0435\u0433\u043A\u0430\u044F";
    ArmorItemType["Medium"] = "\u0421\u0440\u0435\u0434\u043D\u044F\u044F";
    ArmorItemType["Heavy"] = "\u0422\u044F\u0436\u0435\u043B\u0430\u044F";
    ArmorItemType["Clothes"] = "\u041E\u0434\u0435\u0436\u0434\u0430";
    ArmorItemType["Shield"] = "\u0429\u0438\u0442";
})(ArmorItemType = exports.ArmorItemType || (exports.ArmorItemType = {}));
var Quality;
(function (Quality) {
    Quality[Quality["Unusual"] = 0] = "Unusual";
    Quality[Quality["Normal"] = 1] = "Normal";
    Quality[Quality["Rare"] = 2] = "Rare";
    Quality[Quality["Epic"] = 3] = "Epic";
    Quality[Quality["Legendary"] = 4] = "Legendary";
})(Quality = exports.Quality || (exports.Quality = {}));
var CharSlots;
(function (CharSlots) {
    CharSlots["Backpack"] = "CharSlotBackpack";
    CharSlots["Headdress"] = "CharSlotHeaddress";
    CharSlots["Amulet"] = "CharSlotAmulet";
    CharSlots["Outerwear"] = "CharSlotOuterwear";
    CharSlots["Shoes"] = "CharSlotShoes";
    CharSlots["Bracers"] = "CharSlotBracers";
    CharSlots["Ring"] = "CharSlotRing";
    CharSlots["FirstHand"] = "CharSlotFirstHand";
    CharSlots["SecondHand"] = "CharSlotSecondHand";
})(CharSlots = exports.CharSlots || (exports.CharSlots = {}));
var ItemActionType;
(function (ItemActionType) {
    ItemActionType["DROP"] = "drop";
    ItemActionType["TAKE"] = "take";
    ItemActionType["SPLIT"] = "split";
    ItemActionType["EAT"] = "eat";
    ItemActionType["DRINK"] = "drink";
    ItemActionType["DRINK_ALCOHOL"] = "drink_alcohol";
    ItemActionType["FOOD_AND_WATER"] = "food_and_water";
    ItemActionType["PUT_ON"] = "put_on";
    ItemActionType["USE_ROD"] = "use_rod";
    ItemActionType["USE_SHOVEL"] = "use_shovel";
    ItemActionType["USE_POTION"] = "use_potion";
})(ItemActionType = exports.ItemActionType || (exports.ItemActionType = {}));
exports.ItemActionConfig = {
    [ItemActionType.DROP]: { type: ItemActionType.DROP, name: 'Выбросить' },
    [ItemActionType.TAKE]: { type: ItemActionType.TAKE, name: 'Подобрать' },
    [ItemActionType.SPLIT]: { type: ItemActionType.SPLIT, name: 'Разделить' },
    [ItemActionType.EAT]: { type: ItemActionType.EAT, name: 'Съесть' },
    [ItemActionType.DRINK]: { type: ItemActionType.DRINK, name: 'Выпить' },
    [ItemActionType.DRINK_ALCOHOL]: {
        type: ItemActionType.DRINK,
        name: 'Выпить',
    },
    [ItemActionType.USE_POTION]: {
        type: ItemActionType.USE_POTION,
        name: 'Выпить',
    },
    [ItemActionType.FOOD_AND_WATER]: {
        type: ItemActionType.FOOD_AND_WATER,
        name: 'Использовать',
    },
    [ItemActionType.USE_ROD]: {
        type: ItemActionType.USE_ROD,
        name: 'Использовать',
    },
    [ItemActionType.PUT_ON]: { type: ItemActionType.PUT_ON, name: 'Надеть' },
    [ItemActionType.USE_SHOVEL]: {
        type: ItemActionType.USE_SHOVEL,
        name: 'Использовать',
    },
};


/***/ }),

/***/ 2082:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlcoholsItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class AlcoholsItemConfig extends ItemConfig_1.ItemConfig {
    constructor(alcoholsItemConfigOptions) {
        super(alcoholsItemConfigOptions.id, alcoholsItemConfigOptions.size, alcoholsItemConfigOptions.type, alcoholsItemConfigOptions.image, alcoholsItemConfigOptions.weight, alcoholsItemConfigOptions.info, alcoholsItemConfigOptions.option, alcoholsItemConfigOptions.itemId);
        this.thirstValue = alcoholsItemConfigOptions.thirstValue;
    }
    getData() {
        return this.thirstValue;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Восполняет', value: `${infoOptions.thirstValue} ед. жажды` },
                { title: 'Вес', value: `${infoOptions.weight} кг.` },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.DRINK_ALCOHOL], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.AlcoholsItemConfig = AlcoholsItemConfig;


/***/ }),

/***/ 5710:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArmorItemConfig = void 0;
const config_1 = __webpack_require__(7624);
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class ArmorItemConfig extends ItemConfig_1.ItemConfig {
    constructor(armorItemConfigOption) {
        super(armorItemConfigOption.id, armorItemConfigOption.size, armorItemConfigOption.type, armorItemConfigOption.image, armorItemConfigOption.weight, armorItemConfigOption.info, armorItemConfigOption.option, armorItemConfigOption.itemId);
    }
    getData() {
        var _a, _b;
        return ((_a = config_1.ArmorConfig[this.id]) === null || _a === void 0 ? void 0 : _a.physical) == null ? 0 : (_b = config_1.ArmorConfig[this.id]) === null || _b === void 0 ? void 0 : _b.physical;
    }
    getDTO(id, position, isTurned, amount) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const info = this.info;
        if (!info.parameters) {
            info.parameters = [];
        }
        if (info.parameters.every(param => param.title !== 'Физическая Защита' && param.title !== 'Магическая Защита')) {
            info.parameters.splice(1, 0, {
                title: 'Физическая Защита',
                value: `${((_a = config_1.ArmorConfig[this.id]) === null || _a === void 0 ? void 0 : _a.physical) == null ? 0 : (_b = config_1.ArmorConfig[this.id]) === null || _b === void 0 ? void 0 : _b.physical}`,
            });
            info.parameters.splice(2, 0, {
                title: 'Магическая Защита',
                value: `${((_c = config_1.ArmorConfig[this.id]) === null || _c === void 0 ? void 0 : _c.magic) == null ? 0 : (_d = config_1.ArmorConfig[this.id]) === null || _d === void 0 ? void 0 : _d.magic}`,
            });
        }
        return {
            id: id,
            size: this.size,
            position: position,
            image: this.image,
            isTurned: isTurned,
            amount: amount,
            type: this.type,
            weight: this.weight,
            info: this.info,
            wearable: (_e = this.option) === null || _e === void 0 ? void 0 : _e.wearable,
            armor: (_j = (_g = (_f = config_1.ArmorConfig[this.id]) === null || _f === void 0 ? void 0 : _f.physical) !== null && _g !== void 0 ? _g : 0 + ((_h = config_1.ArmorConfig[this.id]) === null || _h === void 0 ? void 0 : _h.magic)) !== null && _j !== void 0 ? _j : 0,
        };
    }
    static getInfo(infoOption) {
        return {
            quality: infoOption.quality,
            name: infoOption.name,
            parameters: [
                { title: 'Броня', value: infoOption.type },
                { title: 'Состояние', value: `${100}%` },
                { title: 'Вес', value: `${infoOption.weight}кг.` },
            ],
            description: infoOption.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.PUT_ON], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.ArmorItemConfig = ArmorItemConfig;


/***/ }),

/***/ 659:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BackpackItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class BackpackItemConfig extends ItemConfig_1.ItemConfig {
    constructor(backpackItemConfigOptions) {
        super(backpackItemConfigOptions.id, backpackItemConfigOptions.size, backpackItemConfigOptions.type, backpackItemConfigOptions.image, backpackItemConfigOptions.weight, backpackItemConfigOptions.info, { maxStack: 1, wearable: { slot: [itemType_1.CharSlots.Backpack] } }, backpackItemConfigOptions.itemId);
    }
    getData() {
        return 0;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Вместимость', value: 'Средняя' },
                { title: 'Вес', value: `${infoOptions.weight} кг.` },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.PUT_ON], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.BackpackItemConfig = BackpackItemConfig;


/***/ }),

/***/ 8365:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommonItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class CommonItemConfig extends ItemConfig_1.ItemConfig {
    constructor(commonItemConfigOptions) {
        super(commonItemConfigOptions.id, commonItemConfigOptions.size, commonItemConfigOptions.type, commonItemConfigOptions.image, commonItemConfigOptions.weight, commonItemConfigOptions.info, commonItemConfigOptions.option, commonItemConfigOptions.itemId);
    }
    getData() {
        return null;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [{ title: 'Вес', value: `${infoOptions.weight} кг.` }],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.CommonItemConfig = CommonItemConfig;


/***/ }),

/***/ 8598:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DrinksItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class DrinksItemConfig extends ItemConfig_1.ItemConfig {
    constructor(drinksItemConfigOptions) {
        super(drinksItemConfigOptions.id, drinksItemConfigOptions.size, drinksItemConfigOptions.type, drinksItemConfigOptions.image, drinksItemConfigOptions.weight, drinksItemConfigOptions.info, drinksItemConfigOptions.option, drinksItemConfigOptions.itemId);
        this.thirstValue = drinksItemConfigOptions.thirstValue;
    }
    getData() {
        return this.thirstValue;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Восполняет', value: `${infoOptions.thirstValue} ед. жажды` },
                { title: 'Вес', value: `${infoOptions.weight} кг.` },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.DRINK], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.DrinksItemConfig = DrinksItemConfig;


/***/ }),

/***/ 5089:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoodAndWaterItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class FoodAndWaterItemConfig extends ItemConfig_1.ItemConfig {
    constructor(foodAndWaterItemConfigOptions) {
        super(foodAndWaterItemConfigOptions.id, foodAndWaterItemConfigOptions.size, foodAndWaterItemConfigOptions.type, foodAndWaterItemConfigOptions.image, foodAndWaterItemConfigOptions.weight, foodAndWaterItemConfigOptions.info, foodAndWaterItemConfigOptions.option, foodAndWaterItemConfigOptions.itemId);
        this.hungersThirstValue = foodAndWaterItemConfigOptions.value;
    }
    getData() {
        return this.hungersThirstValue;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Восполняет', value: `${infoOptions.value.thirstValue} ед. жажды` },
                { title: 'Восполняет', value: `${infoOptions.value.hungersValue} ед. еды` },
                { title: 'Вес', value: `${infoOptions.weight} кг.` },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.FOOD_AND_WATER], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.FoodAndWaterItemConfig = FoodAndWaterItemConfig;


/***/ }),

/***/ 3970:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoodItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class FoodItemConfig extends ItemConfig_1.ItemConfig {
    constructor(foodItemConfigOptions) {
        super(foodItemConfigOptions.id, foodItemConfigOptions.size, foodItemConfigOptions.type, foodItemConfigOptions.image, foodItemConfigOptions.weight, foodItemConfigOptions.info, foodItemConfigOptions.option, foodItemConfigOptions.itemId);
        this.eatValue = foodItemConfigOptions.eatValue;
    }
    getData() {
        return this.eatValue;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Восполняет', value: `${infoOptions.eatValue} ед. еды` },
                { title: 'Вес', value: `${infoOptions.weight} кг.` },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.EAT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.FoodItemConfig = FoodItemConfig;


/***/ }),

/***/ 7457:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ItemConfig = void 0;
class ItemConfig {
    constructor(_id, _size, _type, _image, _weight, _info, _option, _itemId) {
        this._id = _id;
        this._size = _size;
        this._type = _type;
        this._image = _image;
        this._weight = _weight;
        this._info = _info;
        this._option = _option;
        this._itemId = _itemId;
    }
    get id() {
        return this._id;
    }
    get size() {
        return this._size;
    }
    get type() {
        return this._type;
    }
    get itemId() {
        return this._itemId;
    }
    get weight() {
        return this._weight;
    }
    get info() {
        return this._info;
    }
    get image() {
        return this._image;
    }
    get option() {
        if (!this._option) {
            return { maxStack: 1 };
        }
        else {
            if (this._option.maxStack == null) {
                return Object.assign(Object.assign({}, this._option), { maxStack: 1 });
            }
            return this._option;
        }
    }
    getAction() {
        return this.info.actions;
    }
    getData() {
        return null;
    }
    getDropDTO(id, amount) {
        var _a;
        return {
            id: id,
            size: this.size,
            image: this.image,
            amount: amount,
            type: this.type,
            weight: this.weight,
            info: this.info,
            wearable: (_a = this.option) === null || _a === void 0 ? void 0 : _a.wearable,
            itemHash: this.id,
        };
    }
    getDTO(id, position, isTurned, amount) {
        var _a;
        return {
            id: id,
            size: this.size,
            position: position,
            image: this.image,
            isTurned: isTurned,
            amount: amount,
            type: this.type,
            weight: this.weight,
            info: this.info,
            wearable: (_a = this.option) === null || _a === void 0 ? void 0 : _a.wearable,
            itemHash: this.id,
        };
    }
}
exports.ItemConfig = ItemConfig;


/***/ }),

/***/ 8153:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PotionsItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class PotionsItemConfig extends ItemConfig_1.ItemConfig {
    constructor(potionsItemConfigOptions) {
        super(potionsItemConfigOptions.id, potionsItemConfigOptions.size, potionsItemConfigOptions.type, potionsItemConfigOptions.image, potionsItemConfigOptions.weight, potionsItemConfigOptions.info, potionsItemConfigOptions.option, potionsItemConfigOptions.itemId);
        this.action = potionsItemConfigOptions.action;
    }
    getData() {
        return this.action;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Вес', value: `${infoOptions.weight} кг.` },
                { title: infoOptions.action.title, value: infoOptions.action.value },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.USE_POTION], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.PotionsItemConfig = PotionsItemConfig;


/***/ }),

/***/ 9416:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RodItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class RodItemConfig extends ItemConfig_1.ItemConfig {
    constructor(rodItemConfigOptions) {
        super(rodItemConfigOptions.id, rodItemConfigOptions.size, rodItemConfigOptions.type, rodItemConfigOptions.image, rodItemConfigOptions.weight, rodItemConfigOptions.info, rodItemConfigOptions.option, rodItemConfigOptions.itemId);
    }
    getData() {
        return null;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [{ title: 'Вес', value: `${infoOptions.weight} кг.` }],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.USE_ROD], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.RodItemConfig = RodItemConfig;


/***/ }),

/***/ 3287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShovelItemConfig = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
class ShovelItemConfig extends ItemConfig_1.ItemConfig {
    constructor(shovelItemConfigOptions) {
        super(shovelItemConfigOptions.id, shovelItemConfigOptions.size, shovelItemConfigOptions.type, shovelItemConfigOptions.image, shovelItemConfigOptions.weight, shovelItemConfigOptions.info, shovelItemConfigOptions.option, shovelItemConfigOptions.itemId);
    }
    getData() {
        return null;
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [{ title: 'Вес', value: `${infoOptions.weight} кг.` }],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.USE_SHOVEL], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.ShovelItemConfig = ShovelItemConfig;


/***/ }),

/***/ 4209:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WeaponItemConfig = exports.WeaponCategory = exports.WeaponRange = void 0;
const itemType_1 = __webpack_require__(4405);
const ItemConfig_1 = __webpack_require__(7457);
const config_1 = __webpack_require__(3486);
var WeaponRange;
(function (WeaponRange) {
    WeaponRange["MELEE"] = "MELEE";
    WeaponRange["RANGE"] = "RANGE";
})(WeaponRange = exports.WeaponRange || (exports.WeaponRange = {}));
var WeaponCategory;
(function (WeaponCategory) {
    WeaponCategory["None"] = "none";
    WeaponCategory["Dagger"] = "Dagger";
    WeaponCategory["Sword"] = "Sword";
    WeaponCategory["GreatSword"] = "GreatSword";
    WeaponCategory["Mace"] = "Mace";
    WeaponCategory["WarAxe"] = "WarAxe";
    WeaponCategory["BattleAxe"] = "BattleAxe";
    WeaponCategory["WarHammer"] = "WarHammer";
    WeaponCategory["Bow"] = "Bow";
})(WeaponCategory = exports.WeaponCategory || (exports.WeaponCategory = {}));
class WeaponItemConfig extends ItemConfig_1.ItemConfig {
    constructor(weaponItemConfigOptions) {
        super(weaponItemConfigOptions.id, weaponItemConfigOptions.size, weaponItemConfigOptions.type, weaponItemConfigOptions.image, weaponItemConfigOptions.weight, weaponItemConfigOptions.info, weaponItemConfigOptions.option, weaponItemConfigOptions.itemId);
        this.weaponRange = weaponItemConfigOptions.weaponRange;
    }
    getData() {
        return 0;
    }
    getWeaponRange() {
        return this.weaponRange;
    }
    getDTO(id, position, isTurned, amount) {
        var _a;
        const info = this.info;
        if (!info.parameters) {
            info.parameters = [];
        }
        if (info.parameters.every(param => param.title !== 'Урон')) {
            info.parameters.splice(1, 0, { title: 'Урон', value: `${config_1.DamageConfig[this.id].standard}` });
        }
        return {
            id: id,
            size: this.size,
            position: position,
            image: this.image,
            isTurned: isTurned,
            amount: amount,
            type: this.type,
            weight: this.weight,
            info: info,
            wearable: (_a = this.option) === null || _a === void 0 ? void 0 : _a.wearable,
        };
    }
    static getInfo(infoOptions) {
        return {
            quality: infoOptions.quality,
            name: infoOptions.name,
            parameters: [
                { title: 'Тип Оружия', value: infoOptions.type },
                { title: 'Состояние', value: `${100}%` },
                { title: 'Вес', value: `${infoOptions.weight}кг.` },
            ],
            description: infoOptions.description,
            actions: [itemType_1.ItemActionConfig[itemType_1.ItemActionType.PUT_ON], itemType_1.ItemActionConfig[itemType_1.ItemActionType.SPLIT], itemType_1.ItemActionConfig[itemType_1.ItemActionType.DROP]],
        };
    }
}
exports.WeaponItemConfig = WeaponItemConfig;


/***/ }),

/***/ 9110:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LableEvents = void 0;
var LableEvents;
(function (LableEvents) {
    LableEvents["create"] = "createLable";
    LableEvents["destroy"] = "destroyLable";
})(LableEvents = exports.LableEvents || (exports.LableEvents = {}));


/***/ }),

/***/ 9740:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonEvents = exports.NpcDialogEvents = void 0;
var NpcDialogEvents;
(function (NpcDialogEvents) {
    NpcDialogEvents["ClickButton"] = "npcDialog:clickButton";
})(NpcDialogEvents = exports.NpcDialogEvents || (exports.NpcDialogEvents = {}));
var ButtonEvents;
(function (ButtonEvents) {
    ButtonEvents["Exit"] = "exit";
})(ButtonEvents = exports.ButtonEvents || (exports.ButtonEvents = {}));


/***/ }),

/***/ 593:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VoiceChatEvents = exports.ServerUtilsEvents = exports.SessionTime = exports.CursorEvents = exports.ServerAdminEvents = exports.ServerEvents = void 0;
var ServerEvents;
(function (ServerEvents) {
    ServerEvents["PreLoad"] = "system:preLoad";
    ServerEvents["PlayerSpawn"] = "system:playerSpawn";
    ServerEvents["PlayerDisconnect"] = "system:playerDisconnect";
    ServerEvents["PlayerDeath"] = "system:playerDeath";
    ServerEvents["CreatePayment"] = "system:createPayment";
})(ServerEvents = exports.ServerEvents || (exports.ServerEvents = {}));
var ServerAdminEvents;
(function (ServerAdminEvents) {
    ServerAdminEvents["AdminLogin"] = "admin:adminLogin";
    ServerAdminEvents["AdminLogout"] = "admin:adminLogout";
})(ServerAdminEvents = exports.ServerAdminEvents || (exports.ServerAdminEvents = {}));
var CursorEvents;
(function (CursorEvents) {
    CursorEvents["Close"] = "cursor:close";
})(CursorEvents = exports.CursorEvents || (exports.CursorEvents = {}));
var SessionTime;
(function (SessionTime) {
    SessionTime["HourHasPassed"] = "sessionTime:hourHasPassed";
})(SessionTime = exports.SessionTime || (exports.SessionTime = {}));
var ServerUtilsEvents;
(function (ServerUtilsEvents) {
    ServerUtilsEvents["GameRestriction"] = "system:gameRestriction";
    ServerUtilsEvents["Teleport"] = "system:teleport";
})(ServerUtilsEvents = exports.ServerUtilsEvents || (exports.ServerUtilsEvents = {}));
var VoiceChatEvents;
(function (VoiceChatEvents) {
    VoiceChatEvents["ToggleVoice"] = "voiceChat:toggleVoice";
})(VoiceChatEvents = exports.VoiceChatEvents || (exports.VoiceChatEvents = {}));


/***/ }),

/***/ 4416:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingParameterType = void 0;
var SettingParameterType;
(function (SettingParameterType) {
    SettingParameterType[SettingParameterType["Select"] = 0] = "Select";
    SettingParameterType[SettingParameterType["Range"] = 1] = "Range";
    SettingParameterType[SettingParameterType["Checkbox"] = 2] = "Checkbox";
    SettingParameterType[SettingParameterType["Input"] = 3] = "Input";
    SettingParameterType[SettingParameterType["List"] = 4] = "List";
    SettingParameterType[SettingParameterType["Bind"] = 5] = "Bind";
})(SettingParameterType = exports.SettingParameterType || (exports.SettingParameterType = {}));


/***/ }),

/***/ 6603:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingSectionId = void 0;
var SettingSectionId;
(function (SettingSectionId) {
    SettingSectionId["Keyboard_General"] = "keyboard_general";
    SettingSectionId["Keyboard_Movement"] = "keyboard_movement";
    SettingSectionId["Keyboard_Animation"] = "keyboard_animation";
    SettingSectionId["Keyboard_Communication"] = "keyboard_communication";
    SettingSectionId["Keyboard_Interface"] = "keyboard_interface";
    SettingSectionId["Keyboard_Interaction"] = "keyboard_interaction";
    SettingSectionId["Sound_General"] = "sound_general";
    SettingSectionId["Sound_Voice"] = "sound_voice";
    SettingSectionId["Game_General"] = "game_general";
    SettingSectionId["Video_General"] = "video_general";
    SettingSectionId["Video_Fade"] = "video_fade";
})(SettingSectionId = exports.SettingSectionId || (exports.SettingSectionId = {}));


/***/ }),

/***/ 9373:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingsId = void 0;
var SettingsId;
(function (SettingsId) {
    SettingsId["Binder_Default_W"] = "binder_default_w";
    SettingsId["Binder_Default_A"] = "binder_default_a";
    SettingsId["Binder_Default_S"] = "binder_default_s";
    SettingsId["Binder_Default_D"] = "binder_default_d";
    SettingsId["Binder_Default_Jump"] = "binder_default_jump";
    SettingsId["Binder_Default_Sprint"] = "binder_default_sprint";
    SettingsId["Binder_Default_Ctrl"] = "binder_default_ctrl";
    SettingsId["Binder_Default_Step"] = "binder_default_step";
    SettingsId["Binder_Default_Combat_Mode"] = "binder_default_combat_mode";
    SettingsId["Binder_Default_Attack_Right"] = "binder_default_attack_right";
    SettingsId["Binder_Default_Target"] = "binder_default_target";
    SettingsId["Binder_Default_Attack_Left"] = "binder_default_attack_left";
    SettingsId["Binder_Default_EscMenu"] = "binder_escmenu";
    SettingsId["Binder_Inventory"] = "binder_inventory";
    SettingsId["Binder_Skins"] = "binder_skins";
    SettingsId["Binder_Animation_Menu"] = "binder_animation_menu";
    SettingsId["Binder_Animation_Radial"] = "binder_animation_radial";
    SettingsId["Binder_Stop_Animation"] = "binder_stop_animation";
    SettingsId["Binder_Nicknames"] = "binder_nicknames";
    SettingsId["Binder_Hud"] = "binder_hud";
    SettingsId["Binder_Cursor"] = "binder_cursor";
    SettingsId["Binder_Voice"] = "binder_voice";
    SettingsId["Binder_Chat"] = "binder_chat";
    SettingsId["Binder_Colshape"] = "binder_colshape";
    SettingsId["Binder_Accept"] = "binder_accept";
    SettingsId["Binder_Cancel"] = "binder_cancel";
    SettingsId["Binder_Radial"] = "binder_radial";
    SettingsId["Binder_CharacterMenu"] = "binder_character_menu";
    SettingsId["Binder_FactionMenu"] = "binder_faction_menu";
    SettingsId["Binder_AdminPanel"] = "binder_admin_panel";
    SettingsId["Sound_General"] = "sound_general";
    SettingsId["Sound_Music"] = "sound_music";
    SettingsId["Sound_Footstep"] = "sound_footstep";
    SettingsId["Sound_Effects"] = "sound_effects";
    SettingsId["Sound_Voice"] = "sound_voice";
    SettingsId["Sound_Microphone"] = "sound_microphone";
    SettingsId["Sound_RecordDevices"] = "sound_record_devices";
    SettingsId["Game_MouseSensitivity"] = "game_mouse_sensitivity";
    SettingsId["Game_Crosshair"] = "game_crosshair";
    SettingsId["Game_FOV"] = "game_fov";
    SettingsId["Video_GrassFade"] = "video_grass_fade";
    SettingsId["Video_ObjectFade"] = "video_object_fade";
    SettingsId["Video_Gamma"] = "video_gamma";
    SettingsId["Video_ActorFade"] = "video_actor_fade";
    SettingsId["Video_ItemFade"] = "video_item_fade";
})(SettingsId = exports.SettingsId || (exports.SettingsId = {}));


/***/ }),

/***/ 7761:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingsTabId = void 0;
var SettingsTabId;
(function (SettingsTabId) {
    SettingsTabId["Sound"] = "sound";
    SettingsTabId["Keyboard"] = "keyboadr";
    SettingsTabId["Graphics"] = "graphics";
    SettingsTabId["Account"] = "account";
    SettingsTabId["GameProcess"] = "gameProcess";
    SettingsTabId["Chat"] = "chat";
})(SettingsTabId = exports.SettingsTabId || (exports.SettingsTabId = {}));


/***/ }),

/***/ 4572:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SettingsConfig = exports.SettingSectionConfig = void 0;
const SettingsId_1 = __webpack_require__(9373);
const SettingsTabId_1 = __webpack_require__(7761);
const SettingParameterType_1 = __webpack_require__(4416);
const SettingSectionId_1 = __webpack_require__(6603);
const BinderHash_1 = __webpack_require__(6940);
const events_1 = __webpack_require__(8007);
const events_2 = __webpack_require__(7914);
const events_3 = __webpack_require__(3602);
const events_4 = __webpack_require__(1930);
const events_5 = __webpack_require__(9321);
const events_6 = __webpack_require__(8797);
const serverEvents_1 = __webpack_require__(593);
const events_7 = __webpack_require__(5592);
const events_8 = __webpack_require__(3405);
exports.SettingSectionConfig = {
    [SettingSectionId_1.SettingSectionId.Keyboard_General]: 'Общее',
    [SettingSectionId_1.SettingSectionId.Keyboard_Movement]: 'Управление',
    [SettingSectionId_1.SettingSectionId.Keyboard_Animation]: 'Анимации',
    [SettingSectionId_1.SettingSectionId.Keyboard_Communication]: 'Общение',
    [SettingSectionId_1.SettingSectionId.Keyboard_Interface]: 'Игровой интерфейс',
    [SettingSectionId_1.SettingSectionId.Keyboard_Interaction]: 'Взаимодействие',
    [SettingSectionId_1.SettingSectionId.Sound_General]: 'Общее',
    [SettingSectionId_1.SettingSectionId.Sound_Voice]: 'Голосовой чат',
    [SettingSectionId_1.SettingSectionId.Game_General]: 'Общее',
    [SettingSectionId_1.SettingSectionId.Video_General]: 'Общее',
    [SettingSectionId_1.SettingSectionId.Video_Fade]: 'Дальность прорисовки',
};
exports.SettingsConfig = {
    [SettingsId_1.SettingsId.Binder_Default_W]: {
        title: 'Идти вперед',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_W,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_A]: {
        title: 'Идти влево',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_A,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_D]: {
        title: 'Идти вправо',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_D,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_S]: {
        title: 'Идти назад',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_S,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Jump]: {
        title: 'Прыжок',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Jump,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Sprint]: {
        title: 'Бег',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Sprint,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Step]: {
        title: 'Шаг',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Step,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Ctrl]: {
        title: 'Красться',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Ctrl,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Combat_Mode]: {
        title: 'Боевой режим',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Combat_Mode,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Attack_Right]: {
        title: 'Атака правой рукой',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Attack_Right,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Target]: {
        title: 'Захват цели',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Target,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_Attack_Left]: {
        title: 'Атака левой рукой',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Movement,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Default_Attack_Left,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Default_EscMenu]: {
        title: 'Escape Меню',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_General,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.EscMenu,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Inventory]: {
        title: 'Инвентарь',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_General,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Inventory,
            isBlocked: false,
            closeInterfaceEvent: events_1.InventoryEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_Skins]: {
        title: 'Меню Скинов',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_General,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Skins,
            isBlocked: false,
            closeInterfaceEvent: events_8.SkinsEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_FactionMenu]: {
        title: 'Открыть Меню Фракции',
        disabledDefault: true,
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_General,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.FactionMenu,
            isBlocked: true,
            closeInterfaceEvent: events_2.FractionEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_CharacterMenu]: {
        title: 'Меню персонажа',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_General,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.CharacterMenu,
            isBlocked: true,
            closeInterfaceEvent: events_3.CharacterMenuEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_AdminPanel]: {
        title: 'Админ панель',
        disabledDefault: true,
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_General,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.AdminPanel,
            isBlocked: true,
            closeInterfaceEvent: events_4.AdminPanelEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_Animation_Menu]: {
        title: 'Меню Анимаций',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Animation,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.AnimationMenu,
            isBlocked: false,
            closeInterfaceEvent: events_5.AnimationsMenuEvents.Exit,
        },
    },
    [SettingsId_1.SettingsId.Binder_Animation_Radial]: {
        title: 'Быстрые Анимации',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Animation,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.AnimationRadial,
            isBlocked: false,
            closeInterfaceEvent: events_6.RadialMenuEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_Stop_Animation]: {
        title: 'Остановить Анимации',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Animation,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.StopAnimation,
            isBlocked: false,
        },
    },
    [SettingsId_1.SettingsId.Binder_Nicknames]: {
        title: 'Показать/Скрыть Ники Игроков',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interface,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Nicknames,
            isBlocked: false,
        },
    },
    [SettingsId_1.SettingsId.Binder_Hud]: {
        title: 'Показать/Скрыть HUD',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interface,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Hud,
            isBlocked: false,
        },
    },
    [SettingsId_1.SettingsId.Binder_Cursor]: {
        title: 'Показать/Скрыть Курсор',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interface,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Cursor,
            isBlocked: true,
            closeInterfaceEvent: serverEvents_1.CursorEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Binder_Chat]: {
        title: 'Текстовый Чат',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Communication,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Chat,
            isBlocked: true,
            closeInterfaceEvent: events_7.HudEvents.HideInput,
        },
    },
    [SettingsId_1.SettingsId.Binder_Voice]: {
        title: 'Голосовой чат',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Communication,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Voice,
            isBlocked: false,
        },
    },
    [SettingsId_1.SettingsId.Binder_Colshape]: {
        title: 'Взаимодействие',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interaction,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Colshape,
            isBlocked: false,
        },
    },
    [SettingsId_1.SettingsId.Binder_Accept]: {
        title: 'Принять предложение',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interaction,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Accept,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Cancel]: {
        title: 'Отклонить предложение',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interaction,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Cancel,
            isBlocked: true,
        },
    },
    [SettingsId_1.SettingsId.Binder_Radial]: {
        title: 'Радиальное меню',
        category: SettingsTabId_1.SettingsTabId.Keyboard,
        section: SettingSectionId_1.SettingSectionId.Keyboard_Interaction,
        type: SettingParameterType_1.SettingParameterType.Bind,
        data: {
            id: BinderHash_1.BinderHash.Radial,
            isBlocked: false,
            closeInterfaceEvent: events_6.RadialMenuEvents.Close,
        },
    },
    [SettingsId_1.SettingsId.Sound_General]: {
        title: 'Общая громкость',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 1,
            step: 0.001,
        },
    },
    [SettingsId_1.SettingsId.Sound_Music]: {
        title: 'Громкость музыки',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 1,
            step: 0.001,
        },
    },
    [SettingsId_1.SettingsId.Sound_Effects]: {
        title: 'Громкость эффектов',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 1,
            step: 0.001,
        },
    },
    [SettingsId_1.SettingsId.Sound_Footstep]: {
        title: 'Громкость шагов',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 1,
            step: 0.001,
        },
    },
    [SettingsId_1.SettingsId.Sound_Microphone]: {
        title: 'Громкость микрофона',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_Voice,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 1,
            step: 0.001,
        },
    },
    [SettingsId_1.SettingsId.Sound_Voice]: {
        title: 'Громкость голосового чата',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_Voice,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 1,
            step: 0.001,
        },
    },
    [SettingsId_1.SettingsId.Sound_RecordDevices]: {
        title: 'Ввод звука',
        category: SettingsTabId_1.SettingsTabId.Sound,
        section: SettingSectionId_1.SettingSectionId.Sound_Voice,
        type: SettingParameterType_1.SettingParameterType.List,
        data: null,
    },
    [SettingsId_1.SettingsId.Game_MouseSensitivity]: {
        title: 'Чувствительность мыши',
        category: SettingsTabId_1.SettingsTabId.GameProcess,
        section: SettingSectionId_1.SettingSectionId.Game_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0.01,
            max: 0.05,
            step: 0.0004,
        },
    },
    [SettingsId_1.SettingsId.Game_Crosshair]: {
        title: 'Показывать прицел',
        category: SettingsTabId_1.SettingsTabId.GameProcess,
        section: SettingSectionId_1.SettingSectionId.Game_General,
        type: SettingParameterType_1.SettingParameterType.Checkbox,
        data: {
            helper: '',
        },
    },
    [SettingsId_1.SettingsId.Game_FOV]: {
        title: 'FOV',
        category: SettingsTabId_1.SettingsTabId.GameProcess,
        section: SettingSectionId_1.SettingSectionId.Game_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 80,
            max: 120,
            step: 5,
        },
    },
    [SettingsId_1.SettingsId.Video_Gamma]: {
        title: 'Яркость',
        category: SettingsTabId_1.SettingsTabId.Graphics,
        section: SettingSectionId_1.SettingSectionId.Video_General,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: -2,
            max: 2,
            step: 0.0001,
        },
    },
    [SettingsId_1.SettingsId.Video_ActorFade]: {
        title: 'Дальность прорисовки игроков',
        category: SettingsTabId_1.SettingsTabId.Graphics,
        section: SettingSectionId_1.SettingSectionId.Video_Fade,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 2.5,
            max: 15,
            step: 0.5,
        },
    },
    [SettingsId_1.SettingsId.Video_ItemFade]: {
        title: 'Дальность прорисовки предметов',
        category: SettingsTabId_1.SettingsTabId.Graphics,
        section: SettingSectionId_1.SettingSectionId.Video_Fade,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 1,
            max: 15,
            step: 0.5,
        },
    },
    [SettingsId_1.SettingsId.Video_ObjectFade]: {
        title: 'Дальность прорисовки объектов',
        category: SettingsTabId_1.SettingsTabId.Graphics,
        section: SettingSectionId_1.SettingSectionId.Video_Fade,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 2.5,
            max: 15,
            step: 0.5,
        },
    },
    [SettingsId_1.SettingsId.Video_GrassFade]: {
        title: 'Дальность прорисовки травы',
        category: SettingsTabId_1.SettingsTabId.Graphics,
        section: SettingSectionId_1.SettingSectionId.Video_Fade,
        type: SettingParameterType_1.SettingParameterType.Range,
        data: {
            min: 0,
            max: 7000,
            step: 500,
        },
    },
};


/***/ }),

/***/ 8939:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EscMenuClientEvents = exports.SettingsEvents = exports.EscMenuEvents = void 0;
var EscMenuEvents;
(function (EscMenuEvents) {
    EscMenuEvents["RequestMap"] = "escMenu:requestMap";
    EscMenuEvents["RequestExit"] = "escMenu:requestExit";
    EscMenuEvents["UpdateSettingValue"] = "escMenu:updateSettingValue";
    EscMenuEvents["RequestClose"] = "escMenu:requestClose";
    EscMenuEvents["SaveSettings"] = "escMenu:saveSettings";
    EscMenuEvents["GetOldSettings"] = "escMenu:getOldSettings";
    EscMenuEvents["AddNewMacros"] = "escMenu:addNewMacros";
    EscMenuEvents["RemoveMacros"] = "escMenu:removeMacros";
    EscMenuEvents["SaveMacros"] = "escMenu:saveMacros";
    EscMenuEvents["CreateTicket"] = "escMenu:createTicket";
    EscMenuEvents["SetCurrentTicket"] = "escMenu:setCurrentTicket";
    EscMenuEvents["AddTicketMessage"] = "escMenu:addTicketMessage";
})(EscMenuEvents = exports.EscMenuEvents || (exports.EscMenuEvents = {}));
var SettingsEvents;
(function (SettingsEvents) {
    SettingsEvents["Update"] = "settings:update";
    SettingsEvents["Init"] = "settings:init";
    SettingsEvents["UpdateSettings"] = "settings:updateSettings";
})(SettingsEvents = exports.SettingsEvents || (exports.SettingsEvents = {}));
var EscMenuClientEvents;
(function (EscMenuClientEvents) {
    EscMenuClientEvents["OpenMap"] = "escMenu:openMap";
    EscMenuClientEvents["ExitGame"] = "escMenu:exitGame";
})(EscMenuClientEvents = exports.EscMenuClientEvents || (exports.EscMenuClientEvents = {}));


/***/ }),

/***/ 9714:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setActorValuePercentage = exports.getMaximumActorValue = exports.getActorValues = void 0;
const getActorValues = (ac) => {
    if (!ac) {
        return { health: 0, stamina: 0, magicka: 0 };
    }
    const healthPercentage = ac.isDead() ? 0 : ac.getActorValuePercentage('health');
    const staminaPercentage = ac.getActorValuePercentage('stamina');
    const magickaPercentage = ac.getActorValuePercentage('magicka');
    const resultActorValue = {
        health: healthPercentage,
        stamina: staminaPercentage,
        magicka: magickaPercentage,
    };
    return resultActorValue;
};
exports.getActorValues = getActorValues;
const getMaximumActorValue = (ac, avName) => {
    const currentPercentage = ac.getActorValuePercentage(avName);
    return currentPercentage === 0 ? ac.getBaseActorValue(avName) : Math.ceil(ac.getActorValue(avName) / currentPercentage);
};
exports.getMaximumActorValue = getMaximumActorValue;
const setActorValuePercentage = (ac, avName, percentage) => {
    const currentPercentage = ac.getActorValuePercentage(avName);
    if (currentPercentage === percentage) {
        return;
    }
    const currentMaxValue = (0, exports.getMaximumActorValue)(ac, avName);
    const deltaPercentage = percentage - currentPercentage;
    if (deltaPercentage > 0) {
        ac.restoreActorValue(avName, deltaPercentage * currentMaxValue);
    }
    else if (deltaPercentage < 0) {
        ac.damageActorValue(avName, deltaPercentage * currentMaxValue);
    }
};
exports.setActorValuePercentage = setActorValuePercentage;


/***/ }),

/***/ 933:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setupHooks = exports.AnimationSource = exports.setDefaultAnimsDisabled = exports.applyAnimation = exports.AnimationEventName = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const movementApply_1 = __webpack_require__(4885);
var AnimationEventName;
(function (AnimationEventName) {
    AnimationEventName["Ragdoll"] = "Ragdoll";
    AnimationEventName["GetUpBegin"] = "GetUpBegin";
})(AnimationEventName = exports.AnimationEventName || (exports.AnimationEventName = {}));
const allowedIdles = new Array();
const refsWithDefaultAnimsDisabled = new Set();
const allowedAnims = new Set();
const isIdle = (animEventName) => {
    return (animEventName === 'MotionDrivenIdle' ||
        (animEventName.startsWith('Idle') && animEventName !== 'IdleStop' && animEventName !== 'IdleForceDefaultState'));
};
const applyAnimation = (refr, anim, state) => {
    if (state.lastNumChanges === anim.numChanges) {
        return;
    }
    state.lastNumChanges = anim.numChanges;
    if (isIdle(anim.animEventName)) {
        allowedIdles.push([refr.getFormID(), anim.animEventName]);
    }
    const ac = skyrimPlatform_1.Actor.from(refr);
    if (anim.animEventName === 'SkympFakeEquip') {
        if (ac) {
            (0, movementApply_1.applyWeapDrawn)(ac, true);
        }
        return;
    }
    if (anim.animEventName === 'SkympFakeUnequip') {
        if (ac) {
            (0, movementApply_1.applyWeapDrawn)(ac, false);
        }
        return;
    }
    if (anim.animEventName === 'Ragdoll') {
        if (ac) {
            if (skyrimPlatform_1.storage.animationFunc1Set === true) {
                skyrimPlatform_1.storage.animationFunc1(ac);
            }
            else {
                ac.pushActorAway(ac, 0);
                ac.setActorValue('Variable10', -1000);
            }
        }
        return;
    }
    if (refsWithDefaultAnimsDisabled.has(refr.getFormID())) {
        if (anim.animEventName.toLowerCase().includes('attack')) {
            allowedAnims.add(refr.getFormID() + ':' + anim.animEventName);
        }
    }
    skyrimPlatform_1.Debug.sendAnimationEvent(refr, anim.animEventName);
    if (anim.animEventName === 'GetUpBegin') {
        const refrId = refr.getFormID();
        skyrimPlatform_1.Utility.wait(1).then(() => {
            const ac = skyrimPlatform_1.Actor.from(skyrimPlatform_1.Game.getFormEx(refrId));
            if (ac) {
                ac.setActorValue('Variable10', 1000);
            }
        });
    }
};
exports.applyAnimation = applyAnimation;
const setDefaultAnimsDisabled = (refrId, disabled) => {
    if (disabled) {
        refsWithDefaultAnimsDisabled.add(refrId);
    }
    else {
        refsWithDefaultAnimsDisabled.delete(refrId);
    }
};
exports.setDefaultAnimsDisabled = setDefaultAnimsDisabled;
class AnimationSource {
    constructor(refr) {
        this.refrId = 0;
        this.numChanges = 0;
        this.animEventName = '';
        this.weapNonDrawnBlocker = 0;
        this.weapDrawnBlocker = 0;
        this.sneakBlocker = null;
        this.refrId = refr.getFormID();
        skyrimPlatform_1.hooks.sendAnimationEvent.add({
            enter: () => { },
            leave: ctx => {
                if (ctx.selfId !== this.refrId) {
                    return;
                }
                if (!ctx.animationSucceeded) {
                    if (ctx.animEventName !== 'OffsetCarryBasketStart') {
                        return;
                    }
                }
                this.onSendAnimationEvent(ctx.animEventName);
            },
        });
    }
    filterMovement(mov) {
        if (this.weapDrawnBlocker >= Date.now()) {
            mov.isWeapDrawn = true;
        }
        if (this.weapNonDrawnBlocker >= Date.now()) {
            mov.isWeapDrawn = false;
        }
        if (this.sneakBlocker === mov.isSneaking) {
            this.sneakBlocker = null;
        }
        else if (this.sneakBlocker === true) {
            mov.isSneaking = true;
        }
        else if (this.sneakBlocker === false) {
            mov.isSneaking = false;
        }
        return mov;
    }
    getAnimation() {
        const { numChanges, animEventName } = this;
        return { numChanges, animEventName };
    }
    onSendAnimationEvent(animEventName) {
        if (ignoredAnims.has(animEventName)) {
            return;
        }
        const lower = animEventName.toLowerCase();
        const isTorchEvent = lower.includes('torch');
        if (animEventName.toLowerCase().includes('unequip') && !isTorchEvent) {
            this.weapNonDrawnBlocker = Date.now() + 300;
            animEventName = 'SkympFakeUnequip';
        }
        else if (animEventName.toLowerCase().includes('equip') && !isTorchEvent) {
            this.weapDrawnBlocker = Date.now() + 300;
            animEventName = 'SkympFakeEquip';
        }
        if (animEventName === 'SneakStart') {
            this.sneakBlocker = true;
            return;
        }
        if (animEventName === 'SneakStop') {
            this.sneakBlocker = false;
            return;
        }
        this.numChanges++;
        this.animEventName = animEventName;
    }
}
exports.AnimationSource = AnimationSource;
const ignoredAnims = new Set(['moveStart', 'moveStop', 'turnStop', 'CyclicCrossBlend', 'CyclicFreeze', 'TurnLeft', 'TurnRight']);
const setupHooks = () => {
    skyrimPlatform_1.hooks.sendAnimationEvent.add({
        enter: ctx => {
            if (refsWithDefaultAnimsDisabled.has(ctx.selfId)) {
                if (ctx.animEventName.toLowerCase().includes('attack')) {
                    const animKey = ctx.selfId + ':' + ctx.animEventName;
                    if (allowedAnims.has(animKey)) {
                        allowedAnims.delete(animKey);
                    }
                    else {
                        return (ctx.animEventName = '');
                    }
                }
            }
            if (ctx.animEventName === 'OffsetBoundStandingPlayerInstant') {
                return (ctx.animEventName = '');
            }
            if (ctx.selfId < 0xff000000) {
                return;
            }
            if (isIdle(ctx.animEventName)) {
                const i = allowedIdles.findIndex(pair => {
                    return pair[0] === ctx.selfId && pair[1] === ctx.animEventName;
                });
                i === -1 ? (ctx.animEventName = '') : allowedIdles.splice(i, 1);
            }
        },
        leave: () => { },
    });
};
exports.setupHooks = setupHooks;


/***/ }),

/***/ 282:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppearanceSync = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Player_1 = __webpack_require__(5456);
const defaultConfig_1 = __webpack_require__(978);
const HeadParstExtraSlotsConfig_1 = __webpack_require__(5392);
const type_1 = __webpack_require__(8162);
const Genders_1 = __webpack_require__(6294);
const OPTIONS_LENGTH = 19;
const PRESETS_LENGTH = 4;
const SILENT_VOICE = 0x0002f7c3;
class AppearanceSync {
    static setLocalPlayerAppearance(appearance) {
        this.localPlayerAppearance = appearance;
        this.applyAppearanceToPlayer(this.localPlayerAppearance);
    }
    static updatePlayerAppearance() {
        var _a;
        if (!((_a = this.localPlayerAppearance) === null || _a === void 0 ? void 0 : _a.raceId)) {
            return;
        }
        if (this.compareAppearance(this.localPlayerAppearance, this.getAppearance(Player_1.localPlayer.actor))) {
            return;
        }
        this.applyAppearanceToPlayer(this.localPlayerAppearance);
    }
    static compareAppearance(appearanceOne, appearanceTwo) {
        if ((appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.name) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.name) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.raceId) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.raceId) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.weight) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.weight) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.isFemale) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.isFemale) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.hairColor) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.hairColor) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.skinColor) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.skinColor) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.headTextureSetId) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.headTextureSetId) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.tints.length) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.tints.length) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.options.length) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.options.length) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.presets.length) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.presets.length) ||
            (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.headpartIds.length) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.headpartIds.length)) {
            return false;
        }
        for (let i = 0; i < (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.options.length); i++) {
            if ((appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.options[i]) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.options[i])) {
                return false;
            }
        }
        for (let i = 0; i < (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.presets.length); i++) {
            if ((appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.presets[i]) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.presets[i])) {
                return false;
            }
        }
        for (let i = 0; i < (appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.headpartIds.length); i++) {
            if ((appearanceOne === null || appearanceOne === void 0 ? void 0 : appearanceOne.headpartIds[i]) !== (appearanceTwo === null || appearanceTwo === void 0 ? void 0 : appearanceTwo.headpartIds[i])) {
                return false;
            }
        }
        return true;
    }
    static isVisible(argb) {
        return argb > 0x00ffffff || argb < 0;
    }
    static getAppearance(actor) {
        const base = skyrimPlatform_1.ActorBase.from(actor.getBaseObject());
        const hairColor = base.getHairColor();
        const skinColor = skyrimPlatform_1.TESModPlatform.getSkinColor(base);
        const newAppearance = {
            isFemale: base.getSex() === 1,
            raceId: base.getRace() ? base.getRace().getFormID() : 0,
            weight: base.getWeight(),
            hairColor: hairColor ? hairColor.getColor() : 0,
            headpartIds: [],
            headTextureSetId: base.getFaceTextureSet() ? base.getFaceTextureSet().getFormID() : 0,
            options: new Array(OPTIONS_LENGTH).fill(0),
            presets: new Array(PRESETS_LENGTH).fill(1.0),
            tints: [],
            skinColor: skinColor ? skinColor.getColor() : 0,
            name: actor.getBaseObject().getName(),
        };
        const numHeadparts = base.getNumHeadParts();
        for (let i = 0; i < numHeadparts; ++i) {
            const part = base.getNthHeadPart(i);
            if (part) {
                newAppearance.headpartIds.push(part.getFormID());
            }
        }
        for (let i = 0; i < newAppearance.options.length; ++i) {
            newAppearance.options[i] = base.getFaceMorph(i);
        }
        for (let i = 0; i < newAppearance.presets.length; ++i) {
            newAppearance.presets[i] = base.getFacePreset(i);
        }
        const numTints = skyrimPlatform_1.Game.getPlayer().getFormID() === actor.getFormID() ? skyrimPlatform_1.Game.getNumTintMasks() : 0;
        for (let i = 0; i < numTints; ++i) {
            const tint = {
                texturePath: skyrimPlatform_1.Game.getNthTintMaskTexturePath(i),
                type: skyrimPlatform_1.Game.getNthTintMaskType(i),
                argb: skyrimPlatform_1.Game.getNthTintMaskColor(i),
            };
            newAppearance.tints.push(tint);
        }
        return newAppearance;
    }
    static applyTintToPlayer(tint) {
        const currentTints = this.getAppearance(Player_1.localPlayer.actor).tints;
        const currentTintWithSamePath = currentTints.find(item => item.texturePath === tint.texturePath);
        if (!currentTintWithSamePath) {
            return;
        }
        const curentTintIndex = currentTints.indexOf(currentTintWithSamePath);
        currentTints[curentTintIndex].argb = tint.argb;
        skyrimPlatform_1.TESModPlatform.clearTintMasks(null);
        currentTints.forEach(tint => {
            skyrimPlatform_1.TESModPlatform.pushTintMask(null, tint.type, tint.argb, tint.texturePath);
        });
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
    static resetTintsForPlayer() {
        var _a;
        const race = Player_1.localPlayer.baseActor.getRace() ? Player_1.localPlayer.baseActor.getRace().getFormID() : 0;
        const sex = Player_1.localPlayer.baseActor.getSex();
        const defaultTints = (_a = defaultConfig_1.defaultConfig.find(item => item.race === race && item.gender === sex)) === null || _a === void 0 ? void 0 : _a.tints;
        skyrimPlatform_1.TESModPlatform.clearTintMasks(null);
        defaultTints.forEach(tint => {
            skyrimPlatform_1.TESModPlatform.pushTintMask(null, tint.type, tint.argb, tint.texturePath);
        });
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
    static resetTintsForPlayerByType(type) {
        var _a;
        const race = Player_1.localPlayer.baseActor.getRace() ? Player_1.localPlayer.baseActor.getRace().getFormID() : 0;
        const sex = Player_1.localPlayer.baseActor.getSex();
        const defaultTints = (_a = defaultConfig_1.defaultConfig.find(item => item.race === race && item.gender === sex)) === null || _a === void 0 ? void 0 : _a.tints;
        const tintsForReset = defaultTints.filter(tint => tint.type === type);
        const currentTints = this.getAppearance(Player_1.localPlayer.actor).tints;
        tintsForReset.forEach(item => {
            const tintWithSameTexture = currentTints.find(tint => item.texturePath === tint.texturePath);
            if (tintWithSameTexture) {
                const tintWithSameTextureIndex = currentTints.indexOf(tintWithSameTexture);
                currentTints[tintWithSameTextureIndex].argb = item.argb;
            }
        });
        skyrimPlatform_1.TESModPlatform.clearTintMasks(null);
        currentTints.forEach(tint => {
            skyrimPlatform_1.TESModPlatform.pushTintMask(null, tint.type, tint.argb, tint.texturePath);
        });
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
    static applyTints(actor, tints, isNpc = false) {
        if (!tints) {
            throw new Error(`[AppearanceSync]: Appearance can't be null`);
        }
        const raceWarPaintRegex = /.*Head.+WarPaint.*/;
        const uniWarPaintRegex = /.*HeadWarPaint.*/;
        const raceSpecificWarPaint = tints.filter(t => this.isVisible(t.argb) && t.texturePath.match(raceWarPaintRegex)).length;
        const uniWarPaint = tints.filter(t => this.isVisible(t.argb) && t.texturePath.match(uniWarPaintRegex)).length;
        if (raceSpecificWarPaint + uniWarPaint > 1) {
            return;
        }
        skyrimPlatform_1.TESModPlatform.clearTintMasks(actor);
        tints.forEach(tint => {
            skyrimPlatform_1.TESModPlatform.pushTintMask(actor, tint.type, tint.argb, tint.texturePath);
        });
        const playerBaseId = skyrimPlatform_1.Game.getPlayer().getBaseObject().getFormID();
        if (actor && !isNpc) {
            skyrimPlatform_1.TESModPlatform.setFormIdUnsafe(actor.getBaseObject(), playerBaseId);
        }
    }
    static applyAppearanceCommon(appearance, npc) {
        const race = skyrimPlatform_1.Race.from(skyrimPlatform_1.Game.getFormEx(appearance.raceId));
        const headparts = appearance.headpartIds.map(id => skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(id))).filter(headpart => !!headpart);
        skyrimPlatform_1.TESModPlatform.setNpcSex(npc, appearance.isFemale ? 1 : 0);
        if (race) {
            skyrimPlatform_1.TESModPlatform.setNpcRace(npc, race);
        }
        npc.setWeight(appearance.weight);
        skyrimPlatform_1.TESModPlatform.setNpcSkinColor(npc, appearance.skinColor);
        skyrimPlatform_1.TESModPlatform.setNpcHairColor(npc, appearance.hairColor);
        skyrimPlatform_1.TESModPlatform.resizeHeadpartsArray(npc, headparts.length);
        headparts.forEach((v, i) => npc.setNthHeadPart(v, i));
        npc.setFaceTextureSet(skyrimPlatform_1.TextureSet.from(skyrimPlatform_1.Game.getFormEx(appearance.headTextureSetId)));
        npc.setVoiceType(skyrimPlatform_1.VoiceType.from(skyrimPlatform_1.Game.getFormEx(SILENT_VOICE)));
        appearance.options.forEach((v, i) => npc.setFaceMorph(v, i));
        appearance.presets.forEach((v, i) => npc.setFacePreset(v, i));
        if (appearance.name) {
            npc.setName(appearance.name);
        }
        else {
            npc.setName(' ');
        }
    }
    static applyAppearance(appearance) {
        const npc = skyrimPlatform_1.TESModPlatform.createNpc();
        if (!npc) {
            throw new Error(`[AppearanceSync]: Can't create NPC`);
        }
        this.applyAppearanceCommon(appearance, npc);
        return npc;
    }
    static applyAppearanceToPlayer(appearance) {
        this.applyAppearanceCommon(appearance, skyrimPlatform_1.ActorBase.from(skyrimPlatform_1.Game.getPlayer().getBaseObject()));
        this.applyTints(null, appearance.tints);
        skyrimPlatform_1.Game.getPlayer().queueNiNodeUpdate();
        skyrimPlatform_1.Utility.wait(0.0625).then(() => {
            (0, skyrimPlatform_1.once)('update', () => {
                var _a;
                (_a = skyrimPlatform_1.Game.getPlayer()) === null || _a === void 0 ? void 0 : _a.startDeferredKill();
            });
        });
    }
    static applyHeadPartToPlayer(formId) {
        (0, skyrimPlatform_1.printConsole)(`TEST1 ${formId}`);
        const objectReference = skyrimPlatform_1.Game.getFormEx(formId);
        (0, skyrimPlatform_1.printConsole)('TEST2');
        const newHeadPart = skyrimPlatform_1.HeadPart.from(objectReference);
        (0, skyrimPlatform_1.printConsole)('TEST3');
        if (!newHeadPart) {
            return;
        }
        (0, skyrimPlatform_1.printConsole)('TEST4');
        const appearance = AppearanceSync.getAppearance(Player_1.localPlayer.actor);
        (0, skyrimPlatform_1.printConsole)('TEST5');
        const headParts = appearance.headpartIds.map(id => skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(id))).filter(headpart => !!headpart);
        (0, skyrimPlatform_1.printConsole)('TEST6');
        const extraHeadParts = HeadParstExtraSlotsConfig_1.HeadPartsExtraSlotsConfig[(0, type_1.getRaceById)(appearance.raceId)][appearance.isFemale ? Genders_1.Gender.Female : Genders_1.Gender.Male];
        (0, skyrimPlatform_1.printConsole)('TEST7');
        const oldHeadPart = headParts.find(item => (item === null || item === void 0 ? void 0 : item.getType()) === newHeadPart.getType());
        (0, skyrimPlatform_1.printConsole)('TEST8');
        if (!oldHeadPart) {
            return;
        }
        (0, skyrimPlatform_1.printConsole)('TEST9');
        if (oldHeadPart.getFormID() === newHeadPart.getFormID()) {
            return;
        }
        (0, skyrimPlatform_1.printConsole)('TEST10');
        const IndexOldHeadPart = headParts.findIndex(item => (item === null || item === void 0 ? void 0 : item.getFormID()) === oldHeadPart.getFormID());
        (0, skyrimPlatform_1.printConsole)('TEST11');
        const oldExtraHeadPart = headParts.find(v => oldHeadPart.hasExtraPart(v) && (v === null || v === void 0 ? void 0 : v.isExtraPart()));
        (0, skyrimPlatform_1.printConsole)('TEST12');
        if (oldHeadPart.getNumExtraParts() > 0 && oldExtraHeadPart) {
            (0, skyrimPlatform_1.printConsole)('TEST13');
            if (newHeadPart.getNumExtraParts() > 0) {
                (0, skyrimPlatform_1.printConsole)('TEST14');
                const newExtraHeadPartsId = extraHeadParts[newHeadPart.getType()].find(headPardIdx => {
                    (0, skyrimPlatform_1.printConsole)('TEST15');
                    const extraHeadPart = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(headPardIdx));
                    (0, skyrimPlatform_1.printConsole)('TEST16');
                    if (newHeadPart.hasExtraPart(extraHeadPart)) {
                        return true;
                    }
                });
                (0, skyrimPlatform_1.printConsole)('TEST17');
                const nexExtraHeadPart = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(newExtraHeadPartsId));
                (0, skyrimPlatform_1.printConsole)('TEST18');
                headParts[headParts.findIndex(item => (item === null || item === void 0 ? void 0 : item.getFormID()) === oldExtraHeadPart.getFormID())] = nexExtraHeadPart;
                (0, skyrimPlatform_1.printConsole)('TEST19');
            }
            else {
                (0, skyrimPlatform_1.printConsole)('TEST20');
                headParts.splice(headParts.findIndex(item => (item === null || item === void 0 ? void 0 : item.getFormID()) === oldExtraHeadPart.getFormID()), 1);
            }
            (0, skyrimPlatform_1.printConsole)('TEST21');
        }
        else if (newHeadPart.getNumExtraParts() > 0) {
            (0, skyrimPlatform_1.printConsole)('TEST22');
            const newExtraHeadPartsIds = extraHeadParts[newHeadPart.getType()].find(headPardIdx => {
                (0, skyrimPlatform_1.printConsole)('TEST23');
                const extraHeadPart = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(headPardIdx));
                if (newHeadPart.hasExtraPart(extraHeadPart)) {
                    return true;
                }
            });
            if (!newExtraHeadPartsIds) {
                return;
            }
            (0, skyrimPlatform_1.printConsole)(`TEST24 ${newExtraHeadPartsIds}`);
            const nexExtraHeadPart = skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(newExtraHeadPartsIds));
            (0, skyrimPlatform_1.printConsole)('TEST25');
            headParts.splice(IndexOldHeadPart + 1, 0, nexExtraHeadPart);
        }
        (0, skyrimPlatform_1.printConsole)('TEST26');
        headParts[IndexOldHeadPart] = newHeadPart;
        (0, skyrimPlatform_1.printConsole)('TEST27');
        skyrimPlatform_1.TESModPlatform.resizeHeadpartsArray(Player_1.localPlayer.baseActor, headParts.length);
        (0, skyrimPlatform_1.printConsole)('TEST28');
        headParts.forEach((v, i) => Player_1.localPlayer.baseActor.setNthHeadPart(v, i));
        (0, skyrimPlatform_1.printConsole)('TEST29');
        Player_1.localPlayer.actor.queueNiNodeUpdate();
    }
    static resetHeadPartForPlayer(headPartType) {
        const appearance = AppearanceSync.getAppearance(Player_1.localPlayer.actor);
        const headParts = appearance.headpartIds.map(id => skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(id))).filter(headpart => !!headpart);
        const race = Player_1.localPlayer.baseActor.getRace() ? Player_1.localPlayer.baseActor.getRace().getFormID() : 0;
        const sex = Player_1.localPlayer.baseActor.getSex();
        const defaultPreset = defaultConfig_1.defaultConfig.find(item => item.race === race && item.gender === sex);
        const defaultHeadParts = defaultPreset === null || defaultPreset === void 0 ? void 0 : defaultPreset.headpartIds.map(id => skyrimPlatform_1.HeadPart.from(skyrimPlatform_1.Game.getFormEx(id))).filter(headpart => !!headpart);
        const defaultHeadPart = defaultHeadParts === null || defaultHeadParts === void 0 ? void 0 : defaultHeadParts.find(item => (item === null || item === void 0 ? void 0 : item.getType()) === headPartType);
        const headPartIndex = headParts.findIndex(item => (item === null || item === void 0 ? void 0 : item.getType()) === headPartType && item.getFormID() !== (defaultHeadPart === null || defaultHeadPart === void 0 ? void 0 : defaultHeadPart.getFormID()));
        if (headPartIndex !== -1) {
            headParts[headPartIndex] = defaultHeadPart;
            skyrimPlatform_1.TESModPlatform.resizeHeadpartsArray(Player_1.localPlayer.baseActor, headParts.length);
            headParts.forEach((v, i) => Player_1.localPlayer.baseActor.setNthHeadPart(v, i));
            Player_1.localPlayer.actor.queueNiNodeUpdate();
        }
    }
}
exports.AppearanceSync = AppearanceSync;


/***/ }),

/***/ 1697:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isBadMenuShown = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const isBadMenuShown = () => {
    return (skyrimPlatform_1.Ui.isMenuOpen('InventoryMenu') ||
        skyrimPlatform_1.Ui.isMenuOpen('FavoritesMenu') ||
        skyrimPlatform_1.Ui.isMenuOpen('MagicMenu') ||
        skyrimPlatform_1.Ui.isMenuOpen('ContainerMenu') ||
        skyrimPlatform_1.Ui.isMenuOpen('Crafting Menu'));
};
exports.isBadMenuShown = isBadMenuShown;


/***/ }),

/***/ 2552:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyInventory = exports.getInventory = exports.getDiff = exports.removeSimpleItemsAsManyAsPossible = exports.sumInventories = exports.hasExtras = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const cropName = (s) => {
    if (!s) {
        return s;
    }
    const max = 128;
    return s.length >= max
        ? s
            .split('')
            .filter((x, i) => i < max)
            .join('')
            .concat('...')
        : s;
};
const extrasEqual = (a, b, ignoreWorn = false) => {
    return (a.health === b.health &&
        a.enchantmentId === b.enchantmentId &&
        a.maxCharge === b.maxCharge &&
        !!a.removeEnchantmentOnUnequip === !!b.removeEnchantmentOnUnequip &&
        a.chargePercent === b.chargePercent &&
        a.soul === b.soul &&
        a.poisonId === b.poisonId &&
        a.poisonCount === b.poisonCount &&
        ((!!a.worn === !!b.worn && !!a.wornLeft === !!b.wornLeft) || ignoreWorn));
};
const hasExtras = (e) => {
    return !extrasEqual(e, { baseId: 0, count: 0 });
};
exports.hasExtras = hasExtras;
const extractExtraData = (refr, extraList, out) => {
    const item = skyrimPlatform_1.Game.getFormEx(out.baseId);
    if (skyrimPlatform_1.Ammo.from(item)) {
        const actor = skyrimPlatform_1.Actor.from(refr);
        if (actor && actor.isEquipped(item)) {
            out.worn = true;
        }
    }
    ;
    (extraList || []).forEach(extra => {
        switch (extra.type) {
            case 'Health':
                out.health = Math.round(extra.health * 10) / 10;
                if (out.health === 1) {
                    delete out.health;
                }
                break;
            case 'Count':
                out.count = extra.count;
                break;
            case 'Enchantment':
                out.enchantmentId = extra.enchantmentId;
                out.maxCharge = extra.maxCharge;
                out.removeEnchantmentOnUnequip = extra.removeOnUnequip;
                break;
            case 'Charge':
                out.chargePercent = extra.charge;
                break;
            case 'Poison':
                out.poisonId = extra.poisonId;
                out.poisonCount = extra.count;
                break;
            case 'Soul':
                out.soul = extra.soul;
                break;
            case 'TextDisplayData':
                out.name = extra.name;
                break;
            case 'Worn':
                out.worn = true;
                break;
            case 'WornLeft':
                out.wornLeft = true;
                break;
        }
    });
};
const squash = (inv) => {
    const res = new Array();
    inv.entries.forEach(e => {
        const same = res.find(x => e.baseId === x.baseId && extrasEqual(x, e));
        if (same) {
            same.count += e.count;
        }
        else {
            res.push(JSON.parse(JSON.stringify(e)));
        }
    });
    return { entries: res.filter(x => x.count !== 0) };
};
const getExtraContainerChangesAsInventory = (refr) => {
    const extraContainerChanges = (0, skyrimPlatform_1.getExtraContainerChanges)(refr.getFormID());
    const entries = new Array();
    (extraContainerChanges || []).forEach(changesEntry => {
        const entry = {
            baseId: changesEntry.baseId,
            count: changesEntry.countDelta,
        };
        (changesEntry.extendDataList || []).forEach(extraList => {
            const e = {
                baseId: entry.baseId,
                count: 1,
            };
            extractExtraData(refr, extraList, e);
            entries.push(e);
            entry.count -= e.count;
        });
        if (entry.count !== 0) {
            entries.push(entry);
        }
    });
    let res = { entries };
    res = squash(res);
    return res;
};
const getBaseContainerAsInventory = (refr) => {
    return {
        entries: (0, skyrimPlatform_1.getContainer)(refr.getBaseObject().getFormID()),
    };
};
const sumInventories = (lhs, rhs) => {
    const leftEntriesWithExtras = lhs.entries.filter(e => (0, exports.hasExtras)(e));
    const rightEntriesWithExtras = rhs.entries.filter(e => (0, exports.hasExtras)(e));
    const leftEntriesSimple = lhs.entries.filter(e => !(0, exports.hasExtras)(e));
    const rightEntriesSimple = rhs.entries.filter(e => !(0, exports.hasExtras)(e));
    leftEntriesSimple.forEach(e => {
        const matching = rightEntriesSimple.find(x => x.baseId === e.baseId);
        if (matching) {
            e.count += matching.count;
            matching.count = 0;
        }
    });
    return {
        entries: leftEntriesWithExtras
            .concat(rightEntriesWithExtras)
            .concat(leftEntriesSimple)
            .concat(rightEntriesSimple)
            .filter(e => e.count !== 0),
    };
};
exports.sumInventories = sumInventories;
const removeSimpleItemsAsManyAsPossible = (inv, baseId, count) => {
    const res = { entries: [] };
    res.entries = JSON.parse(JSON.stringify(inv.entries));
    const entry = res.entries.find(e => !(0, exports.hasExtras)(e) && e.baseId === baseId);
    if (entry) {
        entry.count -= count;
    }
    res.entries = res.entries.filter(e => e.count > 0);
    return res;
};
exports.removeSimpleItemsAsManyAsPossible = removeSimpleItemsAsManyAsPossible;
const getDiff = (lhs, rhs, ignoreWorn) => {
    const lhsCopy = JSON.parse(JSON.stringify(lhs));
    const rhsCopy = JSON.parse(JSON.stringify(rhs));
    rhsCopy.entries.forEach(e => {
        const sameFromLeft = lhsCopy.entries.find(x => x.baseId === e.baseId && extrasEqual(x, e, ignoreWorn));
        if (sameFromLeft) {
            sameFromLeft.count -= e.count;
        }
        else {
            lhsCopy.entries.push(e);
            lhsCopy.entries[lhsCopy.entries.length - 1].count *= -1;
        }
    });
    return { entries: lhsCopy.entries.filter(x => x.count !== 0) };
};
exports.getDiff = getDiff;
const getInventory = (refr) => {
    return squash((0, exports.sumInventories)(getBaseContainerAsInventory(refr), getExtraContainerChangesAsInventory(refr)));
};
exports.getInventory = getInventory;
const basesReset = () => {
    if (skyrimPlatform_1.storage.basesResetExists !== true) {
        skyrimPlatform_1.storage.basesResetExists = true;
        skyrimPlatform_1.storage.basesReset = new Set();
    }
    return skyrimPlatform_1.storage.basesReset;
};
const resetBase = (refr) => {
    const base = refr.getBaseObject();
    const baseId = base ? base.getFormID() : 0;
    if (!basesReset().has(baseId)) {
        basesReset().add(baseId);
        skyrimPlatform_1.TESModPlatform.resetContainer(base);
        refr.removeAllItems(null, false, true);
    }
};
const applyInventory = (refr, newInventory, enableCrashProtection, ignoreWorn = false) => {
    resetBase(refr);
    const diff = (0, exports.getDiff)(newInventory, (0, exports.getInventory)(refr), ignoreWorn).entries;
    let res = true;
    diff.sort((a, b) => (a.count < b.count ? -1 : 1));
    diff.forEach((e, i) => {
        if (i > 0 && enableCrashProtection) {
            res = false;
            return;
        }
        let absCount = Math.abs(e.count);
        let queueNiNodeUpdateNeeded = false;
        const worn = !!e.worn;
        const wornLeft = !!e.wornLeft;
        let oneStepCount = e.count / absCount;
        const f = skyrimPlatform_1.Game.getFormEx(e.baseId);
        if (!f) {
            return;
        }
        const type = f.getType();
        if (type === 32 || type === 46 || type === 30) {
            absCount = 1;
            oneStepCount = e.count;
        }
        else {
            if (absCount > 1000) {
                absCount = 1;
                oneStepCount = 1;
                if (worn && e.count < 0) {
                    absCount = 0;
                }
            }
            if (e.count > 1 && skyrimPlatform_1.Ammo.from(skyrimPlatform_1.Game.getFormEx(e.baseId))) {
                absCount = 1;
                oneStepCount = e.count;
                if (e.count > 60000) {
                    e.count = 1;
                }
            }
        }
        for (let i = 0; i < absCount; ++i) {
            if (worn || wornLeft) {
                skyrimPlatform_1.TESModPlatform.pushWornState(!!worn, !!wornLeft);
                queueNiNodeUpdateNeeded = true;
            }
            skyrimPlatform_1.TESModPlatform.addItemEx(refr, f, oneStepCount, e.health ? e.health : 1, e.enchantmentId ? skyrimPlatform_1.Enchantment.from(skyrimPlatform_1.Game.getFormEx(e.enchantmentId)) : null, e.maxCharge ? e.maxCharge : 0, !!e.removeEnchantmentOnUnequip, e.chargePercent ? e.chargePercent : 0, e.name ? cropName(e.name) : f.getName(), e.soul ? e.soul : 0, e.poisonId ? skyrimPlatform_1.Potion.from(skyrimPlatform_1.Game.getFormEx(e.poisonId)) : null, e.poisonCount ? e.poisonCount : 0);
        }
        if (queueNiNodeUpdateNeeded) {
            const ac = skyrimPlatform_1.Actor.from(refr);
            if (ac) {
                ac.queueNiNodeUpdate();
            }
        }
    });
    return res;
};
exports.applyInventory = applyInventory;


/***/ }),

/***/ 4885:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyMovement = exports.applyWeapDrawn = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const errors_1 = __webpack_require__(8286);
const objectReferenceEx_1 = __webpack_require__(7564);
const spApiInteraction_1 = __webpack_require__(3331);
const cellWidth = 4096;
const sqr = (x) => x * x;
const isInDifferentExteriorCell = (refr, pos) => {
    const currentPos = objectReferenceEx_1.ObjectReferenceEx.getPos(refr);
    const playerPos = objectReferenceEx_1.ObjectReferenceEx.getPos(skyrimPlatform_1.Game.getPlayer());
    const targetDistanceToPlayer = objectReferenceEx_1.ObjectReferenceEx.getDistance(playerPos, pos);
    const currentDistanceToPlayer = objectReferenceEx_1.ObjectReferenceEx.getDistance(playerPos, currentPos);
    return currentDistanceToPlayer > cellWidth && targetDistanceToPlayer <= cellWidth;
};
const isInDifferentWorldOrCell = (refr, worldOrCell) => {
    return worldOrCell !== objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(refr);
};
const teleportIfNeed = (refr, m) => {
    if (isInDifferentWorldOrCell(refr, m.worldOrCell) || (!refr.is3DLoaded() && isInDifferentExteriorCell(refr, m.pos))) {
        throw new errors_1.RespawnNeededError('needs to be respawned');
    }
    return false;
};
const gTempTargetPos = [0, 0, 0];
const translateTo = (refr, m) => {
    let time = 0.2;
    if (m.isInJumpState || m.runMode !== 'Standing') {
        time = 0.2;
    }
    const distanceAdd = (m.speed || 0) * time;
    const direction = m.rot[2] + m.direction;
    gTempTargetPos[0] = m.pos[0];
    gTempTargetPos[1] = m.pos[1];
    gTempTargetPos[2] = m.pos[2];
    const refrRealPos = objectReferenceEx_1.ObjectReferenceEx.getPos(refr);
    const distance = objectReferenceEx_1.ObjectReferenceEx.getDistance(refrRealPos, gTempTargetPos);
    const speed = distance / time;
    const angleDiff = Math.abs(m.rot[2] - refr.getAngleZ());
    if (m.runMode !== 'Standing' || m.isInJumpState || objectReferenceEx_1.ObjectReferenceEx.getDistanceNoZ(refrRealPos, gTempTargetPos) > 8 || angleDiff > 80) {
        const actor = skyrimPlatform_1.Actor.from(refr);
        if (actor && actor.getActorValue('Variable10') < -999) {
            return;
        }
        if (!actor || !actor.isDead()) {
            refr.translateTo(gTempTargetPos[0], gTempTargetPos[1], gTempTargetPos[2], m.rot[0], m.rot[1], m.rot[2], speed, 0);
        }
    }
};
const getOffsetZ = (runMode) => {
    switch (runMode) {
        case 'Walking':
            return -512;
        case 'Running':
            return -1024;
    }
    return 0;
};
const keepOffsetFromActor = (ac, m) => {
    let offsetAngle = m.rot[2] - ac.getAngleZ();
    if (Math.abs(offsetAngle) < 5) {
        offsetAngle = 0;
    }
    if (m.runMode === 'Standing') {
        return ac.keepOffsetFromActor(ac, 0, 0, 0, 0, 0, offsetAngle, 1, 1);
    }
    const offset = [3 * Math.sin((m.direction / 180) * Math.PI), 3 * Math.cos((m.direction / 180) * Math.PI), getOffsetZ(m.runMode)];
    ac.keepOffsetFromActor(ac, offset[0], offset[1], offset[2], 0, 0, offsetAngle, m.runMode === 'Walking' ? 2048 : 1, 1);
};
const applySprinting = (ac, isSprinting) => {
    if (ac.isSprinting() !== isSprinting) {
        skyrimPlatform_1.Debug.sendAnimationEvent(ac, isSprinting ? 'SprintStart' : 'SprintStop');
    }
};
const applyBlocking = (ac, m) => {
    if (ac.getAnimationVariableBool('IsBlocking') !== m.isBlocking) {
        skyrimPlatform_1.Debug.sendAnimationEvent(ac, m.isBlocking ? 'BlockStart' : 'BlockStop');
        skyrimPlatform_1.Debug.sendAnimationEvent(ac, m.isSneaking ? 'SneakStart' : 'SneakStop');
    }
};
const applySneaking = (ac, isSneaking) => {
    const currentIsSneaking = ac.isSneaking() || ac.getAnimationVariableBool('IsSneaking');
    if (currentIsSneaking !== isSneaking) {
        skyrimPlatform_1.Debug.sendAnimationEvent(ac, isSneaking ? 'SneakStart' : 'SneakStop');
    }
};
const applyWeapDrawn = (ac, isWeapDrawn) => {
    if (ac.isWeaponDrawn() !== isWeapDrawn) {
        skyrimPlatform_1.TESModPlatform.setWeaponDrawnMode(ac, isWeapDrawn ? 1 : 0);
    }
};
exports.applyWeapDrawn = applyWeapDrawn;
const applyHealthPercentage = (ac, healthPercentage) => {
    const currentPercentage = ac.getActorValuePercentage('health');
    if (currentPercentage === healthPercentage) {
        return;
    }
    const currentMax = ac.getBaseActorValue('health');
    const deltaPercentage = healthPercentage - currentPercentage;
    const k = 0.25;
    if (deltaPercentage > 0) {
        ac.restoreActorValue('health', deltaPercentage * currentMax * k);
    }
    else if (deltaPercentage < 0) {
        ac.damageActorValue('health', deltaPercentage * currentMax * k);
    }
};
const applyMovement = (refr, m, isMyClone) => {
    if (teleportIfNeed(refr, m)) {
        return;
    }
    const acX = refr.getPositionX();
    const acY = refr.getPositionY();
    const lagUnitsNoZ = Math.round(Math.sqrt(sqr(m.pos[0] - acX) + sqr(m.pos[1] - acY)));
    if (isMyClone === true) {
        spApiInteraction_1.SpApiInteraction.getControllerInstance().emitter.emit('newLocalLagValueCalculated', { lagUnitsNoZ });
    }
    translateTo(refr, m);
    const ac = skyrimPlatform_1.Actor.from(refr);
    if (!ac) {
        return;
    }
    let lookAt = null;
    if (m.lookAt) {
        try {
            lookAt = skyrimPlatform_1.Game.findClosestActor(m.lookAt[0], m.lookAt[1], m.lookAt[2], 128);
        }
        catch (e) {
            lookAt = null;
        }
    }
    if (lookAt) {
        ac.setHeadTracking(true);
        ac.setLookAt(lookAt, false);
    }
    else {
        ac.setHeadTracking(false);
    }
    ac.blockActivation(true);
    keepOffsetFromActor(ac, m);
    applySprinting(ac, m.runMode === 'Sprinting');
    applyBlocking(ac, m);
    applySneaking(ac, m.isSneaking);
    (0, exports.applyWeapDrawn)(ac, m.isWeapDrawn);
    applyHealthPercentage(ac, m.healthPercentage);
    spApiInteraction_1.SpApiInteraction.getControllerInstance().emitter.emit('applyDeathStateEvent', { actor: ac, isDead: m.isDead });
};
exports.applyMovement = applyMovement;


/***/ }),

/***/ 9111:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getMovement = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const objectReferenceEx_1 = __webpack_require__(7564);
class PlayerCharacterSpeedCalculator {
    static savePosition(pos, worldOrCell) {
        this.lastPcPos = pos;
        this.lastPcPosCheck = Date.now();
        this.lastPcWorldOrCell = worldOrCell;
    }
    static getSpeed(currentPos, worldOrCell) {
        if (this.lastPcPosCheck === -1) {
            return 0;
        }
        const timeDeltaSec = (Date.now() - this.lastPcPosCheck) / 1000;
        if (timeDeltaSec > 5) {
            return 0;
        }
        if (timeDeltaSec === 0) {
            return 0;
        }
        if (worldOrCell !== this.lastPcWorldOrCell) {
            return 0;
        }
        const distance = objectReferenceEx_1.ObjectReferenceEx.getDistance(currentPos, this.lastPcPos);
        return distance / timeDeltaSec;
    }
}
PlayerCharacterSpeedCalculator.lastPcPos = [0, 0, 0];
PlayerCharacterSpeedCalculator.lastPcPosCheck = -1;
PlayerCharacterSpeedCalculator.lastPcWorldOrCell = 0;
const isSneaking = (ac) => ac.isSneaking() || ac.getAnimationVariableBool('IsSneaking');
const getRunMode = (ac) => {
    if (ac.isSprinting()) {
        return 'Sprinting';
    }
    const speed = ac.getAnimationVariableFloat('SpeedSampled');
    if (!speed) {
        return 'Standing';
    }
    const furniture = ac.getFurnitureReference();
    if (furniture !== null) {
        return 'Standing';
    }
    let isRunning = true;
    if (ac.getFormID() === 0x14) {
        if (!skyrimPlatform_1.TESModPlatform.isPlayerRunningEnabled() || speed < 150) {
            isRunning = false;
        }
    }
    else {
        if (!ac.isRunning() || speed < 150) {
            isRunning = false;
        }
    }
    if (ac.getAnimationVariableFloat('IsBlocking')) {
        isRunning = isSneaking(ac);
    }
    return isRunning ? 'Running' : 'Walking';
};
const getMovement = (refr, form) => {
    var _a;
    const ac = skyrimPlatform_1.Actor.from(refr);
    const runMode = ac ? getRunMode(ac) : 'Running';
    let healthPercentage = ac && ac.getActorValuePercentage('health');
    if (ac && ac.isDead()) {
        healthPercentage = 0;
    }
    let lookAt = undefined;
    if (refr.getFormID() !== 0x14) {
        const combatTarget = ac === null || ac === void 0 ? void 0 : ac.getCombatTarget();
        if (combatTarget) {
            lookAt = [combatTarget.getPositionX(), combatTarget.getPositionY(), combatTarget.getPositionZ()];
        }
    }
    const pos = objectReferenceEx_1.ObjectReferenceEx.getPos(refr);
    let speed;
    if (refr.getFormID() !== 0x14) {
        speed = refr.getAnimationVariableFloat('SpeedSampled');
    }
    else {
        const w = objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(refr);
        speed = PlayerCharacterSpeedCalculator.getSpeed(pos, w);
        PlayerCharacterSpeedCalculator.savePosition(pos, w);
        if (speed > 2000) {
            speed = 0;
        }
    }
    const worldOrCell = refr.getWorldSpace() || refr.getParentCell();
    return {
        worldOrCell: (worldOrCell === null || worldOrCell === void 0 ? void 0 : worldOrCell.getFormID()) || 0,
        pos,
        rot: [refr.getAngleX(), refr.getAngleY(), refr.getAngleZ()],
        runMode: runMode,
        direction: runMode !== 'Standing' ? 360 * refr.getAnimationVariableFloat('Direction') : 0,
        isInJumpState: !!(ac && ac.getAnimationVariableBool('bInJumpState')),
        isSneaking: !!(ac && isSneaking(ac)),
        isBlocking: !!(ac && ac.getAnimationVariableBool('IsBlocking')),
        isWeapDrawn: !!(ac && ac.isWeaponDrawn()),
        isDead: ((_a = form === null || form === void 0 ? void 0 : form.isDead) !== null && _a !== void 0 ? _a : false) || !!(ac && ac.isDead()),
        healthPercentage: healthPercentage || 0,
        lookAt,
        speed,
    };
};
exports.getMovement = getMovement;


/***/ }),

/***/ 1882:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.learnSpells = exports.removeAllSpells = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const removeAllSpells = (actor) => {
    const spellToRemove = new Array();
    for (let i = 0; i < actor.getSpellCount(); i++) {
        const spell = actor.getNthSpell(i);
        if (spell) {
            spellToRemove.push(spell);
        }
    }
    for (const spell of spellToRemove) {
        const removeResult = actor.removeSpell(spell);
    }
};
exports.removeAllSpells = removeAllSpells;
const learnSpells = (actor, spellsIds) => {
    for (const spellId of spellsIds) {
        const spell = skyrimPlatform_1.Spell.from(skyrimPlatform_1.Game.getFormEx(spellId));
        if (spell) {
            const addResult = actor.addSpell(spell, false);
        }
    }
};
exports.learnSpells = learnSpells;


/***/ }),

/***/ 8412:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.verifyVersion = exports.requiredVersion = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const Utils_1 = __webpack_require__(2453);
exports.requiredVersion = '2.9.0';
const realVersion = typeof skyrimPlatform_1.getPlatformVersion === 'function' ? (0, skyrimPlatform_1.getPlatformVersion)() : 'unknown';
const verifyVersion = () => {
    if (!exports.requiredVersion.includes(realVersion)) {
        skyrimPlatform_1.Debug.messageBox(`You need to have on of those SkyrimPlatform versions ${JSON.stringify(exports.requiredVersion)} to join this server. Your current version is ${realVersion}`);
        skyrimPlatform_1.Utility.waitMenuMode(0.5).then(() => {
            (0, skyrimPlatform_1.on)('update', (0, Utils_1.profile)(() => {
                if (!skyrimPlatform_1.Ui.isMenuOpen('MessageBoxMenu')) {
                    skyrimPlatform_1.Game.quitToMainMenu();
                }
            }, 'VerifyVersion'));
        });
    }
};
exports.verifyVersion = verifyVersion;


/***/ }),

/***/ 3770:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormView = exports.MAX_NICKNAME_VISIBLE = exports.getScreenResolution = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const animation_1 = __webpack_require__(933);
const errors_1 = __webpack_require__(8286);
const movementApply_1 = __webpack_require__(4885);
const spawnProcess_1 = __webpack_require__(8943);
const objectReferenceEx_1 = __webpack_require__(7564);
const playerCharacterDataHolder_1 = __webpack_require__(3590);
const modelApplyUtils_1 = __webpack_require__(3745);
const spApiInteraction_1 = __webpack_require__(3331);
const worldCleanerService_1 = __webpack_require__(4434);
const appearanceSync_1 = __webpack_require__(282);
const Familiars_1 = __webpack_require__(3246);
const VoiceChat_1 = __webpack_require__(1299);
const Vector3_1 = __webpack_require__(2233);
const remoteServer_1 = __webpack_require__(8986);
const worldViewMisc_1 = __webpack_require__(9885);
let screenResolution;
const getScreenResolution = () => {
    if (!screenResolution) {
        screenResolution = {
            width: skyrimPlatform_1.Utility.getINIInt('iSize W:Display'),
            height: skyrimPlatform_1.Utility.getINIInt('iSize H:Display'),
        };
    }
    return screenResolution;
};
exports.getScreenResolution = getScreenResolution;
exports.MAX_NICKNAME_VISIBLE = 1000;
const MIN_TIME_TO_UPDATE_VOICE_POSITION_AND_TINTS = 150;
function calculateTextSize(distance, minTextSize = 0.3, maxTextSize = 0.7) {
    const textSize = minTextSize + (maxTextSize - minTextSize) * (1 - distance / exports.MAX_NICKNAME_VISIBLE);
    return Math.max(minTextSize, Math.min(textSize, maxTextSize));
}
class FormView {
    constructor(remoteRefrId) {
        this.remoteRefrId = remoteRefrId;
        this.refrId = 0;
        this.ready = false;
        this.animState = { lastNumChanges: 0 };
        this.movState = {
            lastNumChanges: 0,
            lastApply: 0,
            everApplied: false,
        };
        this.appearanceState = this.getDefaultAppearanceState();
        this.appearanceBasedBaseId = 0;
        this.isOnScreen = false;
        this.lastPcWorldOrCell = 0;
        this.lastWorldOrCell = 0;
        this.state = {};
        this.localImmortal = false;
        this.textNameId = undefined;
        this.textVoiceId = undefined;
        this.textIsDeadId = undefined;
        this.textAdminTag = undefined;
        this.textStaticId = undefined;
        this.lastUpdateVoicePosition = Date.now();
        this.lastUpdateTints = Date.now();
        this.isSetNodeTextureSetApplied = false;
        this.isSetNodeScaleApplied = false;
    }
    update(model) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (model.movement) {
            if (!this.lastWorldOrCell) {
                this.lastWorldOrCell = model.movement.worldOrCell;
            }
            if (this.lastWorldOrCell !== model.movement.worldOrCell) {
                this.lastWorldOrCell = model.movement.worldOrCell;
                this.destroy();
                this.refrId = 0;
                this.appearanceBasedBaseId = 0;
                return;
            }
        }
        if (model.isDead) {
            if (this.refrId === 0) {
                return;
            }
        }
        if (model.movement) {
            const worldOrCell = objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(skyrimPlatform_1.Game.getPlayer());
            if (worldOrCell !== 0 && model.movement.worldOrCell !== worldOrCell) {
                this.destroy();
                this.refrId = 0;
                return;
            }
        }
        if (model.appearance || (!model.appearance && this.appearanceState.appearance)) {
            if (!this.appearanceState.appearance || model.numAppearanceChanges !== this.appearanceState.lastNumChanges) {
                if (model.appearance && this.appearanceState.appearance) {
                    const modelAppearanceCopy = JSON.parse(JSON.stringify(model.appearance));
                    const stateAppearanceCopy = JSON.parse(JSON.stringify(this.appearanceState.appearance));
                    modelAppearanceCopy.name = '';
                    stateAppearanceCopy.name = '';
                    const equalWithoutNames = JSON.stringify(modelAppearanceCopy) === JSON.stringify(stateAppearanceCopy);
                    if (equalWithoutNames) {
                        const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(this.refrId));
                        (_a = refr === null || refr === void 0 ? void 0 : refr.getBaseObject()) === null || _a === void 0 ? void 0 : _a.setName(model.appearance.name);
                        refr === null || refr === void 0 ? void 0 : refr.setDisplayName(model.appearance.name, true);
                    }
                    else {
                        this.appearanceBasedBaseId = 0;
                    }
                }
                else {
                    this.appearanceBasedBaseId = 0;
                }
                this.appearanceState.appearance = model.appearance || null;
                this.appearanceState.lastNumChanges = model.numAppearanceChanges;
            }
        }
        const refId = model.refrId && model.refrId < 0xff000000 ? model.refrId : undefined;
        if (refId) {
            if (this.refrId !== refId) {
                this.destroy();
                this.refrId = model.refrId;
                this.ready = true;
                const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(this.refrId));
                if (refr) {
                    const base = refr.getBaseObject();
                    if (base) {
                        objectReferenceEx_1.ObjectReferenceEx.dealWithRef(refr, base);
                    }
                }
            }
        }
        else {
            let templateChain = model.templateChain;
            if ((templateChain === null || templateChain === void 0 ? void 0 : templateChain.length) === 1) {
                templateChain = undefined;
            }
            let base = null;
            if (base === null) {
                base = skyrimPlatform_1.Game.getFormEx(model.baseId || NaN);
            }
            if (base === null) {
                base = skyrimPlatform_1.Game.getFormEx(this.getAppearanceBasedBase());
            }
            if (base === null) {
                return;
            }
            let refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(this.refrId));
            let respawnRequired = false;
            if (!refr) {
                respawnRequired = true;
            }
            else if (!refr.getBaseObject()) {
                respawnRequired = true;
            }
            else if (refr.getBaseObject().getFormID() !== base.getFormID()) {
                respawnRequired = true;
            }
            if (respawnRequired) {
                this.destroy();
                const player = skyrimPlatform_1.Game.getPlayer();
                const spawnMethodOriginal = {
                    spawn(baseForm, _spawnPosition, _spawnRotation) {
                        return player.placeAtMe(baseForm, 1, true, true);
                    },
                    triggerSpawnProcess(spawningRefr, spawnPosition, appearance, callback) {
                        new spawnProcess_1.SpawnProcess(appearance, spawnPosition, spawningRefr.getFormID(), callback);
                    },
                };
                const spawnMethodStub = {
                    spawn(baseForm, spawnPosition, spawnRotation) {
                        const f = skyrimPlatform_1.storage['formViewFunc1'];
                        const ref = f(baseForm, spawnPosition, spawnRotation);
                        return ref;
                    },
                    triggerSpawnProcess(spawningRefr, spawnPosition, appearance, callback) {
                        const f = skyrimPlatform_1.storage['formViewFunc2'];
                        f(spawningRefr, spawnPosition, appearance, callback);
                    },
                };
                const spawnUsingStubMethod = base.getType() === 43 &&
                    !this.appearanceState.appearance &&
                    skyrimPlatform_1.storage['formViewFunc1Set'] === true &&
                    skyrimPlatform_1.storage['formViewFunc2Set'] === true;
                const spawnMethod = spawnUsingStubMethod ? spawnMethodStub : spawnMethodOriginal;
                if (model.movement) {
                    refr = spawnMethod.spawn(base, model.movement.pos, model.movement.rot);
                }
                this.state = {};
                if (base.getType() !== 43) {
                    refr === null || refr === void 0 ? void 0 : refr.setAngle(((_b = model.movement) === null || _b === void 0 ? void 0 : _b.rot[0]) || 0, ((_c = model.movement) === null || _c === void 0 ? void 0 : _c.rot[1]) || 0, ((_d = model.movement) === null || _d === void 0 ? void 0 : _d.rot[2]) || 0);
                }
                else {
                    const race = (_f = (_e = skyrimPlatform_1.Actor.from(refr)) === null || _e === void 0 ? void 0 : _e.getRace()) === null || _f === void 0 ? void 0 : _f.getFormID();
                    const draugrRace = 0xd53;
                    const falmerRace = 0x131f4;
                    const chaurusRace = 0x131eb;
                    const frostbiteSpiderRaceGiant = 0x4e507;
                    const frostbiteSpiderRaceLarge = 0x53477;
                    const dwarvenCenturionRace = 0x131f1;
                    const dwarvenSphereRace = 0x131f2;
                    const dwarvenSpiderRace = 0x131f3;
                    const sprigganRace = 0x2013b77;
                    const sprigganRace2 = 0xf3903;
                    const sprigganRace3 = 0x13204;
                    const sprigganRace4 = 0x401b644;
                    const sprigganRace5 = 0x9aa44;
                    const wolfRace = 0x1320a;
                    if (race === draugrRace ||
                        race === falmerRace ||
                        race === chaurusRace ||
                        race === frostbiteSpiderRaceGiant ||
                        race === frostbiteSpiderRaceLarge ||
                        race === dwarvenCenturionRace ||
                        race === dwarvenSphereRace ||
                        race === dwarvenSpiderRace ||
                        race === sprigganRace ||
                        race === sprigganRace2 ||
                        race === sprigganRace3 ||
                        race === sprigganRace4 ||
                        race === sprigganRace5 ||
                        race === wolfRace) {
                        (_g = skyrimPlatform_1.Actor.from(refr)) === null || _g === void 0 ? void 0 : _g.setActorValue('Aggression', 2);
                    }
                }
                if (refr !== null) {
                    spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(worldCleanerService_1.WorldCleanerService).modWcProtection(refr.getFormID(), 1);
                }
                this.ready = false;
                let spawnPos;
                if (model.movement) {
                    spawnPos = model.movement.pos;
                }
                else {
                    spawnPos = objectReferenceEx_1.ObjectReferenceEx.getPos(skyrimPlatform_1.Game.getPlayer());
                }
                if (refr) {
                    spawnMethod.triggerSpawnProcess(refr, spawnPos, model.appearance || null, () => {
                        this.ready = true;
                    });
                }
                if (model.appearance && model.appearance.name) {
                    const playerActor = skyrimPlatform_1.Game.getPlayer();
                    const remoteServer = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer);
                    const worlds = remoteServer.getWorldModel();
                    const playerForm = worlds.forms.find(v => (v === null || v === void 0 ? void 0 : v.refrId) === (0, worldViewMisc_1.localIdToRemoteId)(playerActor.getFormID(), true));
                    const playerIsAdmin = playerForm === null || playerForm === void 0 ? void 0 : playerForm.playerAdminIsLogin;
                    const targetIsAdmin = model === null || model === void 0 ? void 0 : model.playerAdminIsLogin;
                    const targetAdminName = model === null || model === void 0 ? void 0 : model.playerAdminName;
                    const name = targetIsAdmin && targetAdminName
                        ? targetAdminName
                        : Familiars_1.FamiliarsHandler.playerKnowTarget(model === null || model === void 0 ? void 0 : model.playerPersonId) || playerIsAdmin || targetIsAdmin
                            ? model.appearance.name
                            : model.appearance.isFemale
                                ? 'Незнакомка'
                                : 'Незнакомец';
                    refr === null || refr === void 0 ? void 0 : refr.setDisplayName('' + `${name} [${model.playerDynamicId}]`, true);
                }
                (_h = skyrimPlatform_1.Actor.from(refr)) === null || _h === void 0 ? void 0 : _h.setActorValue('attackDamageMult', 0);
            }
            this.refrId = refr.getFormID();
        }
        if (!this.ready) {
            return;
        }
        const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(this.refrId));
        if (refr) {
            const actor = skyrimPlatform_1.Actor.from(refr);
            if (actor && !this.localImmortal) {
                actor.startDeferredKill();
                actor.setActorValue('health', 1000000);
                actor.setActorValue('magicka', 1000000);
                this.localImmortal = true;
                if (model.equipment) {
                    actor.unequipAll();
                    actor.removeAllItems(null, false, true);
                    (0, skyrimPlatform_1.setInventory)(actor.getFormID(), model.equipment.armor, model.equipment.weaponLeft, model.equipment.weaponRight);
                }
            }
            this.applyAll(refr, model);
        }
    }
    destroy() {
        this.isOnScreen = false;
        const refrId = this.refrId;
        (0, skyrimPlatform_1.once)('update', () => {
            if (refrId >= 0xff000000) {
                const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(refrId));
                if (refr) {
                    refr.delete();
                }
                spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(worldCleanerService_1.WorldCleanerService).modWcProtection(refrId, -1);
                const ac = skyrimPlatform_1.Actor.from(refr);
                if (ac) {
                    skyrimPlatform_1.TESModPlatform.setWeaponDrawnMode(ac, -1);
                }
            }
        });
        this.localImmortal = false;
        this.removeNickname();
        this.removeVoiceChatIcon();
        this.removeIsDead();
        this.removeAdminTag();
        this.removeStatic();
    }
    applyAll(refr, model) {
        var _a, _b;
        let forcedWeapDrawn = null;
        if (!this.isSetNodeScaleApplied) {
            this.isSetNodeScaleApplied = true;
            modelApplyUtils_1.ModelApplyUtils.applyModelNodeScale(refr, model.setNodeScale);
        }
        if (!this.isSetNodeTextureSetApplied) {
            this.isSetNodeTextureSetApplied = true;
            modelApplyUtils_1.ModelApplyUtils.applyModelNodeTextureSet(refr, model.setNodeTextureSet);
        }
        if (model.animation) {
            if (model.animation.animEventName === 'FakeUnequip') {
                forcedWeapDrawn = false;
            }
            else if (model.animation.animEventName === 'FakeEquip') {
                forcedWeapDrawn = true;
            }
        }
        (0, animation_1.setDefaultAnimsDisabled)(this.refrId, false);
        if (model.movement && (model === null || model === void 0 ? void 0 : model.playerDynamicId) != null) {
            if (+model.numMovementChanges !== this.movState.lastNumChanges || Date.now() - this.movState.lastApply > 2000) {
                this.movState.lastApply = Date.now();
                const backup = model.movement.isWeapDrawn;
                if (forcedWeapDrawn === true || forcedWeapDrawn === false) {
                    model.movement.isWeapDrawn = forcedWeapDrawn;
                }
                try {
                    (0, movementApply_1.applyMovement)(refr, model.movement, !!model.isMyClone);
                }
                catch (e) {
                    if (e instanceof errors_1.RespawnNeededError) {
                        this.lastWorldOrCell = model.movement.worldOrCell;
                        this.destroy();
                        this.refrId = 0;
                        this.appearanceBasedBaseId = 0;
                        return;
                    }
                    else {
                        throw e;
                    }
                }
                model.movement.isWeapDrawn = backup;
                this.movState.lastNumChanges = +model.numMovementChanges;
                this.movState.everApplied = true;
            }
        }
        else {
            const remoteId = this.remoteRefrId;
            const ac = skyrimPlatform_1.Actor.from(refr);
            if (ac && remoteId && ac.is3DLoaded()) {
                ac.clearKeepOffsetFromActor();
            }
        }
        if (refr.is3DLoaded() !== undefined && refr.is3DLoaded() === true) {
            if (model.animation) {
                (0, animation_1.applyAnimation)(refr, model.animation, this.animState);
            }
        }
        if (model.appearance && Date.now() - this.lastUpdateTints >= MIN_TIME_TO_UPDATE_VOICE_POSITION_AND_TINTS) {
            const actor = skyrimPlatform_1.Actor.from(refr);
            this.lastUpdateTints = Date.now();
            if (actor && !playerCharacterDataHolder_1.PlayerCharacterDataHolder.isInJumpState()) {
                if (playerCharacterDataHolder_1.PlayerCharacterDataHolder.getWorldOrCell()) {
                    if (this.lastPcWorldOrCell && playerCharacterDataHolder_1.PlayerCharacterDataHolder.getWorldOrCell() !== this.lastPcWorldOrCell) {
                        this.isOnScreen = false;
                    }
                    this.lastPcWorldOrCell = playerCharacterDataHolder_1.PlayerCharacterDataHolder.getWorldOrCell();
                }
                const headPos = [
                    skyrimPlatform_1.NetImmerse.getNodeWorldPositionX(actor, 'NPC Head [Head]', false),
                    skyrimPlatform_1.NetImmerse.getNodeWorldPositionY(actor, 'NPC Head [Head]', false),
                    skyrimPlatform_1.NetImmerse.getNodeWorldPositionZ(actor, 'NPC Head [Head]', false),
                ];
                const [screenPoint] = (0, skyrimPlatform_1.worldPointToScreenPoint)(headPos);
                const isOnScreen = screenPoint[0] > 0 && screenPoint[1] > 0 && screenPoint[2] > 0 && screenPoint[0] < 1 && screenPoint[1] < 1 && screenPoint[2] < 1;
                if (isOnScreen !== this.isOnScreen) {
                    this.isOnScreen = isOnScreen;
                    if (isOnScreen) {
                        actor.queueNiNodeUpdate();
                        skyrimPlatform_1.Game.getPlayer().queueNiNodeUpdate();
                    }
                }
            }
        }
        if (this.refrId && ((_a = model.appearance) === null || _a === void 0 ? void 0 : _a.name) && Date.now() - this.lastUpdateVoicePosition >= MIN_TIME_TO_UPDATE_VOICE_POSITION_AND_TINTS) {
            const targetActor = skyrimPlatform_1.Actor.from(refr);
            this.lastUpdateVoicePosition = Date.now();
            VoiceChat_1.VoiceChat.updateActorPosition(model === null || model === void 0 ? void 0 : model.playerDynamicId, new Vector3_1.Vector3(targetActor.getPositionX(), targetActor.getPositionY(), targetActor.getPositionZ()));
        }
        if (FormView.isDisplayingNicknames && this.refrId && ((_b = model.appearance) === null || _b === void 0 ? void 0 : _b.name)) {
            const headPart = 'NPC Head [Head]';
            const nickNamePosYOffset = -27;
            const staticPosYOffset = 4;
            const deadPosYOffset = -47;
            const adminTagYOffset = -60;
            const voicePosYOffset = -43;
            const playerActor = skyrimPlatform_1.Game.getPlayer();
            const targetActor = skyrimPlatform_1.Actor.from(refr);
            const remoteServer = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer);
            const worlds = remoteServer.getWorldModel();
            const playerForm = worlds.forms.find(v => (v === null || v === void 0 ? void 0 : v.refrId) === (0, worldViewMisc_1.localIdToRemoteId)(playerActor.getFormID(), true));
            const playerIsAdmin = playerForm === null || playerForm === void 0 ? void 0 : playerForm.playerAdminIsLogin;
            const targetIsAdmin = model === null || model === void 0 ? void 0 : model.playerAdminIsLogin;
            const targetAdminName = model === null || model === void 0 ? void 0 : model.playerAdminName;
            const name = targetIsAdmin && targetAdminName
                ? targetAdminName
                : Familiars_1.FamiliarsHandler.playerKnowTarget(model === null || model === void 0 ? void 0 : model.playerPersonId) || playerIsAdmin || targetIsAdmin
                    ? model.appearance.name
                    : model.appearance.isFemale
                        ? 'Незнакомка'
                        : 'Незнакомец';
            targetActor.setDisplayName(`${name} [${model.playerDynamicId}]`, true);
            const isVisibleByPlayer = playerActor.getDistance(refr) <= exports.MAX_NICKNAME_VISIBLE && playerActor.hasLOS(refr);
            if (isVisibleByPlayer) {
                const headScreenPos = (0, skyrimPlatform_1.worldPointToScreenPoint)([
                    skyrimPlatform_1.NetImmerse.getNodeWorldPositionX(refr, headPart, false),
                    skyrimPlatform_1.NetImmerse.getNodeWorldPositionY(refr, headPart, false),
                    skyrimPlatform_1.NetImmerse.getNodeWorldPositionZ(refr, headPart, false) + 25,
                ])[0];
                const resolution = (0, exports.getScreenResolution)();
                const textXPos = Math.round(headScreenPos[0] * resolution.width);
                const textYPos = Math.round((1 - headScreenPos[1]) * resolution.height);
                const distance = playerActor.getDistance(refr);
                const size = calculateTextSize(distance);
                const voiceSize = calculateTextSize(distance, 0.4, 1);
                if (!this.textVoiceId) {
                    this.textVoiceId = (0, skyrimPlatform_1.createText)(textXPos, textYPos + voicePosYOffset * voiceSize, model.VoiceIsActive ? '=' : '', [255, 255, 255, 1]);
                    (0, skyrimPlatform_1.setTextSize)(this.textVoiceId, voiceSize);
                }
                else {
                    (0, skyrimPlatform_1.setTextPos)(this.textVoiceId, textXPos, textYPos + voicePosYOffset * voiceSize);
                    (0, skyrimPlatform_1.setTextString)(this.textVoiceId, model.VoiceIsActive ? '=' : '');
                    (0, skyrimPlatform_1.setTextSize)(this.textVoiceId, voiceSize);
                }
                if (model === null || model === void 0 ? void 0 : model.playerIsDead) {
                    if (!this.textIsDeadId) {
                        this.textIsDeadId = (0, skyrimPlatform_1.createText)(textXPos, textYPos + deadPosYOffset * size, `*Умирает*`, [255, 0, 0, 1]);
                        (0, skyrimPlatform_1.setTextSize)(this.textIsDeadId, size);
                    }
                    else {
                        (0, skyrimPlatform_1.setTextPos)(this.textIsDeadId, textXPos, textYPos + deadPosYOffset * size);
                        (0, skyrimPlatform_1.setTextString)(this.textIsDeadId, `*Умирает*`);
                        (0, skyrimPlatform_1.setTextSize)(this.textIsDeadId, size);
                    }
                }
                else {
                    this.removeIsDead();
                }
                if (targetIsAdmin) {
                    if (!this.textAdminTag) {
                        this.textAdminTag = (0, skyrimPlatform_1.createText)(textXPos, textYPos + adminTagYOffset * size, `Администратор`, [255, 0, 0, 1]);
                        (0, skyrimPlatform_1.setTextSize)(this.textAdminTag, size);
                    }
                    else {
                        (0, skyrimPlatform_1.setTextPos)(this.textAdminTag, textXPos, textYPos + adminTagYOffset * size);
                        (0, skyrimPlatform_1.setTextString)(this.textAdminTag, `Администратор`);
                        (0, skyrimPlatform_1.setTextSize)(this.textAdminTag, size);
                    }
                }
                else {
                    this.removeAdminTag();
                }
                if (!this.textNameId) {
                    if ((model === null || model === void 0 ? void 0 : model.playerDynamicId) == null) {
                        this.textNameId = (0, skyrimPlatform_1.createText)(textXPos, textYPos + nickNamePosYOffset * size, `${model.appearance.name}`, [255, 255, 255, 1]);
                    }
                    else {
                        this.textNameId = (0, skyrimPlatform_1.createText)(textXPos, textYPos + nickNamePosYOffset * size, `${name} [${model.playerDynamicId}]`, [255, 255, 255, 1]);
                    }
                    (0, skyrimPlatform_1.setTextSize)(this.textNameId, size);
                }
                else {
                    (0, skyrimPlatform_1.setTextPos)(this.textNameId, textXPos, textYPos + nickNamePosYOffset * size);
                    if ((model === null || model === void 0 ? void 0 : model.playerDynamicId) == null) {
                        (0, skyrimPlatform_1.setTextString)(this.textNameId, `${model.appearance.name}`);
                    }
                    else {
                        (0, skyrimPlatform_1.setTextString)(this.textNameId, `${name} [${model.playerDynamicId}]`);
                    }
                    (0, skyrimPlatform_1.setTextSize)(this.textNameId, size);
                }
                if (!this.textStaticId) {
                    if ((model === null || model === void 0 ? void 0 : model.playerStatic) != null) {
                        this.textStaticId = (0, skyrimPlatform_1.createText)(textXPos, textYPos + staticPosYOffset * size, `#${model.playerStatic}`, [255, 255, 255, 1]);
                        (0, skyrimPlatform_1.setTextSize)(this.textStaticId, size);
                    }
                }
                else {
                    (0, skyrimPlatform_1.setTextPos)(this.textStaticId, textXPos, textYPos + staticPosYOffset * size);
                    if ((model === null || model === void 0 ? void 0 : model.playerStatic) != null) {
                        (0, skyrimPlatform_1.setTextString)(this.textStaticId, `#${model.playerStatic}`);
                        (0, skyrimPlatform_1.setTextSize)(this.textStaticId, size);
                    }
                }
            }
            else {
                this.removeNickname();
                this.removeVoiceChatIcon();
                this.removeIsDead();
                this.removeAdminTag();
                this.removeStatic();
            }
        }
        else {
            this.removeNickname();
            this.removeVoiceChatIcon();
            this.removeIsDead();
            this.removeAdminTag();
            this.removeStatic();
        }
    }
    removeNickname() {
        if (this.textNameId) {
            (0, skyrimPlatform_1.destroyText)(this.textNameId);
            this.textNameId = undefined;
        }
    }
    removeVoiceChatIcon() {
        if (this.textVoiceId) {
            (0, skyrimPlatform_1.destroyText)(this.textVoiceId);
            this.textVoiceId = undefined;
        }
    }
    removeIsDead() {
        if (this.textIsDeadId) {
            (0, skyrimPlatform_1.destroyText)(this.textIsDeadId);
            this.textIsDeadId = undefined;
        }
    }
    removeAdminTag() {
        if (this.textAdminTag) {
            (0, skyrimPlatform_1.destroyText)(this.textAdminTag);
            this.textAdminTag = undefined;
        }
    }
    removeStatic() {
        if (this.textStaticId) {
            (0, skyrimPlatform_1.destroyText)(this.textStaticId);
            this.textStaticId = undefined;
        }
    }
    getAppearanceBasedBase() {
        const base = skyrimPlatform_1.ActorBase.from(skyrimPlatform_1.Game.getFormEx(this.appearanceBasedBaseId));
        if (!base && this.appearanceState.appearance) {
            this.appearanceBasedBaseId = appearanceSync_1.AppearanceSync.applyAppearance(this.appearanceState.appearance).getFormID();
        }
        return this.appearanceBasedBaseId;
    }
    getDefaultAppearanceState() {
        return { lastNumChanges: 0, appearance: null };
    }
    getLocalRefrId() {
        return this.refrId;
    }
    getRemoteRefrId() {
        return this.remoteRefrId;
    }
}
exports.FormView = FormView;
FormView.isDisplayingNicknames = true;


/***/ }),

/***/ 2193:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormViewArray = void 0;
const formView_1 = __webpack_require__(3770);
const spApiInteraction_1 = __webpack_require__(3331);
const gamemodeUpdateService_1 = __webpack_require__(9759);
const timersService_1 = __webpack_require__(8031);
class FormViewArray {
    constructor() {
        this.formViews = new Array();
    }
    updateForm(form, i) {
        const view = this.formViews[i];
        if (!view) {
            this.formViews[i] = new formView_1.FormView(form.refrId);
        }
        else {
            view.update(form);
        }
    }
    destroyForm(i) {
        const formView = this.formViews[i];
        if (formView === undefined) {
            return;
        }
        formView.destroy();
        this.formViews[i] = undefined;
    }
    resize(newSize) {
        if (this.formViews.length > newSize) {
            this.formViews.slice(newSize).forEach(v => v && v.destroy());
        }
        this.formViews.length = newSize;
    }
    updateAll(model, showMe, isCloneView, batchSize = 2, currentIndex = 0) {
        const gamemodeUpdateService = spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(gamemodeUpdateService_1.GamemodeUpdateService);
        gamemodeUpdateService.setFormViewArray(this);
        const forms = model.forms;
        const endIndex = Math.min(currentIndex + batchSize, forms.length);
        for (let i = currentIndex; i < endIndex; ++i) {
            const form = forms[i];
            if (!form || (model.playerCharacterFormIdx === i && !showMe)) {
                this.destroyForm(i);
                continue;
            }
            let realPos = undefined;
            const offset = model.playerCharacterFormIdx === i || isCloneView;
            if (offset && form.movement) {
                realPos = form.movement.pos;
                form.movement.pos = [realPos[0] + 128, realPos[1] + 128, realPos[2]];
            }
            if (isCloneView) {
                if (!form.refrId || form.refrId >= 0xff000000) {
                    this.updateForm(form, i);
                }
            }
            else {
                gamemodeUpdateService.setI(i);
                this.updateForm(form, i);
            }
            if (offset && form.movement && realPos) {
                form.movement.pos = realPos;
            }
        }
        if (endIndex < forms.length) {
            spApiInteraction_1.SpApiInteraction.getControllerInstance()
                .lookupListener(timersService_1.TimersService)
                .setTimeout(() => this.updateAll(model, showMe, isCloneView, batchSize, endIndex), 0);
        }
    }
    syncFormView(model, showMe) {
        for (let i = 0; i < model.forms.length; ++i) {
            if (!model.forms[i] || (model.playerCharacterFormIdx === i && !showMe)) {
                this.destroyForm(i);
                continue;
            }
        }
    }
    getRemoteRefrId(clientsideRefrId) {
        if (clientsideRefrId < 0xff000000) {
            throw new Error('This function is only for 0xff forms');
        }
        const formView = this.formViews.find((formView) => {
            return formView && formView.getLocalRefrId() === clientsideRefrId;
        });
        return formView ? formView.getRemoteRefrId() : 0;
    }
    getLocalRefrId(remoteRefrId) {
        if (remoteRefrId < 0xff000000) {
            throw new Error('This function is only for 0xff forms');
        }
        const formView = this.formViews.find((formView) => {
            return formView && formView.getRemoteRefrId() === remoteRefrId;
        });
        return formView ? formView.getLocalRefrId() : 0;
    }
    getNthFormView(i) {
        return this.formViews[i];
    }
    getFormViewsArrayLength() {
        return this.formViews.length;
    }
}
exports.FormViewArray = FormViewArray;


/***/ }),

/***/ 3745:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelApplyUtils = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const inventory_1 = __webpack_require__(2552);
class ModelApplyUtils {
    static applyModelInventory(refr, inventory) {
        (0, inventory_1.applyInventory)(refr, inventory, false, true);
    }
    static applyModelIsOpen(refr, isOpen) {
        var _a;
        refr.setOpen(isOpen);
        const caveGSecretDoor01 = 0x6f703;
        const parentActivatorId = 0x460ca;
        if (((_a = refr.getBaseObject()) === null || _a === void 0 ? void 0 : _a.getFormID()) === caveGSecretDoor01) {
            const openOrOpening = [1, 2].includes(refr.getOpenState());
            if (openOrOpening) {
                if (!isOpen) {
                    refr.activate(skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getForm(parentActivatorId)), false);
                }
            }
            if (!openOrOpening) {
                if (isOpen) {
                    refr.activate(skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getForm(parentActivatorId)), false);
                }
            }
        }
    }
    static applyModelIsDisabled(refr, disabled) {
        const wasDisabled = refr.isDisabled();
        if (wasDisabled === disabled) {
            return;
        }
        if (disabled) {
            refr.disable(false);
        }
        else {
            refr.enable(true);
        }
    }
    static applyModelIsHarvested(refr, isHarvested) {
        const base = refr.getBaseObject();
        if (base) {
            const t = base.getType();
            if (t === 38 || t === 39) {
                const wasHarvested = refr.isHarvested();
                if (isHarvested !== wasHarvested) {
                    let ac = null;
                    if (isHarvested) {
                        for (let i = 0; i < 20; ++i) {
                            ac = skyrimPlatform_1.Game.findRandomActor(refr.getPositionX(), refr.getPositionY(), refr.getPositionZ(), 10000);
                            if (ac && ac.getFormID() !== 0x14) {
                                break;
                            }
                        }
                    }
                    if (isHarvested && ac && ac.getFormID() !== 0x14) {
                        refr.activate(ac, true);
                    }
                    else {
                        refr.setHarvested(isHarvested);
                        const id = refr.getFormID();
                        refr.disable(false).then(() => {
                            const restoredRefr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(id));
                            if (restoredRefr) {
                                restoredRefr.enable(false);
                            }
                        });
                    }
                }
            }
            else {
                const wasHarvested = refr.isDisabled();
                if (isHarvested !== wasHarvested) {
                    if (isHarvested) {
                        const id = refr.getFormID();
                        refr.disable(false).then(() => {
                            const restoredRefr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(id));
                            if (restoredRefr && !restoredRefr.isDisabled()) {
                                restoredRefr.delete();
                            }
                        });
                    }
                    else {
                        refr.enable(true);
                    }
                }
            }
        }
    }
    static applyModelNodeTextureSet(refr, setNodeTextureSet) {
        if (setNodeTextureSet) {
            for (const key in setNodeTextureSet) {
                const textureSetId = setNodeTextureSet[key];
                const firstPerson = false;
                const textureSet = skyrimPlatform_1.TextureSet.from(skyrimPlatform_1.Game.getFormEx(textureSetId));
                if (textureSet !== null) {
                    skyrimPlatform_1.NetImmerse.setNodeTextureSet(refr, key, textureSet, firstPerson);
                }
            }
        }
    }
    static applyModelNodeScale(refr, setNodeScale) {
        if (setNodeScale) {
            for (const key in setNodeScale) {
                const scale = setNodeScale[key];
                const firstPerson = false;
                skyrimPlatform_1.NetImmerse.setNodeScale(refr, key, scale, firstPerson);
            }
        }
    }
}
exports.ModelApplyUtils = ModelApplyUtils;


/***/ }),

/***/ 3590:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlayerCharacterDataHolder = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const objectReferenceEx_1 = __webpack_require__(7564);
class PlayerCharacterDataHolder {
    static updateData() {
        (0, skyrimPlatform_1.once)('update', () => {
            var _a;
            const player = skyrimPlatform_1.Game.getPlayer();
            if (!player) {
                return;
            }
            this.inJumpState = player.getAnimationVariableBool('bInJumpState');
            this.worldOrCell = objectReferenceEx_1.ObjectReferenceEx.getWorldOrCell(player);
            this.crosshairRefId = ((_a = skyrimPlatform_1.Game.getCurrentCrosshairRef()) === null || _a === void 0 ? void 0 : _a.getFormID()) || 0;
        });
    }
    static isInJumpState() {
        return this.inJumpState;
    }
    static getWorldOrCell() {
        return this.worldOrCell;
    }
    static getCrosshairRefId() {
        return this.crosshairRefId;
    }
}
exports.PlayerCharacterDataHolder = PlayerCharacterDataHolder;
PlayerCharacterDataHolder.inJumpState = false;
PlayerCharacterDataHolder.worldOrCell = 0;
PlayerCharacterDataHolder.crosshairRefId = 0;


/***/ }),

/***/ 8943:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpawnProcess = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const appearanceSync_1 = __webpack_require__(282);
class SpawnProcess {
    constructor(appearance, pos, refrId, callback) {
        this.callback = callback;
        const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(refrId));
        if (!refr || refr.getFormID() !== refrId) {
            return;
        }
        refr.setPosition(...pos).then(() => this.enable(appearance, refrId));
    }
    enable(appearance, refrId) {
        const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(refrId));
        if (!refr || refr.getFormID() !== refrId) {
            return;
        }
        const ac = skyrimPlatform_1.Actor.from(refr);
        if (ac && appearance) {
            appearanceSync_1.AppearanceSync.applyTints(ac, appearance.tints);
        }
        refr.enable(false).then(() => this.resurrect(refrId));
    }
    resurrect(refrId) {
        const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(refrId));
        if (!refr || refr.getFormID() !== refrId) {
            return;
        }
        const ac = skyrimPlatform_1.Actor.from(refr);
        if (ac) {
            return ac.resurrect().then(() => {
                this.callback();
            });
        }
        return refr.setMotionType(4, true).then(this.callback);
    }
}
exports.SpawnProcess = SpawnProcess;


/***/ }),

/***/ 5400:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorldView = void 0;
const formViewArray_1 = __webpack_require__(2193);
const playerCharacterDataHolder_1 = __webpack_require__(3590);
const clientListener_1 = __webpack_require__(2166);
const remoteServer_1 = __webpack_require__(8986);
const Utils_1 = __webpack_require__(2453);
class WorldView extends clientListener_1.ClientListener {
    constructor(sp, controller) {
        super();
        this.sp = sp;
        this.controller = controller;
        controller.on('update', (0, Utils_1.profile)(() => this.onUpdate(), 'WorldCleaner'));
        controller.once('update', () => this.onceUpdate());
        this.state = this.makeEmptyState();
        const oldView = this.sp.storage.view;
        this.oldView = typeof oldView === 'object' ? oldView : undefined;
        this.sp.storage.view = this;
    }
    getRemoteRefrId(clientsideRefrId) {
        return this.state.formViews.getRemoteRefrId(clientsideRefrId);
    }
    getLocalRefrId(remoteRefrId) {
        return this.state.formViews.getLocalRefrId(remoteRefrId);
    }
    syncFormArray(model) {
        const showMe = false;
        this.state.formViews.syncFormView(model, !!showMe);
    }
    destroy() {
        this.state.formViews.resize(0);
        this.state.cloneFormViews.resize(0);
        this.state = this.makeEmptyState();
    }
    getFormViews() {
        return this.state.formViews;
    }
    onUpdate() {
        this.resetAllFormViewsIfPlayerChangedWorld();
        const modelSource = this.controller.lookupListener(remoteServer_1.RemoteServer);
        this.updateWorld(modelSource.getWorldModel());
    }
    onceUpdate() {
        if (this.oldView) {
            this.oldView.destroy();
            this.oldView = undefined;
        }
        this.waitGameTimeAndAllowFormViewUpdate(1.0);
    }
    resetAllFormViewsIfPlayerChangedWorld() {
        const state = this.state;
        const pc = this.sp.Game.getPlayer();
        const pcWorldOrCell = (pc.getWorldSpace() || pc.getParentCell()).getFormID();
        if (state.pcWorldOrCell !== pcWorldOrCell) {
            if (state.pcWorldOrCell) {
                state.formViews.resize(0);
                state.cloneFormViews.resize(0);
            }
            state.pcWorldOrCell = pcWorldOrCell;
        }
    }
    waitGameTimeAndAllowFormViewUpdate(seconds) {
        this.sp.Utility.wait(seconds).then(() => {
            this.state.allowUpdate = true;
        });
    }
    setFormViewUpdateAllowed(allowed) {
        this.state.allowUpdate = allowed;
    }
    updateWorld(model) {
        const state = this.state;
        if (!state.allowUpdate) {
            model = {
                forms: [],
                playerCharacterFormIdx: model.playerCharacterFormIdx,
                playerCharacterRefrId: model.playerCharacterRefrId,
            };
        }
        state.formViews.resize(model.forms.length);
        const showMe = false;
        const showClones = false;
        playerCharacterDataHolder_1.PlayerCharacterDataHolder.updateData();
        state.formViews.updateAll(model, !!showMe, false);
        if (showClones) {
            state.cloneFormViews.updateAll(model, false, true);
        }
        else {
            state.cloneFormViews.resize(0);
        }
    }
    makeEmptyState() {
        return {
            formViews: new formViewArray_1.FormViewArray(),
            cloneFormViews: new formViewArray_1.FormViewArray(),
            allowUpdate: false,
            pcWorldOrCell: 0,
            counter: false,
        };
    }
}
exports.WorldView = WorldView;


/***/ }),

/***/ 9885:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getObjectReference = exports.remoteIdToLocalId = exports.localIdToRemoteId = exports.getViewFromStorage = void 0;
const skyrimPlatform_1 = __webpack_require__(2112);
const remoteServer_1 = __webpack_require__(8986);
const spApiInteraction_1 = __webpack_require__(3331);
const getViewFromStorage = () => {
    const res = skyrimPlatform_1.storage.view;
    if (typeof res === 'object') {
        return res;
    }
    return undefined;
};
exports.getViewFromStorage = getViewFromStorage;
const localIdToRemoteId = (localFormId, newCast = false) => {
    if (newCast && localFormId === 0x14) {
        return spApiInteraction_1.SpApiInteraction.getControllerInstance().lookupListener(remoteServer_1.RemoteServer).getMyRemoteRefrId();
    }
    if (localFormId >= 0xff000000) {
        const view = (0, exports.getViewFromStorage)();
        if (!view) {
            return 0;
        }
        localFormId = view.getRemoteRefrId(localFormId);
        if (!localFormId) {
            return 0;
        }
        if (localFormId >= 0x100000000) {
            localFormId -= 0x100000000;
        }
    }
    return localFormId;
};
exports.localIdToRemoteId = localIdToRemoteId;
const remoteIdToLocalId = (remoteFormId) => {
    if (remoteFormId >= 0xff000000) {
        const view = (0, exports.getViewFromStorage)();
        if (!view) {
            return 0;
        }
        remoteFormId = view.getLocalRefrId(remoteFormId);
        if (!remoteFormId) {
            return 0;
        }
    }
    return remoteFormId;
};
exports.remoteIdToLocalId = remoteIdToLocalId;
const getObjectReference = (i) => {
    const view = (0, exports.getViewFromStorage)();
    if (view) {
        const formView = view.getFormViews().getNthFormView(i);
        if (formView) {
            const refrId = formView.getLocalRefrId();
            if (refrId > 0) {
                const refr = skyrimPlatform_1.ObjectReference.from(skyrimPlatform_1.Game.getFormEx(refrId));
                if (refr !== null) {
                    return refr;
                }
            }
        }
    }
    return null;
};
exports.getObjectReference = getObjectReference;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(3607);
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;
